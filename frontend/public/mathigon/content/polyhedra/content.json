{
  "sections": [
    {
      "section": "polygons",
      "id": "polygons",
      "description": "Geometric shapes are everywhere around us. In this course you will learn about angels, polygons, tessellations, polyhedra and nets.",
      "color": "\"#4757D3\"",
      "level": "Intermediate",
      "next": "circles",
      "content": "# Polygons and Polyhedra\n\n## Polygons\n\n\nA [__polygon__](gloss:polygon) is a closed, flat shape that has only straight\nsides. Polygons can have any number of sides and angles, but the sides cannot be\ncurved. Which of the shapes below are polygons?\n\n    x-picker\n      .item#item1: include svg/polygons/polygon-1.svg\n      .item(data-error=\"not-a-polygon-1\"): include svg/polygons/polygon-2.svg\n      .item(data-error=\"not-a-polygon-2\"): include svg/polygons/polygon-3.svg\n      .item: include svg/polygons/polygon-4.svg\n      .item(data-error=\"not-a-polygon-3\"): include svg/polygons/polygon-5.svg\n      .item: include svg/polygons/polygon-6.svg\n\n    x-gesture(target=\"#item1\")"
    },
    {
      "id": "polygons-1",
      "content": "We give different names to polygons, depending on how many sides they have:\n\n    .row.padded-thin\n      div(style=\"width: 100px\")\n        include svg/polygons/number-3.svg\n        p.caption #[strong Triangle]#[br]3 sides\n      div(style=\"width: 100px\")\n        include svg/polygons/number-4.svg\n        p.caption #[strong Quadrilateral]#[br]4 sides\n      div(style=\"width: 100px\")\n        include svg/polygons/number-5.svg\n        p.caption #[strong Pentagon]#[br]5 sides\n      div(style=\"width: 100px\")\n        include svg/polygons/number-6.svg\n        p.caption #[strong Hexagon]#[br]6 sides\n      div(style=\"width: 100px\")\n        include svg/polygons/number-7.svg\n        p.caption #[strong Heptagon]#[br]7 sides\n      div(style=\"width: 100px\")\n        include svg/polygons/number-8.svg\n        p.caption #[strong Octagon]#[br]8 sides"
    },
    {
      "id": "angles-0",
      "content": "### Angles in Polygons\n\nEvery polygon with _n_ sides also has _n_ [internal angles](gloss:internal-angle).\nWe already know that the sum of the internal angles in a triangle is always\n[[180]]° but what about other polygons?"
    },
    {
      "id": "angles",
      "goals": "angle-0 angle-1",
      "content": "::: column.grow(width=300)\n\n    x-geopad(width=300 height=300): svg\n      circle.move(name=\"a\" cx=40 cy=40)\n      circle.move(name=\"b\" cx=260 cy=80)\n      circle.move(name=\"c\" cx=240 cy=220)\n      circle.move(name=\"d\" cx=80 cy=260)\n      path.fill.red(x=\"angle(b,a,d)\" label=\"${a1[0]}°\")\n      path.fill.blue(x=\"angle(c,b,a)\" label=\"${a1[1]}°\")\n      path.fill.green(x=\"angle(d,c,b)\" label=\"${a1[2]}°\")\n      path.fill.yellow(x=\"angle(a,d,c)\" label=\"${360-a1[0]-a1[1]-a1[2]}°\")\n      path(name=\"p1\" x=\"polygon(a,b,c,d)\")\n\n{.text-center.var} _{span.circled.red}${a1[0]}°_ +\n_{span.circled.blue}${a1[1]}°_ + _{span.circled.green}${a1[2]}°_ +\n_{span.circled.yellow}${360-a1[0]-a1[1]-a1[2]}°_ &nbsp;=&nbsp; _{x-anibutton(text=\"???\")}_\n\n    x-gesture(target=\"x-anibutton\")\n\n::: column.grow(width=300)\n\n    x-geopad(width=300 height=300): svg\n      circle.move(name=\"e\" cx=120 cy=30)\n      circle.move(name=\"f\" cx=270 cy=100)\n      circle.move(name=\"g\" cx=220 cy=270)\n      circle.move(name=\"h\" cx=80 cy=240)\n      circle.move(name=\"i\" cx=30 cy=150)\n      path.fill.red(x=\"angle(f,e,i)\" label=\"${a2[0]}°\")\n      path.fill.blue(x=\"angle(g,f,e)\" label=\"${a2[1]}°\")\n      path.fill.green(x=\"angle(h,g,f)\" label=\"${a2[2]}°\")\n      path.fill.yellow(x=\"angle(i,h,g)\" label=\"${a2[3]}°\")\n      path.fill.purple(x=\"angle(e,i,h)\" label=\"${540-a2[0]-a2[1]-a2[2]-a2[3]}°\")\n      path(name=\"p2\" x=\"polygon(e,f,g,h,i)\")\n\n{.text-center.var} _{span.circled.red}${a2[0]}°_ +\n_{span.circled.blue}${a2[1]}°_ + _{span.circled.green}${a2[2]}°_ +\n_{span.circled.yellow}${a2[3]}°_ +\n_{span.circled.purple}${540-a2[0]-a2[1]-a2[2]-a2[3]}°_ &nbsp;=&nbsp; _{x-anibutton(text=\"???\")}_\n:::"
    },
    {
      "id": "angles-1",
      "content": "It looks like the sum of internal angles in a quadrilateral is always [[360]]°\n– exactly [[twice|three times|half]] the sum of angles in a triangle.\n_{span.reveal(when=\"blank-0 blank-1\")} This is no coincidence: every quadrilateral\ncan be split into two triangles._\n\n    .row.padded-thin\n      .reveal(when=\"blank-1\" style=\"width: 140px\"): include svg/polygons/triangles-4.svg\n      .reveal(when=\"blank-2\" style=\"width: 140px\"): include svg/polygons/triangles-1.svg\n      .reveal(when=\"blank-4\" style=\"width: 140px\"): include svg/polygons/triangles-2.svg\n      .reveal(when=\"blank-4\" delay=500 style=\"width: 140px\"): include svg/polygons/triangles-3.svg\n\n{.reveal(when=\"blank-0 blank-1\")} The same also works for larger polygons.\nWe can split a pentagon into [[3]] triangles, so its internal angle sum is\n`3 × 180° =` [[540]]°. _{span.reveal(when=\"blank-2 blank-3\")} And we can split\na hexagon into [[4]] triangles, so its internal angle sum is `4 × 180° =` [[720]]°._"
    },
    {
      "id": "internal-angle-sum",
      "content": "A polygon with ${x}{x|7|3,15,1} sides will have an internal angle sum of\n180° × ${x-2} = ${(x-2)*180}°. More generally, a polygon with _n_ sides can be\nsplit into [[n – 2|n – 1|n]] triangles. Therefore,\n\n{.text-center.reveal(when=\"blank-0\")} Sum of internal angles in an _n_-gon\n`= (n - 2) × 180°`.\n\n    x-gesture(target=\"#internal-angle-sum x-var\" slide=\"100,0\")"
    },
    {
      "id": "concave",
      "content": "### Convex and Concave Polygons\n\n::: column.grow\nWe say that a polygon is [__concave__](gloss:concave) if it has a section that\n“points inwards”. You can imagine that this part has [“caved in”](target:cave).\nPolygons that are _not_ concave are called [__convex__](gloss:convex).\n\nThere are two ways you can easily identify concave polygons: they have [at least\none internal angle](target:angle) that is bigger than 180°. They also have [at\nleast one diagonal](target:diagonal) that lies _outside_ the polygon.\n\nIn convex polygons, on the other hand, all internal angles are less than\n[[180]]°, and all diagonals lie [[inside|outside]] the polygon.\n::: column(width=240)\n\n    x-geopad(width=240): svg\n      circle(hidden name=\"a\" x=\"point(40,70)\")\n      circle(hidden name=\"b\" x=\"point(60,170)\")\n      circle(hidden name=\"c\" x=\"point(160,200)\")\n      circle(hidden name=\"d\" x=\"point(150,130)\")\n      circle(hidden name=\"e\" x=\"point(190,40)\")\n      path.fill.blue(x=\"polygon(a,b,c,d,e)\" target=\"cave diagonal angle\")\n      path.transparent.red.fill(x=\"polygon(c,d,e)\" target=\"cave\")\n      path.red.fill.transparent(x=\"angle(c,d,e)\" target=\"angle\")\n      path.transparent(x=\"segment(a,c)\" target=\"diagonal\" style=\"stroke: #f7f7f8\")\n      path.transparent(x=\"segment(a,d)\" target=\"diagonal\" style=\"stroke: #f7f7f8\")\n      path.transparent(x=\"segment(b,d)\" target=\"diagonal\" style=\"stroke: #f7f7f8\")\n      path.transparent(x=\"segment(b,e)\" target=\"diagonal\" style=\"stroke: #f7f7f8\")\n      path.transparent.red(x=\"segment(c,e)\" target=\"diagonal\")\n:::"
    },
    {
      "id": "concave-1",
      "content": "Which of these polygons are concave?\n\n    x-picker\n      .item(data-error=\"not-concave-1\"): include svg/polygons/concave-1.svg\n      .item(data-error=\"not-concave-2\"): include svg/polygons/concave-2.svg\n      .item: include svg/polygons/concave-3.svg\n      .item: include svg/polygons/concave-4.svg\n      .item(data-error=\"not-concave-3\"): include svg/polygons/concave-5.svg\n      .item: include svg/polygons/concave-6.svg"
    },
    {
      "id": "regular-polygons",
      "content": "### Regular Polygons\n\nWe say that a polygon is [__regular__](gloss:regular-polygon) if all of its\nsides have the same length, and all of the angles have the same size. Which of\nthese shapes are regular polygons?\n\n    x-picker\n      .item: include svg/polygons/regular-1.svg\n      .item(data-error=\"not-regular-1\"): include svg/polygons/regular-2.svg\n      .item: include svg/polygons/regular-3.svg\n      .item(data-error=\"not-regular-2\"): include svg/polygons/regular-4.svg\n      .item(data-error=\"not-regular-3\"): include svg/polygons/regular-5.svg\n      .item: include svg/polygons/regular-6.svg"
    },
    {
      "id": "regular-1",
      "content": "Regular polygons can come in many different sizes – but all regular polygons\nwith the same number of sides [[are similar|are congruent|have the same area]]!"
    },
    {
      "id": "regular-2",
      "content": "We already know the sum of all [internal angles](gloss:internal-angle) in\npolygons. For regular polygons all these angles have [[the same size|are alternate angles]],\nso we can work out the size of a single internal angle:\n\n{.text-center.reveal(when=\"blank-0\")} `\"angle\" = blank(\"sum of all angles\",\"number of angles\")/\nblank(\"number of angles\",\"sum of all angles\")`\n_{span.reveal(when=\"blank-1 blank-2\")} = `(180° × (x-2))/x = 180° - (360°)/x`._\n\n{.reveal(when=\"blank-1 blank-2\" delay=1000)} If `n=3` we get the size of the\ninternal angles of an equilateral triangle – we already know that it must be\n[[60]]°. _{span.reveal(when=\"blank-3\")} In a regular polygon with ${x}{x|6|3,12,1}\nsides, every internal angle is 180° – `\"360°\"/var(\"x\")` = ${round(180-360/x)}°._"
    },
    {
      "id": "regular-area",
      "content": "### The Area of Regular Polygons\n\n::: column(width=320)\n\n    x-geopad.sticky(width=320 height=320): svg\n      circle.reveal(name=\"m\" x=\"point(160, 160)\" when=\"blank-0\" animation=\"pop\")\n      path(name=\"p\" x=\"regular(m, 140, n)\")\n      circle(name=\"p0\" x=\"p.points[0]\")\n      circle(name=\"p1\" x=\"p.points[1]\")\n      circle(name=\"k\" x=\"segment(p1,p0).midpoint\" hidden)\n\n      path.blue.fill.light.transparent(x=\"polygon(p0,m,p1)\" target=\"isosceles-triangle\")\n      path.blue.fill.light.transparent(x=\"polygon(p0,m,k)\" target=\"right-triangle\")\n      path.blue.fill.transparent(x=\"angle(m,k,p0)\" size=15 target=\"right-triangle\")\n      path.blue.fill.reveal(when=\"blank-1 blank-2\" x=\"angle(k,p0,m)\" size=25 target=\"base-angle right-triangle alpha isosceles-triangle\" label=\"α\")\n      path.blue.fill.reveal(when=\"blank-1 blank-2\" x=\"angle(m,p1,k)\" size=25 target=\"base-angle isosceles-triangle\")\n\n      for i in [0,1,2,3,4,5,6,7,8,9,10,11]\n        path.thin.reveal(when=\"blank-0\" delay=i*150 x=`segment(p.points[${i}%n],m)` animation=\"draw\")\n\n      path.yellow.reveal(when=\"blank-2\" x=\"segment(m,k)\" target=\"apothem\" label=\"apothem\" animation=\"draw\")\n      path.green(x=\"segment(p1,p0)\" target=\"base\" label=\"s = 1m\")\n      path.green(x=\"segment(k,p0)\" target=\"base half-base\")\n\n      for i in [0,1,2,3,4,5,6,7,8,9,10,11]\n        path.red.fill.transparent(x=`angle(p.points[${i+2}%n],p.points[${i+1}%n],p.points[${i}%n])` size=18 target=\"int-angle\")\n\n::: column.grow\nHere you can see a [regular polygon](gloss:regular-polygon) with ${n}{n|5|4,12,1}\nsides. Every side has length [{.green} 1m](target:base). Let’s\ntry to calculate its area!\n\nFirst, we can split the polygon into ${toWord(n)} congruent,\n[[isosceles|equilateral|right-angled]] triangles.\n\n{.reveal(when=\"blank-0\")} We already know the [[base|height|area]] of these\ntriangles, but we also need the [[height|legs|medians]] to be able to calculate\nits area. _{span.reveal(when=\"blank-2\")} In regular polygons, this height\nis sometimes called the [{.yellow}apothem](target:apothem)._\n\n{.reveal(when=\"blank-1 blank-2\" delay=1000)} Notice that there is a [{.blue} right angled\ntriangle](target:right-triangle) formed by the apothem and half the base of the\nisosceles triangle. This means that we can use trigonometry!\n\n{.reveal(when=\"blank-1 blank-2\" delay=2000)} The [{.blue} base angles](target:base-angle)\nof the isosceles triangle (let’s call them α) are [[half the|the same|twice the]]\nsize of the [{.red} internal angles](target:int-angle) of the polygon:\n\n{.text-center.reveal(when=\"blank-3\")} `pill(α, \"blue\", \"alpha\") = 1/2 (180° -\n(360°)/var(\"n\")) = var(\"round(90-180/n,2)\")`\n\n{.reveal(when=\"blank-3\")} To find the apothem, we can use the definition of\nthe [[tangent|sine|cosine]] function:\n\n{.text-center.reveal(when=\"blank-4\")} `tan pill(α, \"blue\", \"alpha\") =\npill(\"opposite\", \"yellow\", \"apothem\") / pill(\"adjacent\", \"green\", \"half-base\") =\nblank(\"apothem\", \"s\", \"s/2\") / blank(\"s/2\", \"s\", \"apothem\")`\n\n{.text-center.reveal(when=\"blank-5 blank-6\")} `⇒ pill(\"apothem\", \"yellow\",\n\"apothem\") = 1/2 pill(s, \"green\", \"base\") × tan pill(α, \"blue\", \"alpha\") =\nvar(\"round(tan(pi/2-pi/n)/2,2)\")\"m\"`\n\n{.reveal(when=\"blank-5 blank-6\" delay=2000)} Now, the area of the\n[{.blue}isosceles triangle](target:isosceles-triangle) is\n\n{.text-center.reveal(when=\"blank-5 blank-6\" delay=2000)} `1/2 \"base\" × \"height\"\n= 1/2 pill(\"1m\", \"green\", \"base\") × pill(var(\"round(tan(pi/2-pi/n)/2,2)\"),\n\"yellow\", \"apothem\") = var(\"round(tan(pi/2-pi/n)/4,2)\") \"m\"^2`\n\n{.reveal(when=\"blank-5 blank-6\" delay=4000)} The polygon consists of ${toWord(n)}\nof these isosceles triangles, all of which have the same area. Therefore, the\ntotal area of the polygon is\n\n{.text-center.reveal(when=\"blank-5 blank-6\" delay=4000)} `A = var(\"n\") ×\nvar(\"round(tan(pi/2-pi/n)/4,2)\") = var(\"round(n×tan(pi/2-pi/n)/4,2)\")\n\"m\"^2`\n:::"
    },
    {
      "section": "quadrilaterals",
      "id": "quadrilaterals",
      "content": "## Quadrilaterals\n\n\nIn the [previous course](/course/triangles) we investigated many different\nproperties of triangles. Now let’s have a look at quadrilaterals.\n\nA _regular quadrilateral_ is called a [[square|rectangle|equilateral quadrilateral]].\nAll of its sides have the same length, and all of its angles are equal.\n\n::: column.quadrilateral.reveal(when=\"blank-0\")\n\n    x-geopad(width=210 height=120): svg\n      circle.move(name=\"a\" cx=60 cy=15)\n      circle.move(name=\"b\" cx=60 cy=105)\n      circle(name=\"c\" x=\"a.rotate(pi/2,b)\")\n      circle(name=\"d\" x=\"b.rotate(-pi/2,a)\")\n      path.fill.yellow.light(x=\"polygon(a,b,c,d)\")\n      path.blue(x=\"angle(a,b,c)\" target=\"angle\")\n      path.blue(x=\"angle(b,c,d)\" target=\"angle\")\n      path.blue(x=\"angle(c,d,a)\" target=\"angle\")\n      path.blue(x=\"angle(d,a,b)\" target=\"angle\")\n      path.red(x=\"segment(a,b)\" target=\"side\" mark=\"bar\")\n      path.red(x=\"segment(b,c)\" target=\"side\" mark=\"bar\")\n      path.red(x=\"segment(c,d)\" target=\"side\" mark=\"bar\")\n      path.red(x=\"segment(d,a)\" target=\"side\" mark=\"bar\")\n\n{.caption} A __square__ is a quadrilateral with [{.red} four equal sides](target:side)\nand [{.blue} four equal angles](target:angle).\n:::"
    },
    {
      "id": "quadrilaterals-1",
      "content": "For slightly “less regular” quadrilaterals, we have two options. If we just want\nthe _angles_ to be equal, we get a [__rectangle__](gloss:rectangle). If we just\nwant the _sides_ to be equal, we get a [__rhombus__](gloss:rhombus).\n\n::: column.quadrilateral\n\n    x-geopad(width=210 height=120): svg\n      circle.move(name=\"a\" cx=40 cy=15)\n      circle.move(name=\"b\" cx=40 cy=105)\n      circle.move(name=\"c\" cx=180 cy=105 project=\"line(a,b).perpendicular(b)\")\n      circle(name=\"d\" x=\"c.add(a).subtract(b)\")\n      path.fill.yellow.light(x=\"polygon(a,b,c,d)\")\n      path.blue(x=\"angle(a,b,c)\" target=\"angle\")\n      path.blue(x=\"angle(b,c,d)\" target=\"angle\")\n      path.blue(x=\"angle(c,d,a)\" target=\"angle\")\n      path.blue(x=\"angle(d,a,b)\" target=\"angle\")\n      path.red(x=\"segment(a,b)\")\n      path.red(x=\"segment(b,c)\")\n      path.red(x=\"segment(c,d)\")\n      path.red(x=\"segment(d,a)\")\n\n{.caption} A __Rectangle__ is a quadrilateral with [{.blue} four equal angles](target:angle).\n::: column.quadrilateral\n\n    x-geopad(width=210 height=120): svg\n      circle.move(name=\"e\" cx=50 cy=60)\n      circle.move(name=\"f\" cx=105 cy=15)\n      circle.move(name=\"h\" cx=105 cy=105 project=\"circle(e,distance(e,f))\")\n      circle(name=\"g\" x=\"h.add(f).subtract(e)\")\n      path.fill.yellow.light(x=\"polygon(e,f,g,h)\")\n      path.red(x=\"segment(e,f)\" target=\"side\" mark=\"bar\")\n      path.red(x=\"segment(f,g)\" target=\"side\" mark=\"bar\")\n      path.red(x=\"segment(g,h)\" target=\"side\" mark=\"bar\")\n      path.red(x=\"segment(h,e)\" target=\"side\" mark=\"bar\")\n\n{.caption} A __Rhombus__ is a quadrilateral with [{.red} four equal sides](target:side).\n:::"
    },
    {
      "id": "quadrilaterals-2",
      "content": "There are a few other quadrilaterals, that are even less regular but still have\ncertain important properties:\n\n::: column.quadrilateral\n\n    x-geopad(width=210 height=120): svg\n      circle.move(name=\"a\" cx=20 cy=20)\n      circle.move(name=\"b\" cx=160 cy=20)\n      circle.move(name=\"c\" cx=50 cy=100)\n      circle(name=\"d\" x=\"b.add(c).subtract(a)\")\n      path.fill.yellow.light(x=\"polygon(a,b,d,c)\")\n      path.red(x=\"segment(a,b)\" mark=\"arrow\")\n      path.red(x=\"segment(c,d)\" mark=\"arrow\")\n      path.blue(x=\"segment(a,c)\" mark=\"arrow2\")\n      path.blue(x=\"segment(b,d)\" mark=\"arrow2\")\n\n{.caption} If both pairs of _opposite_ sides are [parallel](gloss:parallel), we\nget a __Parallelogram__.\n::: column.quadrilateral\n\n    x-geopad(width=210 height=120): svg\n      circle.move(name=\"e\" cx=20 cy=60)\n      circle.move(name=\"f\" cx=140 cy=15)\n      circle.move(name=\"g\" cx=190 cy=60)\n      circle(name=\"h\" x=\"f.reflect(line(e,g))\")\n      path.fill.yellow.light(x=\"polygon(e,f,g,h)\")\n      path.red(x=\"segment(e,f,)\" mark=\"bar\")\n      path.blue(x=\"segment(f,g)\" mark=\"bar2\")\n      path.blue(x=\"segment(g,h)\" mark=\"bar2\")\n      path.red(x=\"segment(h,e,)\" mark=\"bar\")\n\n{.caption} If two pairs of _adjacent_ sides have the same length, we get a __Kite__.\n::: column.quadrilateral\n\n    x-geopad(width=210 height=120): svg\n      circle.move(name=\"i\" cx=60 cy=15)\n      circle.move(name=\"j\" cx=20 cy=105)\n      circle.move(name=\"k\" cx=190 cy=105)\n      circle.move(name=\"l\" cx=160 cy=15 project=\"line(j,k).parallel(i)\")\n      path.fill.yellow.light(x=\"polygon(i,j,k,l)\")\n      path(x=\"segment(i,j)\")\n      path.red(x=\"segment(j,k)\" mark=\"arrow\")\n      path(x=\"segment(k,l)\")\n      path.red(x=\"segment(i,l)\" mark=\"arrow\")\n\n{.caption} If at least one pair of opposite sides is parallel, we get a\n__Trapezium__.\n:::"
    },
    {
      "id": "quadrilaterals-venn",
      "content": "Quadrilaterals can fall into multiple of these categories. We can visualise the\nhierarchy of different types of quadrilaterals as a [Venn\ndiagram](gloss:venn-diagram):\n\n    figure: include svg/venn.svg\n\nFor example, every rectangle is also a [[parallelogram|rhombus|square]], and\nevery [[rhombus|trapezium|parallelogram]] is also a kite. A rhombus is\n[[sometimes|always|never]] a square and a rectangle is [[always|sometimes|never]]\na trapezium.\n\n{.reveal(when=\"blank-0 blank-1 blank-2 blank-3\")} To avoid any ambiguity, we\nusually use just the most specific type."
    },
    {
      "id": "midsegments",
      "content": "::: column(width=300)\n\n    x-geopad.sticky(width=300 height=300): svg\n\n::: column.grow\nNow pick four points, anywhere in the grey box on the left.\n_{span.reveal(when=\"points\")} We can connect all of them to form a quadrilateral._\n\n{.reveal(when=\"points\" delay=1000)} Let’s find the midpoint of each of the four\nsides. If we connect the midpoints, we get [[another quadrilateral|a triangle|a rectangle]].\n\n{.reveal(when=\"blank-0\")} Try moving the vertices of the outer quadrilateral and\nobserve what happens to the smaller one. It looks like it is not just _any_\nquadrilateral, but always a [[parallelogram|trapezium|rectangle]]!\n\n{.reveal(when=\"blank-1\")} But why is that the case? Why should the result\nfor _any_ quadrilateral always end up being a parallelogram? To help us explain,\nwe need to draw one of the [diagonals](gloss:polygon-diagonal) of the original\nquadrilateral.\n\n{.reveal(when=\"diagonal\")} The diagonal splits the quadrilateral into [two\ntriangles](target:triangle). And now you can see that [two of the sides](target:midsegment)\nof the inner quadrilateral are actually [[midsegments|medians|perpendicular bisectors]]\nof these triangles.\n\n{.reveal(when=\"blank-2\")} In the [previous course](/course/triangles/properties)\nwe showed that [midsegments](gloss:triangle-midsegment) of a triangle are always\nparallel to its base. In this case, it means that [both these sides](target:parallel)\nare parallel to the diagonal – therefore they must also be [[parallel to each\nother|the same length|perpendicular to each other]].\n\n{.reveal(when=\"blank-3\" delay=2000)} We can do exactly the same with the [second\ndiagonal](target:other) of the quadrilateral, to show that both pairs of\nopposite sides are parallel. And this is all we need to prove that the inner\nquadrilateral is a [parallelogram](gloss:parallelogram). _{span.qed}_\n:::"
    },
    {
      "id": "parallelograms",
      "content": "### Parallelograms\n\nIt turns out that parallelograms have many other interesting properties, other\nthan opposite sides being parallel. Which of the following six statements are\ntrue?\n\n::: column.grow\n\n    x-picker.list\n      .item.md The opposite sides are [congruent](gloss:congruent).\n      .item(data-error=\"parall-error-1\") The internal angles are always less than 90°.\n      .item.md(data-error=\"parall-error-2\") The diagonals [bisect](gloss:angle-bisector) the internal angles.\n      .item The opposite angles are congruent.\n      .item(data-error=\"parall-error-3\") Both diagonals are congruent.\n      .item(data-error=\"parall-error-4\") Adjacent sides have the same length\n      .item The two diagonals bisect each other in the middle.\n\n::: column(width=300)\n\n    x-geopad(width=300 height=240): svg\n      circle.move(name=\"a\" cx=80 cy=50)\n      circle.move(name=\"b\" cx=20 cy=190)\n      circle.move(name=\"c\" cx=220 cy=190)\n      circle(name=\"d\" x=\"b.rotate(pi,line(a,c).midpoint)\")\n\n      path.red(x=\"segment(a,b)\")\n      path.red(x=\"segment(c,d)\")\n      path.blue(x=\"segment(b,c)\")\n      path.blue(x=\"segment(a,d)\")\n      path.thin.light(x=\"segment(a,c)\")\n      path.thin.light(x=\"segment(b,d)\")\n\n      path.thin.light(x=\"angle(a,b,c).sup\")\n      path.thin.light(x=\"angle(b,c,d).sup\")\n      path.thin.light(x=\"angle(c,d,a).sup\")\n      path.thin.light(x=\"angle(d,a,b).sup\")\n\n:::"
    },
    {
      "id": "parallelograms-proof",
      "content": "Of course, simply “observing” these properties is not enough. To be sure that\nthey are _always_ true, we need to _prove_ them:\n\n::: tab\n#### Opposite Sides and Angles _{span.check(when=\"diagonal blank-0 blank-1\")}_\n\n::: column(width=300)\n\n    x-geopad.sticky(width=300 height=300): svg\n      circle.move(name=\"a\" cx=80 cy=80)\n      circle.move(name=\"b\" cx=20 cy=220)\n      circle.move(name=\"c\" cx=220 cy=220)\n      circle(name=\"d\" x=\"b.rotate(pi,line(a,c).midpoint)\")\n\n      path.reveal.fill.red(when=\"diagonal\" x=\"angle(a,o?c:b,d).sup\" target=\"red-angle\")\n      path.reveal.fill.red(when=\"diagonal\" x=\"angle(c,o?a:d,b).sup\" target=\"red-angle\")\n      path.reveal.fill.blue(when=\"diagonal\" x=\"angle(d,o?a:b,c).sup\" target=\"blue-angle\")\n      path.reveal.fill.blue(when=\"diagonal\" x=\"angle(b,o?c:d,a).sup\" target=\"blue-angle\")\n\n      path.fill.yellow.transparent(x=\"polygon(a,b,o?c:d)\" target=\"triangles\")\n      path.fill.green.transparent(x=\"polygon(o?a:b,c,d)\" target=\"triangles\")\n      path(x=\"polygon(a,b,c,d)\")\n\n      path.green.transparent(x=\"segment(a,b)\" target=\"sides\")\n      path.green.transparent(x=\"segment(c,d)\" target=\"sides\")\n      path.yellow.transparent(x=\"segment(b,c)\" target=\"sides\")\n      path.yellow.transparent(x=\"segment(a,d)\" target=\"sides\")\n      path.fill.green.transparent(x=\"angle(a,b,c).sup\" target=\"angles\")\n      path.fill.green.transparent(x=\"angle(c,d,a).sup\" target=\"angles\")\n      path.fill.yellow.transparent(x=\"angle(b,c,d).sup\" target=\"angles\")\n      path.fill.yellow.transparent(x=\"angle(d,a,b).sup\" target=\"angles\")\n\n::: column.grow\n{.task} Let’s try to prove that the opposite sides and angles in a parallelogram\nare always congruent.\n\nStart by drawing one of the diagonals of the parallelogram.\n\n{.reveal(when=\"diagonal\")} The diagonal creates four new angles with the sides\nof the of the parallelogram. The two [{.red} red angles](target:red-angle) and the two\n[{.blue} blue angles](target:blue-angle) are [alternate angles](gloss:alternate-angles),\nso they must each be [[congruent|adjacent|supplementary]].\n\n{.reveal(when=\"blank-0\")} Now if we look at the [two triangles](target:triangles)\ncreated by the diagonal, we see that they have two congruent angles,\nand [one congruent side](target:diagonal). By the [[ASA|AAS|AA]] congruence\ncondition, both triangles must be congruent.\n\n{.reveal(when=\"blank-1\")} This means that the other corresponding parts of the\ntriangles must also be congruent: in particular, both [pairs of opposite\nsides](target:sides) are congruent, and both [pairs of opposite\nangles](target:angles) are congruent. _{span.qed}_\n:::\n\n{.reveal(when=\"blank-1\")} It turns out that the converse is also true: if both\npairs of opposite sides (or angles) in a quadrilateral are congruent, then the\nquadrilateral has to be a parallelogram.\n\n    //- Adjacent angles are supplementary.\n\n::: tab\n#### Diagonals _{span.check(when=\"diagonal blank-2 blank-3\")}_\n\n::: column(width=300)\n\n    x-geopad.sticky(width=300 height=300): svg\n      circle.move(name=\"a1\" cx=80 cy=80 label=\"A\")\n      circle.move(name=\"b1\" cx=20 cy=220 label=\"B\")\n      circle.move(name=\"c1\" cx=220 cy=220 label=\"C\")\n      circle(name=\"d1\" x=\"b1.rotate(pi,line(a1,c1).midpoint)\" label=\"D\")\n      circle(name=\"m1\" x=\"polygon(a1,b1,c1,d1).centroid\" label=\"M\")\n\n      path.fill.yellow.light(x=\"polygon(b1,m1,c1)\" target=\"triangles1\")\n      path.fill.yellow.light(x=\"polygon(a1,m1,d1)\" target=\"triangles1\")\n\n      path.fill.red(x=\"angle(c1,a1,d1).sup\" target=\"anglesR\")\n      path.fill.red(x=\"angle(b1,c1,a1).sup\" target=\"anglesR\")\n      path.fill.blue(x=\"angle(a1,d1,b1).sup\" target=\"anglesB\")\n      path.fill.blue(x=\"angle(d1,b1,c1).sup\" target=\"anglesB\")\n\n      path(x=\"polygon(a1,b1,c1,d1)\")\n      path(x=\"segment(a1,c1)\")\n      path(x=\"segment(b1,d1)\")\n      path.green(x=\"segment(a1,d1)\" target=\"side1\")\n      path.green(x=\"segment(b1,c1)\" target=\"side1\")\n\n      path.yellow.tick.transparent(x=\"segment(a1,m1)\" target=\"AM\")\n      path.yellow.tick.transparent(x=\"segment(b1,m1)\" target=\"BM\")\n      path.yellow.tick.transparent(x=\"segment(c1,m1)\" target=\"CM\")\n      path.yellow.tick.transparent(x=\"segment(d1,m1)\" target=\"DM\")\n\n::: column.grow\n{.task} Now prove that the two diagonals in a parallelogram bisect each other.\n\nLet’s think about the two yellow triangles generated by the diagonals:\n\n* We have just proved that the [{.green} two green sides](target:side1) are congruent, because they\n  are opposite sides of a parallelogram.\n* The [{.red} two red angles](target:anglesR) and [{.blue} two blue angles](target:anglesB) are\n  congruent, because they are [[alternate angles|opposite angles|right angles]].\n\n{.reveal(when=\"blank-2\")} By the [[ASA|SSS|AAS]] condition, both of the yellow\ntriangles must therefore also be congruent.\n\n{.reveal(when=\"blank-3\")} Now we can use the fact the corresponding parts of congruent triangles are\nalso congruent, to conclude that [{.yellow} `bar(AM)`](target:AM) = [{.yellow} `bar(CM)`](target:CM)\nand [{.yellow} `bar(BM)`](target:BM) = [{.yellow} `bar(DM)`](target:DM). In other words, the two\ndiagonals intersect at their midpoints. _{span.qed}_\n:::\n\n{.reveal(when=\"blank-3\")} Like before, the opposite is also true: if the two\ndiagonals of a quadrilateral bisect each other, then the quadrilateral is a\nparallelogram.\n:::"
    },
    {
      "id": "kites",
      "content": "### Kites\n\n::: column.grow\nWe showed above that the two pairs of [[opposite|adjacent]] sides of a\nparallelogram are congruent. In a kite, two pairs of _adjacent_ sides are\ncongruent.\n\nThe name _Kite_ clearly comes from its shape: it looks like the kites you can\nfly in the sky. However, of all the special quadrilaterals we have seen so far,\nthe Kite is the only one that can also be [concave](gloss:concave): if it is\nshaped like a dart or arrow:\n::: column(width=320)\n\n    x-img(src=\"images/kites.jpg\")\n\n:::\n\n::: column(width=240)\n\n    x-geopad(width=240 height=180): svg\n      circle(name=\"a\" x=\"point(20,90)\")\n      circle(name=\"b\" x=\"point(90,20)\")\n      circle.move(name=\"c\" cx=200 cy=90 project=\"segment(point(100,90),point(220,90))\")\n      circle(name=\"d\" x=\"point(90,160)\")\n      path.fill.yellow.light(x=\"polygon(a,b,c,d)\")\n      path.red(x=\"segment(a,b)\")\n      path.red(x=\"segment(a,d)\")\n      path.blue(x=\"segment(b,c)\")\n      path.blue(x=\"segment(d,c)\")\n\n{.caption} A convex kite\n::: column(width=240)\n\n    x-geopad(width=240 height=180): svg\n      circle(name=\"a1\" x=\"point(20,90)\")\n      circle(name=\"b1\" x=\"point(220,20)\")\n      circle.move(name=\"c1\" cx=150 cy=90 project=\"segment(point(70,90),point(210,90))\")\n      circle(name=\"d1\" x=\"point(220,160)\")\n      path.fill.green.light(x=\"polygon(a1,b1,c1,d1)\")\n      path.red(x=\"segment(a1,b1)\")\n      path.red(x=\"segment(a1,d1)\")\n      path.blue(x=\"segment(b1,c1)\")\n      path.blue(x=\"segment(d1,c1)\")\n\n{.caption} A concave kite that looks like an arrow\n:::"
    },
    {
      "id": "kites-1",
      "content": "::: column(width=300)\n\n    x-geopad.sticky(width=300): svg\n      circle.move(name=\"a\" cx=30 cy=150)\n      circle.move(name=\"b\" cx=110 cy=250)\n      circle.move(name=\"c\" cx=270 cy=150)\n      circle(name=\"d\" x=\"b.reflect(line(a,c))\")\n      circle.transparent(name=\"m\" x=\"line(a,c).project(b)\")\n\n      path.fill.light.blue.reveal(when=\"next-0\" x=\"angle(b,a,d).sup\" target=\"angles vAngle sas\")\n      path.fill.light.green.reveal(when=\"next-0\" x=\"angle(b,c,d).sup\" target=\"angles vAngle\")\n      path.fill.light.red.reveal(when=\"next-0\" x=\"angle(a,d,c).sup\" target=\"angles\")\n      path.fill.light.red.reveal(when=\"next-0\" x=\"angle(a,b,c).sup\" target=\"angles\")\n      path.fill.light.yellow.reveal(when=\"next-3\" x=\"angle(a,m,d).sup\" target=\"alpha\" label=\"α\")\n      path.fill.light.yellow.reveal(when=\"next-3\" x=\"angle(b,m,a).sup\" target=\"beta\" label=\"β\")\n\n      path.fill.red.transparent(x=\"polygon(a,b,c)\" target=\"triangle1\")\n      path.fill.yellow.transparent(x=\"polygon(a,c,d)\" target=\"triangle1\")\n      path.fill.red.transparent(x=\"polygon(a,m,d)\" target=\"triangle2\")\n      path.fill.yellow.transparent(x=\"polygon(a,m,b)\" target=\"triangle2\")\n\n      path.green(x=\"segment(a,b)\" target=\"sss sas\")\n      path.green(x=\"segment(a,d)\" target=\"sss sas\")\n      path.blue(x=\"segment(d,c)\" target=\"sss\")\n      path.blue(x=\"segment(b,c)\" target=\"sss\")\n\n      path.red.light.thin.reveal(when=\"blank-1\" x=\"line(a,c)\" target=\"symmetry\" animation=\"draw\")\n      path.red.reveal(when=\"blank-1\" x=\"segment(a,c)\" target=\"symmetry sss d1\" animation=\"draw\")\n      path.red.transparent(x=\"segment(a,m)\" target=\"sas\" animation=\"draw\")\n      path.red.reveal(when=\"next-2\" x=\"segment(b,d)\" animation=\"draw\")\n\n::: column.grow\nYou might have noticed that all kites are [[symmetric|similar]].\n_{span.reveal(when=\"blank-0\")} The [axis of symmetry](gloss:axis-of-symmetry) is\n[[one of the diagonals|one of the sides|a midsegment]]._\n\n{.reveal.r(when=\"blank-1\")} The diagonal splits the kite into [two congruent\ntriangles](target:triangle1). We know that they are congruent from the\n[SSS](gloss:triangle-sss) condition: both triangles have [three congruent\nsides](target:sss) (red, green and blue).\n[Continue](btn:next)\n\n{.reveal.r(when=\"next-0\")} Using [CPOCT](gloss:cpoct), we therefore know that the\n[corresponding angles](target:angles) must also be congruent.\n[Continue](btn:next)\n\n{.reveal.r(when=\"next-1\")} This means, for example, that the [{.red} diagonal](target:d1)\nis a [[bisector|perpendicular|median]] of the [two angles](target:vAngle) at its\nends.\n[Continue](btn:next)\n\n{.reveal.r(when=\"next-2\")} We can go even further: if we draw the other diagonal,\nwe get [two more, smaller triangles](target:triangle2). These must also be\ncongruent, because of the [SAS](gloss:triangle-sss) condition: they have the\nsame [two sides and included angle](target:sas).\n[Continue](btn:next)\n\n{.reveal(when=\"next-3\")} This means that [{.yellow} angle α](target:alpha) must\nalso be the same as [{.yellow} angle β](target:beta). Since they are adjacent,\n[supplementary angles](gloss:supplementary-angles) both α and β must be [[90]]°.\n\n{.reveal(when=\"blank-3\")} In other words, the diagonals of a kite are always\n[[perpendicular|parallel]].\n:::"
    },
    {
      "id": "quadrilaterals-area",
      "goals": "draw-1 draw-2",
      "content": "### Area of Quadrilaterals\n\nWhen calculating the area of triangles in the previous course, we used the\ntrick of converting it into a [[rectangle|square|pentagon]]. It turns out that\nwe can also do that for some quadrilaterals:\n\n::: tab\n#### Parallelogram _{span.check(when=\"draw-1 blank-1\")}_\n\n::: column(width=300)\n\n    x-geopad(width=300 height=240 grid=20 no-points): svg\n      circle.transparent(name=\"a1\" x=\"point(4,3)\")\n      circle.transparent(name=\"b1\" x=\"point(12,3)\")\n      circle.transparent(name=\"c1\" x=\"point(10,9)\")\n      circle.transparent(name=\"d1\" x=\"point(2,9)\")\n      path.fill.blue.light(x=\"polygon(a1,b1,c1,d1)\")\n      path.fill.red.transparent(x=\"polygon(point(2,3),a1,d1)\" target=\"triangle-1\")\n      path.fill.green.transparent(x=\"polygon(point(10,3),b1,c1)\" target=\"triangle-2\")\n      path.blue(x=\"polygon(a1,b1,c1,d1)\")\n\n::: column.grow\nOn the left, try to draw a rectangle that has the same area as the\nparallelogram.\n\n{.reveal(when=\"draw-1\")} Can you see that the [{.red} missing triangle](target:triangle-1)\non the left is [[exactly the same as|smaller than|bigger than]] the [{.green} overlapping\ntriangle](target:triangle-2) on the right?\n_{span.reveal(when=\"blank-1\")}Therefore the area of a parallelogram is_\n\n{.text-center.reveal(when=\"blank-1\")} Area = __{.i.m-green}base__ × __{.i.m-yellow}height__\n\n{.reveal(when=\"blank-1\" delay=1000)} _Be careful when measuring the height of a\nparallelogram: it is usually not the same as one of the two sides._\n:::\n\n::: tab\n#### Trapezium _{span.check(when=\"draw-2 blank-2 blank-3 blank-4 next-0\")}_\n\nRecall that trapeziums are quadrilaterals with one pair of [{.blue} parallel sides](target:bases).\nThese parallel sides are called the __bases__ of the trapezium.\n\n::: column(width=300)\n\n    x-geopad.sticky(width=300 height=240 grid=20 no-points): svg\n      circle.transparent(name=\"a2\" x=\"point(4,3)\")\n      circle.transparent(name=\"b2\" x=\"point(9,3)\")\n      circle.transparent(name=\"c2\" x=\"point(13,9)\")\n      circle.transparent(name=\"d2\" x=\"point(2,9)\")\n      path.fill.blue.light(x=\"polygon(a2,b2,c2,d2)\")\n      path.fill.red.transparent(x=\"polygon(a2,point(3,3),point(3,9),d2)\" target=\"triangles-3\")\n      path.fill.yellow.transparent(x=\"polygon(b2,point(11,3),point(11,9),c2)\" target=\"triangles-3\")\n      path.blue(x=\"polygon(a2,b2,c2,d2)\")\n      path.blue(x=\"segment(a2,b2)\" target=\"bases base-1\")\n      path.blue(x=\"segment(d2,c2)\" target=\"bases base-2\")\n      path.green.transparent(x=\"segment(point(2,3),d2)\" target=\"t-height\")\n      path.yellow.transparent(x=\"segment(point(3,6),point(11,6))\" target=\"t-width\")\n      circle.reveal(when=\"blank-3\" x=\"line(a2,d2).midpoint\" target=\"t-width\" animation=\"pop\")\n      circle.reveal(when=\"blank-3\" x=\"line(b2,c2).midpoint\" target=\"t-width\" animation=\"pop\")\n\n::: column.grow\nLike before, try to draw a rectangle that has the same area as this trapezium.\n_{span.reveal(when=\"draw-2\")} Can you see how the [missing and added\ntriangles](target:triangles-3) on the left and the right cancel out?_\n\n{.reveal(when=\"draw-2\" delay=2000)} The [{.green} height](target:t-height)\nof this rectangle is the [[distance between|average of|length of]] the [{.blue} parallel\nsides](target:bases) of the trapezium.\n\n{.reveal.r(when=\"blank-2\")} The [{.yellow} width](target:t-width)\nof the rectangle is the distance between the [[midpoints|endpoints]] of the two\nnon-parallel sides of the trapezium. _{span.reveal(when=\"blank-3\")} This is\ncalled the __midsegment__ of the trapezium._\n_{button.next-step.reveal(when=\"blank-3\")} Continue_\n\n{.reveal(when=\"next-0\")} Like with [triangles](gloss:triangle-midsegment), the\nmidsegment of a trapezium is [[parallel to|perpendicular to|the same length as]]\nits two bases. The length of the midsegment is the average of the lengths of the\nbases: `(a+c)/2`.\n\n{.reveal(when=\"blank-4\")} If we combine all of this, we get an equation for the area of a trapezium\nwith parallel sides [{.blue} _a_](target:base-2) and [{.blue} _c_](target:base-1), and height\n[{.green} _h_](target:t-height):\n\n{.text-center.reveal(when=\"blank-4\")} `A = h xx ((a+c) / 2)`\n:::\n\n::: tab\n#### Kite _{span.check(when=\"blank-5\")}_\n\n::: column(width=300)\n\n    x-geopad(width=300 height=220 grid=20 no-points): svg\n      circle.transparent(name=\"a3\" x=\"point(1,5)\")\n      circle.transparent(name=\"b3\" x=\"point(5,1)\")\n      circle.transparent(name=\"c3\" x=\"point(13,5)\")\n      circle.transparent(name=\"d3\" x=\"point(5,9)\")\n\n      path.fill.blue.light(x=\"polygon(a3,b3,c3,d3)\")\n      path.green(x=\"segment(a3,c3)\" label=\"d1\" target=\"diag3 d31\")\n      path.yellow(x=\"segment(b3,d3)\" label=\"d2\" target=\"diag3 d32\")\n      path(x=\"polygon(point(1,1),point(13,1),point(13,9),point(1,9))\" target=\"rect4\")\n      path.blue(x=\"polygon(a3,b3,c3,d3)\")\n\n      path.fill.red.transparent(x=\"polygon(a3,b3,point(5,5))\" target=\"inside\")\n      path.fill.blue.transparent(x=\"polygon(b3,c3,point(5,5))\" target=\"inside\")\n      path.fill.green.transparent(x=\"polygon(c3,d3,point(5,5))\" target=\"inside\")\n      path.fill.yellow.transparent(x=\"polygon(d3,a3,point(5,5))\" target=\"inside\")\n\n      path.fill.red.transparent(x=\"polygon(a3,b3,point(1,1))\" target=\"outside\")\n      path.fill.blue.transparent(x=\"polygon(b3,c3,point(13,1))\" target=\"outside\")\n      path.fill.green.transparent(x=\"polygon(c3,d3,point(13,9))\" target=\"outside\")\n      path.fill.yellow.transparent(x=\"polygon(d3,a3,point(1,9))\" target=\"outside\")\n\n::: column.grow\nIn this kite, the [two diagonals](target:diag3) form the width and the height of\na large [rectangle](target:rect4) that surrounds the kite.\n\nThe area of this rectangle is [[twice|the same as|three times]] the area of the\nkite. _{span.reveal(when=\"blank-5\")} Can you see how each of the [four\ntriangles](target:inside) that make up the kite are the same as the\n[four gaps](target:outside) outside it?_\n\n{.reveal(when=\"blank-5\")} This means that the area of a kite with diagonals\n[{.green}`d_1`](target:d31) and [{.yellow}`d_2`](target:d32) is\n\n{.text-center.reveal(when=\"blank-5\")} `\"Area\" = 1/2 pill(d_1,\"green\",\"d31\") × pill(d_2,\"yellow\",\"d32\")`.\n:::\n\n::: tab\n#### Rhombus _{span.check(when=\"blank-6 blank-7\")}_\n\n::: column(width=300)\n\n    x-geopad(width=300 height=240): svg\n      circle.move(name=\"a4\" cx=40 cy=120)\n      circle.move(name=\"b4\" cx=150 cy=50)\n      circle.move(name=\"d4\" cx=150 cy=190 project=\"circle(a4,distance(a4,b4))\")\n      circle(name=\"c4\" x=\"d4.add(b4).subtract(a4)\")\n\n      path.fill.blue.light(x=\"polygon(a4,b4,c4,d4)\")\n\n      path.thin(x=\"line(c4,d4)\")\n      circle(name=\"q4\" x=\"line(c4,d4).project(a4)\")\n      path.thin(x=\"angle(a4,q4,d4).sup\" size=15)\n      path.red(x=\"segment(q4,a4)\" label=\"height\" target=\"height\")\n\n      path.green(x=\"segment(a4,c4)\" label=\"d1\" target=\"d41\")\n      path.yellow(x=\"segment(b4,d4)\" label=\"d2\" target=\"d42\")\n      path.blue(x=\"polygon(a4,b4,c4,d4)\")\n      path.blue(x=\"segment(c4,d4)\" target=\"base\")\n\n::: column.grow\nA [Rhombus](gloss:rhombus) is a quadrilateral that has four congruent sides. You\nmight remember that every rhombus is a [[parallelogram|rectangle|square]] – and\nalso a [[kite|hexagon|concave polygon]].\n\n{.reveal(when=\"blank-6 blank-7\")} This means that to find the area of a rhombus,\nwe can use either the equation for the area of a parallelogram, or that for the\narea of a kite:\n\n{.text-center.reveal(when=\"blank-6 blank-7\")} _Area_ =\n[{.i.blue}base](target:base) × [{.i.red}height](target:height) = `1/2`\n[{.i.green}d1](target:d41) × [{.i.yellow}d2](target:d42).\n\n{.reveal(when=\"blank-6 blank-7\" delay=1000)} _In different contexts, you might\nbe given different parts of a Rhombus (sides, height, diagonals), and you should\npick whichever equation is more convenient._\n:::\n\n:::\n\n    //- ### Cyclic quadrilaterals\n\n    //- ### Isosceles Trapeziums\n    //-\n    //- An isosceles trapezoid is a trapezoid where the non-parallel sides are\n    //- congruent. The third trapezoid above is an example of an isosceles\n    //- trapezoid. Think of it as an isosceles triangle with the top cut off.\n    //- Isosceles trapezoids also have parts that are labeled much like an\n    //- isosceles triangle. Both parallel sides are called bases.\n    //-\n    //- In an isosceles triangle, the two base angles are congruent. This\n    //- property holds true for isosceles trapezoids.\n    //-\n    //- The converse is also true: If a trapezoid has congruent base angles,\n    //- then it is an isosceles trapezoid.\n    //-\n    //- That the diagonals of a rectangle are congruent AND they isect each\n    //- other. The diagonals of an isosceles trapezoid are also congruent, but\n    //- they do NOT bisect each other."
    },
    {
      "section": "tessellations",
      "id": "tessellations",
      "content": "## Tessellations\n\n\n[Polygons](gloss:polygon) appear everywhere in nature. They are especially\nuseful if you want to tile a large area, because you can fit polygons together\nwithout any gaps or overlaps. Patterns like that are called\n[__tessellations__](gloss:tessellation).\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/tessellations/honeycomb.jpg\", width=200 height=200)\n\n{.caption} [[Hexagonal|Triangular|Quadratic]] honeycomb\n::: column(width=200)\n\n    x-img(lightbox src=\"images/tessellations/snake.jpg\", width=200 height=200)\n\n{.caption} Sinaloan Milk Snake skin\n::: column(width=200)\n\n    x-img(lightbox src=\"images/tessellations/leaf.jpg\", width=200 height=200)\n\n{.caption} Cellular structure of leafs\n::: column(width=200)\n\n    x-img(lightbox, credit=\"Chmee2, via Wikipedia\", src=\"images/tessellations/causeway.jpg\", width=200 height=200)\n\n{.caption} Basalt columns at Giant’s Causeway in Northern Ireland\n::: column(width=200)\n\n    x-img(lightbox src=\"images/tessellations/pineapple.jpg\", width=200 height=200)\n\n{.caption} Pineapple skin\n::: column(width=200)\n\n    x-img(lightbox src=\"images/tessellations/tortoise.jpg\", width=200 height=200)\n\n{.caption} Shell of a tortoise\n:::"
    },
    {
      "id": "tessellations-1",
      "content": "Humans have copied many of these natural patterns in art, architecture and\ntechnology – from ancient Rome to the present. Here are a few examples:\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/tessellations/pavement.jpg\", width=\"200\", height=\"200\")\n\n{.caption} [[Rectangular|Quadratic|Hexagonal]] pavement pattern\n::: column(width=200)\n\n    x-img(lightbox, src=\"images/tessellations/greenhouse.jpg\", width=\"200\", height=\"200\")\n\n{.caption} Greenhouse at the Eden Project in England\n::: column(width=200)\n\n    x-img(lightbox, credit=\"Andrew Dunn, via Wikipedia\", src=\"images/tessellations/alhambra.jpg\", width=\"200\", height=\"200\")\n\n{.caption} Mosaic at Alhambra\n::: column(width=200)\n\n    x-img(lightbox, credit=\"Chmee2 via Wikipedia\", src=\"images/tessellations/museum.jpg\", width=\"200\", height=\"200\")\n\n{.caption} [[Triangular|Hexagonal|Rectangular]] roof at the British Museum in London\n::: column(width=200)\n\n    x-img(lightbox, credit=\"© Patrick Boland, via archinect.com\", src=\"images/tessellations/cellular.jpg\", width=\"200\", height=\"200\")\n\n{.caption} Cellular tessellation pavilion in Sydney\n::: column(width=200)\n\n    x-img(credit=\"© M. C. Escher\", src=\"images/tessellations/escher.jpg\", width=\"200\", height=\"200\")\n\n{.caption} _Study of Regular Division of the Plane with Reptiles_, M. C. Escher\n:::\n\n    // TODO Carbon Nanotube\n    // application: https://en.wikipedia.org/wiki/Carbon_nanotube\n    // https://en.wikipedia.org/wiki/File:Types_of_Carbon_Nanotubes.png\n    // https://commons.wikimedia.org/wiki/File:FlyingThroughNanotube.png"
    },
    {
      "id": "tessellation-drawing",
      "goals": "shapes0 shapes1",
      "content": "Here you can create your own tessellations using regular polygons. Simply drag\nnew shapes from the sidebar onto the canvas. Which shapes tessellate well? Are\nthere any shapes that don’t tessellate at all? Try to create interesting\npatterns!\n\n    figure: .tessellation.polypad\n      x-polypad\n      .menu\n        for s in ['equ-triangle', 'square', 'reg-pentagon', 'reg-hexagon', 'reg-octagon']\n          .add(tile=\"polygon\" props=({shape: s}))\n      .btn-row: button.icon-btn(title=\"Download image\"): x-icon(name=\"download\")\n      svg.overlay: g.tiles.active\n    x-gesture(target=\".tessellation .menu\" slide=\"-300, 140\")\n    .other-students.reveal(when=\"shapes0\")\n      h4 Examples of other students’ tessellations\n      .row.padded-thin\n        div(style=\"width: 224px\"): img(src=\"images/user/tess-1.png\" width=240 height=160)\n        div(style=\"width: 224px\"): img(src=\"images/user/tess-2.png\" width=240 height=160)\n        div(style=\"width: 224px\"): img(src=\"images/user/tess-3.png\" width=240 height=160)"
    },
    {
      "id": "tessellation-regular",
      "content": "### Tessellations from regular polygons\n\nYou might have noticed that some [regular polygons](gloss:regular-polygon) (like\n[[squares|pentagons]]) tessellate very easily, while others (like\n[[pentagons|triangles|hexagons]]) don’t seem to tessellate at all."
    },
    {
      "id": "tessellation-regular-1",
      "content": "This has to do with the size of their [internal angles](gloss:internal-angle),\nwhich we learned to calculate before. At every [vertex](gloss:polygon-vertex) in\nthe tessellation, the internal angles of multiple different polygons meet. We\nneed all of these angles to add up to [[360]]°, otherwise there will either be\na gap or an overlap."
    },
    {
      "id": "tessellation-regular-2",
      "content": "::: column(width=160 parent=\"padded-thin\")\n    include svg/tessellations/triangles.svg\n\n{.caption} Triangles [[tessellate|don’t tessellate]] _{span.reveal(when=\"blank-0\")} because 6 × 60° = 360°._\n::: column(width=160)\n    include svg/tessellations/squares.svg\n\n{.caption} Squares [[tessellate|don’t tessellate]] _{span.reveal(when=\"blank-1\")} because 4 × 90° = 360°._\n::: column(width=160)\n    include svg/tessellations/pentagons.svg\n\n{.caption} Pentagons [[don’t tessellate|tessellate]] _{span.reveal(when=\"blank-2\")} because multiples of 108°\ndon’t add up to 360°._\n\n    //- {.caption}3 × 108° = 324° is too small, but 4 × 108° = 432° is too big.\n::: column(width=160)\n    include svg/tessellations/hexagons.svg\n\n{.caption} Hexagons [[tessellate|don’t tessellate]] _{span.reveal(when=\"blank-3\")} because 3 × 120° = 360°._\n:::"
    },
    {
      "id": "tessellation-regular-3",
      "content": "You can similarly check that, just like pentagons, any regular polygon with 7 or\nmore sides doesn’t tessellate. This means that the only regular polygons that\ntessellate are triangles, squares and hexagons!\n\nOf course you could combine different kinds of regular polygons in a\ntessellation, provided that their internal angles can add up to 360°:\n\n    x-gallery(slide-width=\"520\")\n      div\n        img(src=\"images/tessellations/regular-1.svg\" width=360 height=240)\n        p.caption Squares and triangles#[br]#[strong.m-blue 90°] + #[strong.m-blue 90°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] = 360°\n      div\n        img(src=\"images/tessellations/regular-3.svg\" width=360 height=240)\n        p.caption Squares and triangles#[br]#[strong.m-blue 90°] + #[strong.m-blue 90°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] = 360°\n      div\n        img(src=\"images/tessellations/regular-4.svg\" width=360 height=240)\n        p.caption Hexagons and triangles#[br]#[strong.m-red 120°] + #[strong.m-red 120°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] = 360°\n      div\n        img(src=\"images/tessellations/regular-5.svg\" width=360 height=240)\n        p.caption Hexagons and triangles#[br]#[strong.m-red 120°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] + #[strong.m-yellow 60°] = 360°\n      div\n        img(src=\"images/tessellations/regular-2.svg\" width=360 height=240)\n        p.caption Hexagons, squares and triangles#[br]#[strong.m-red 120°] + #[strong.m-blue 90°] + #[strong.m-blue 90°] + #[strong.m-yellow 60°] = 360°\n      div\n        img(src=\"images/tessellations/regular-6.svg\" width=360 height=240)\n        p.caption Octagons and squares#[br]#[strong.m-green 135°] + #[strong.m-green 135°] + #[strong.m-blue 90°] = 360°\n      div\n        img(src=\"images/tessellations/regular-7.svg\" width=360 height=240)\n        p.caption Dodecagons (12-gons) and triangles#[br]#[strong.m-green 150°] + #[strong.m-green 150°] + #[strong.m-yellow 60°] = 360°\n      div\n        img(src=\"images/tessellations/regular-8.svg\" width=360 height=240)\n        p.caption Dodecagons, hexagons and squares#[br]#[strong.m-green 150°] + #[strong.m-red 120°] + #[strong.m-blue 90°] = 360°"
    },
    {
      "id": "tessellation-triangles",
      "content": "### Tessellations from irregular polygons\n\nWe can also try making tessellations out of [irregular polygons](gloss:irregular-polygon)\n– as long as we are careful when rotating and arranging them.\n\n::: column(width=360)\n\n    x-geopad(width=360 height300): svg\n      circle.move(name=\"a\" cx=220 cy=90 target=\"vertex\")\n      circle.move(name=\"b\" cx=145 cy=180 target=\"vertex\")\n      circle.move.pulsate(name=\"c\" cx=225 cy=200 target=\"vertex\")\n\n      path.red.fill(name=\"x\" x=\"polygon(a,b,c)\")\n      path.yellow.fill(name=\"y\" x=\"x.rotate(pi,line(b,c).midpoint)\")\n\n      for x in [-5,-4,-3,-2,-1,0,1,2,3,4,5]\n        for y in [-5,-4,-3,-2,-1,0,1,2,3,4,5]\n          if x || y\n            path.red.fill(x=`x.translate(c.subtract(a).scale(${x}).add(b.subtract(a).scale(${y})))`)\n            path.yellow.fill(x=`y.translate(c.subtract(a).scale(${x}).add(b.subtract(a).scale(${y})))`)\n\n::: column.grow\nIt turns out that you can tessellate not just equilateral triangles, but _any\ntriangle_! Try moving the [vertices](target:vertex) in this diagram.\n\nThe sum of the internal angles in a triangle is [[180]]°. If we use each angle\n[[twice|once|three times]] at every vertex in the tessellation, we get 360°:\n\n    x-geopad.reveal(width=200 height=160 when=\"blank-0 blank-1\"): svg\n      circle(name=\"m\" cx=100 cy=80)\n      circle(name=\"p\" cx=100 cy=150)\n      circle.move(name=\"q\" cx=175 cy=130)\n      circle(name=\"r\" x=\"p.rotate(pi,line(m,q).midpoint)\")\n      circle(name=\"s\" x=\"p.rotate(pi,m)\")\n      circle(name=\"t\" x=\"q.rotate(pi,m)\")\n      circle(name=\"u\" x=\"q.rotate(pi,line(m,p).midpoint)\")\n\n      path.fill.red(x=\"angle(p,m,q).sup\" size=20)\n      path.fill.blue(x=\"angle(q,m,r).sup\" size=20)\n      path.fill.green(x=\"angle(r,m,s).sup\" size=20)\n      path.fill.red(x=\"angle(s,m,t).sup\" size=20)\n      path.fill.blue(x=\"angle(t,m,u).sup\" size=20)\n      path.fill.green(x=\"angle(u,m,p).sup\" size=20)\n\n      path.fill.red.light(x=\"angle(m,q,r).sup\" size=20)\n      path.fill.red.light(x=\"angle(r,s,m).sup\" size=20)\n      path.fill.red.light(x=\"angle(m,t,u).sup\" size=20)\n      path.fill.red.light(x=\"angle(u,p,m).sup\" size=20)\n      path.fill.blue.light(x=\"angle(p,q,m).sup\" size=20)\n      path.fill.blue.light(x=\"angle(m,r,s).sup\" size=20)\n      path.fill.blue.light(x=\"angle(s,t,m).sup\" size=20)\n      path.fill.blue.light(x=\"angle(m,u,p).sup\" size=20)\n      path.fill.green.light(x=\"angle(m,p,q).sup\" size=20)\n      path.fill.green.light(x=\"angle(q,r,m).sup\" size=20)\n      path.fill.green.light(x=\"angle(m,s,t).sup\" size=20)\n      path.fill.green.light(x=\"angle(t,u,m).sup\" size=20)\n\n      path(x=\"segment(m,p)\")\n      path(x=\"segment(m,q)\")\n      path(x=\"segment(m,r)\")\n      path(x=\"segment(m,s)\")\n      path(x=\"segment(m,t)\")\n      path(x=\"segment(m,u)\")\n      path(x=\"polygon(p,q,r,s,t,u)\")\n:::"
    },
    {
      "id": "tessellation-quadrilaterals",
      "content": "::: column(width=360)\n\n    x-geopad(width=360 height=300): svg\n      circle.move(name=\"a\" cx=100 cy=105)\n      circle.move(name=\"b\" cx=115 cy=200)\n      circle.move.pulsate(name=\"c\" cx=180 cy=170)\n      circle.move(name=\"d\" cx=200 cy=120)\n\n      path.blue.fill(name=\"x\" x=\"polygon(a,b,c,d)\")\n      path.green.fill(name=\"y\" x=\"x.rotate(pi,line(c,d).midpoint)\")\n\n      for x in [-5,-4,-3,-2,-1,0,1,2,3,4,5]\n        for y in [-5,-4,-3,-2,-1,0,1,2,3,4,5]\n          if x || y\n            path.blue.fill(x=`x.translate(c.subtract(a).scale(${x}).add(d.subtract(b).scale(${y})))`)\n            path.green.fill(x=`y.translate(c.subtract(a).scale(${x}).add(d.subtract(b).scale(${y})))`)\n\n\n::: column.grow\nMore surprisingly, _any quadrilateral_ also tessellates! Their internal angle\nsum is [[360]]°, so if we use each angle [[once|twice|three times]] at every\nvertex in the tessellation, we we get 360°.\n\n    x-geopad.reveal(width=200 height=160 when=\"blank-0 blank-1\"): svg\n      circle(name=\"m\" x=\"point(100,80)\")\n      circle(name=\"p\" x=\"point(100,150)\")\n      circle.move(name=\"q\" cx=180 cy=140)\n      circle.move(name=\"r\" cx=165 cy=90)\n      circle(name=\"s\" x=\"p.rotate(pi,line(m,r).midpoint)\")\n      circle(name=\"t\" x=\"q.rotate(pi,line(m,r).midpoint)\")\n      circle(name=\"u\" x=\"r.rotate(pi,line(m,t).midpoint)\")\n      circle(name=\"v\" x=\"q.rotate(pi,line(m,p).midpoint)\")\n      circle(name=\"w\" x=\"r.rotate(pi,line(m,p).midpoint)\")\n\n      path.fill.red(x=\"angle(p,m,r).sup\" size=20)\n      path.fill.blue(x=\"angle(r,m,t).sup\" size=20)\n      path.fill.green(x=\"angle(t,m,v).sup\" size=20)\n      path.fill.yellow(x=\"angle(v,m,p).sup\" size=20)\n\n      path.fill.red.light(x=\"angle(m,r,s).sup\" size=20)\n      path.fill.red.light(x=\"angle(t,u,v).sup\" size=20)\n      path.fill.red.light(x=\"angle(w,p,m).sup\" size=20)\n      path.fill.blue.light(x=\"angle(q,r,m).sup\" size=20)\n      path.fill.blue.light(x=\"angle(m,t,u).sup\" size=20)\n      path.fill.blue.light(x=\"angle(v,w,p).sup\" size=20)\n      path.fill.green.light(x=\"angle(p,q,r).sup\" size=20)\n      path.fill.green.light(x=\"angle(s,t,m).sup\" size=20)\n      path.fill.green.light(x=\"angle(m,v,w).sup\" size=20)\n      path.fill.yellow.light(x=\"angle(m,p,q).sup\" size=20)\n      path.fill.yellow.light(x=\"angle(r,s,t).sup\" size=20)\n      path.fill.yellow.light(x=\"angle(u,v,m).sup\" size=20)\n\n      path(x=\"segment(m,p)\")\n      path(x=\"segment(m,r)\")\n      path(x=\"segment(m,t)\")\n      path(x=\"segment(m,v)\")\n      path(x=\"polygon(p,q,r,s,t,u,v,w)\")\n:::"
    },
    {
      "id": "tessellation-pentagons",
      "content": "Pentagons are a bit trickier. We already saw that _regular_ pentagons [[don’t\ntessellate|tessellate]], but what about non-regular ones?"
    },
    {
      "id": "tessellation-pentagons-1",
      "content": "Here are three different examples of tessellations with pentagons. They are not\n_regular_, but they are perfectly valid 5-sided polygons:\n\n::: column(width=220)\n    include svg/tessellations/pentagons-1.svg\n::: column(width=220)\n    include svg/tessellations/pentagons-2.svg\n::: column(width=220)\n    include svg/tessellations/pentagons-3.svg\n:::\n\nOver time, mathematicians have only found 15 different kinds of tessellations with (convex)\npentagons – the most recent of which was discovered in 2015."
    },
    {
      "id": "pentagons",
      "goals": "shapes",
      "content": "Two years later, in 2017, _Michaël Rao_ published a proof that there are no other possibilities,\nexcept the 15 that had already been found. Can you make a tessellation using all of them?\n\n    figure\n      .tessellation.polypad\n        x-polypad\n        .menu\n          for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n            .add(tile=\"polygon\" props=({shape: `pentagon-${i}`}))\n        .btn-row\n          button.icon-btn(title=\"Flip selection\"): x-icon(name=\"flip\")\n          button.icon-btn(title=\"Download image\"): x-icon(name=\"download\")\n        svg.overlay: g.tiles.active\n      .caption Shapes provided by the Math Happens Foundation"
    },
    {
      "id": "escher",
      "content": "### Tessellations in Art\n\nMany artists, architects and designers use tessellations in their work. One of the most famous\nexamples is the Dutch artist [M. C. Escher](bio:escher). His works contain strange, mutating\ncreatures, patterns and landscapes:\n\n    .row\n      div(style=\"width: 220px\")\n        x-img(credit=\"© M. C. Escher Foundation\" src=\"images/escher/escher-1.jpg\" width=220 height=220)\n        p.caption “Sky and Water I” (1938)\n      div(style=\"width: 220px\")\n        x-img(credit=\"© M. C. Escher Foundation\" src=\"images/escher/escher-2.jpg\" width=220 height=220)\n        p.caption “Lizard” (1942)\n      div(style=\"width: 220px\")\n        x-img(credit=\"© M. C. Escher Foundation\" src=\"images/escher/escher-3.jpg\" width=220 height=220)\n        p.caption “Lizard, Fish, Bat” (1952)\n      div(style=\"width: 220px\")\n        x-img(credit=\"© M. C. Escher Foundation\" src=\"images/escher/escher-4.jpg\" width=220 height=220)\n        p.caption “Butterfly” (1948)\n      div(style=\"width: 220px\")\n        x-img(credit=\"© M. C. Escher Foundation\" src=\"images/escher/escher-5.jpg\" width=220 height=220)\n        p.caption “Two Fish” (1942)\n      div(style=\"width: 220px\")\n        x-img(credit=\"© M. C. Escher Foundation\" src=\"images/escher/escher-6.jpg\" width=220 height=220)\n        p.caption “Shells and Starfish” (1941)\n\nThese artworks often look fun and effortless, but the underlying mathematical\nprinciples are the same as before: angles, rotations, translations and polygons.\nIf the maths isn’t right, the tessellation is not going to work!\n\n    .metamorph: img(src=\"images/escher/metamorphosis.jpg\" width=3000 height=150)\n    p.caption “Metamorphosis II” by M. C. Escher (1940)"
    },
    {
      "id": "penrose",
      "content": "### Penrose Tilings\n\nAll the tessellations we saw so far have one thing in common: they are\n__periodic__. That means they consist of a regular pattern that is repeated\nagain and again. They can continue forever in all directions and they will look\nthe same everywhere.\n\nIn the 1970s, the British mathematician and physicist [Roger Penrose](bio:penrose)\ndiscovered _non-periodic_ tessellations – they still continue infinitely in all\ndirections, but _never_ look exactly the same. These are called __Penrose\ntilings__, and you only need a few different kinds of polygons to\ncreate one:\n\n::: figure\n\n    include svg/penrose.svg\n    x-slider(steps=100, style=\"max-width: 400px; margin: 24px auto\")\n\n{.caption} Move the slider to reveal the underlying structure of this tessellation. Notice how the\nsame patterns appear at various scales: the yellow pentagons, blue stars, purple rhombi and green\n‘ships’ appear in their original size, in a __{.blue} slightly larger size__ and an __{.red} even\nlarger size__. This _self-similarity_ can be used to prove that a Penrose tiling is always\nnon-periodic.\n\n:::"
    },
    {
      "id": "penrose-1",
      "content": "Penrose was exploring tessellations purely for fun, but it turns out that the\ninternal structure of some real materials (like aluminium) follow a similar\npattern. The pattern was even used on toilet paper, because the manufacturers\nnoticed that a non-periodic pattern can be rolled up without any bulges."
    },
    {
      "section": "polyhedra",
      "id": "polyhedra",
      "content": "## Polyhedra\n\n\nUp to now we have just looked at what we can do with polygons in a flat,\ntwo-dimensional world. A [__polyhedron__](gloss:polyhedron) is a three-dimensional\nobject that is made up of polygons. Here are some examples:\n\n::: column.padded-thin(width=220)\n    x-polyhedron#poly1(size=220 shape=\"PentagonalPrism\")\n::: column(width=220)\n    x-polyhedron(size=220 shape=\"Hebesphenorotunda\")\n::: column(width=220)\n    x-polyhedron(size=220 shape=\"StellatedDodecahedron\")\n:::\n\nPolyhedra cannot contain curved surfaces – spheres and cylinders, for example,\nare not polyhedra.\n\nThe polygons that make up a polyhedron are called its [__faces__](gloss:polyhedron-face).\nThe lines where two faces are connected are called [__edges__](gloss:polyhedron-edge),\nand the corners where the edges meet are called [__vertices__](gloss:polyhedron-vertex)."
    },
    {
      "id": "euler",
      "content": "Polyhedra come in many different shapes and sizes – from simple cubes or\npyramids with just a few faces, to complex objects like the star above, which\nhas 60 triangular faces. It turns out, however, that _all_ polyhedra have one\nimportant property in common:\n\n::: .theorem\n__Euler’s Polyhedron Formula__<br>\nIn every polyhedron, the number of faces (_F_) plus the number of vertices (_V_)\nis two more than the number of edges (_E_). In other words,\n\n{.text-center} `F + V = E + 2`\n:::\n\nFor example, if a polyhedron has 12 faces and 18 vertices, we know that it must\nhave [[28]] edges."
    },
    {
      "id": "euler-1",
      "content": "This equation was discovered by the famous Swiss mathematician [Leonard\nEuler](bio:euler). It is true for any polyhedron, as long as it doesn’t contain\nany holes.\n\nIf you try different polyhedra, like the ones above, you’ll find that Euler’s\nformula always works. In [a later course](/course/graph-theory/planar-graphs)\nyou’ll learn how to actually prove it mathematically."
    },
    {
      "section": "nets-cross-sections",
      "sectionStatus": "dev",
      "content": "## Nets and Cross Sections\n\n\nHere is a demo for intersections of a polyhedron and a plane:\n\n    figure.var\n      x-select.tabs(:bind=\"poly\")\n        div(value=\"tetrahedron\") Tetrahedron\n        div(value=\"cube\") Cube\n        div(value=\"octahedron\") Octahedron\n        div(value=\"dodecahedron\") Dodecahedron\n        div(value=\"icosahedron\") Icosahedron\n      x-polyhedron-slice(:shape=\"poly\" :opacity=\"opacity\")"
    },
    {
      "content": "Our entire world is three-dimensional – but it is often much easier to draw or\nvisualise flat, two-dimensional objects. And there are a few different ways to\nview three-dimensional polyhedra in a two-dimensional way.\n\n    //- x-folding(shape=\"Tetrahedron\" size=400)\n    //- x-folding(shape=\"Cube\" size=400)\n    //- x-folding(shape=\"Octahedron\" size=400)\n    //- x-folding(shape=\"Dodecahedron\" size=400)\n    //- x-folding(shape=\"Icosahedron\" size=400)\n\nWhich of these nets makes a cube\nMatch the net to the object\nhttps://github.com/polymake/matchthenet\nDrawing Nets\n\nDescribe the cross section formed by the intersection of the plane and the solid.\n\nA cross-section is the intersection of a plane with a solid.\nAnother way to represent a three-dimensional figure in a two dimensional plane\nis to use a net. A net is an unfolded, flat representation of the sides of a\nthree-dimensional shape.\n\nrotate a cube to make a hexagonal cross-section\n\n    // ---\n\n    // ## Scaling Shapes and Solids\n\n    // > section: scaling\n    // > sectionStatus: dev\n\n    // TODO"
    },
    {
      "section": "platonic",
      "id": "platonic",
      "content": "## Platonic Solids\n\n\nAt the beginning of this course we defined [regular polygons](gloss:regular-polygon)\nas particularly “symmetric” polygons, where all sides and angles are the same.\nWe can do something similar for polyhedra.\n\nIn a _regular polyhedron_ all [faces](gloss:polyhedron-face) are all the same\nkind of regular polygon, and the same number of faces meet at every\n[vertex](gloss:polyhedron-vertex). Polyhedra with these two properties are\ncalled [__Platonic solids__](gloss:platonic-solid), named after the Greek\nphilosopher [Plato](bio:plato).\n\n    //- The pyramid on the right of not a Platonic solid. It consists of two\n    //- different kinds of polygons (squares and triangles), and it has [[4]]\n    //- faces meeting at the top vertex, but only [[3]] at the bottom vertices.\n\nSo what do the Platonic solids look like – and how many of them are there? To\nmake a three-dimensional shape, we need at least [[3]] faces to meet at every\nvertex. Let’s start systematically with the smallest regular polygon:\nequilateral triangles:"
    },
    {
      "id": "platonic-tetrahedron",
      "content": "::: column(width=120 parent=\"padded-thin\")\n\n    x-polyhedron(size=120 shape=\"Tetrahedron\")\n\n::: column(width=200)\n\n    img(src=\"images/platonic/tetrahedron.svg\" width=200 height=120)\n\n::: column.grow\nIf we create a polyhedron where three [equilateral triangles](gloss:equilateral-triangle)\nmeet at every vertex, we get the shape on the left. It is called a\n__Tetrahedron__ and has [[4]] faces. _{.reveal(when=\"blank-0\")}(“Tetra” means\n“four” in Greek)._\n:::"
    },
    {
      "id": "platonic-octahedron",
      "content": "::: column(width=120 parent=\"padded-thin\")\n\n    x-polyhedron(size=120 shape=\"Octahedron\")\n\n::: column(width=200)\n\n    img(src=\"images/platonic/octahedron.svg\" width=200 height=120)\n\n::: column.grow\nIf four equilateral triangles meet at every vertex, we get a different Platonic\nsolid. It is called the __Octahedron__ and has [[8]] faces.\n_{.reveal(when=\"blank-0\")}(“Octa” means “eight” in Greek. Just like “Octagon”\nmeans 8-sided shape, “Octahedron” means 8-faced solid.)_\n:::"
    },
    {
      "id": "platonic-icosahedron",
      "content": "::: column(width=120 parent=\"padded-thin\")\n\n    x-polyhedron(size=120 shape=\"Icosahedron\")\n\n::: column(width=200)\n\n    img(src=\"images/platonic/icosahedron.svg\" width=200 height=120)\n\n::: column.grow\nIf [[five]] triangles meet at every vertex, we get the __Icosahedron__. It has\n[[20]] faces. _{.reveal(when=\"blank-1\")}(“Icosa” means “twenty” in Greek.)_\n:::"
    },
    {
      "id": "platonic-6-triangles",
      "content": "::: column(width=120 parent=\"padded-thin\")\n::: column(width=200)\n\n    img.reveal(when=\"blank-1\" src=\"images/platonic/triangles-6.svg\" width=200 height=120)\n\n::: column.grow\nIf [[six]] triangles meet at every vertex, something different happens: we\nsimply get [[a tessellation|a quadrilateral|another Icosahedron]],\n_{span.reveal(when=\"blank-1\")}instead of a three-dimensional polyhedron._\n:::"
    },
    {
      "id": "platonic-7-triangles",
      "content": "::: column(width=120 parent=\"padded-thin\")\n::: column(width=200)\n\n    img(src=\"images/platonic/triangles-7.svg\" width=200 height=120)\n\n::: column.grow\nAnd seven or more triangles at every vertex also don’t produce new polyhedra:\nthere is not enough space around a vertex, to fit that many triangles.\n:::\n\nThis means we’ve found [[three]] Platonic solids consisting of triangles. Let’s\nmove on to the next regular polygon: squares."
    },
    {
      "id": "platonic-cube",
      "content": "::: column(width=120 parent=\"padded-thin\")\n\n    x-polyhedron(size=120 shape=\"Cube\")\n\n::: column(width=200)\n\n    img(src=\"images/platonic/cube.svg\" width=200 height=120)\n\n::: column.grow\nIf [[three]] squares meet at every vertex, we get the __cube__. Just like dice,\nit has [[6]] faces. _{span.reveal(when=\"blank-1\")}The cube is sometimes also\ncalled *Hexahedron*, after the Greek word “hexa\" for “six”._\n:::"
    },
    {
      "id": "platonic-4-squares",
      "content": "::: column(width=120 parent=\"padded-thin\")\n::: column(width=200)\n\n    img.reveal(when=\"blank-1\" src=\"images/platonic/squares.svg\" width=200 height=120)\n\n::: column.grow\nIf [[four]] squares meet at every vertex, we get [[another tessellation|a tetrahedron|another cube]].\n_{span.reveal(when=\"blank-1\")}And like before, five or more squares also won’t work._\n:::"
    },
    {
      "id": "platonic-dodecahedron",
      "content": "Next, let’s try regular pentagons:\n\n::: column(width=120 parent=\"padded-thin\")\n\n    x-polyhedron(size=120 shape=\"Dodecahedron\")\n\n::: column(width=200)\n\n    img(src=\"images/platonic/dodecahedron.svg\" width=200 height=120)\n\n::: column.grow\nIf [[three]] pentagons meet at every vertex, we get the __Dodecahedron__. It has\n[[12]] faces. _{.reveal(when=\"blank-1\")} (“Dodeca” means “twelve” in Greek.)_\n:::"
    },
    {
      "id": "platonic-4-pentagons",
      "content": "::: column(width=120 parent=\"padded-thin\")\n::: column(width=200)\n\n    img(src=\"images/platonic/pentagons.svg\" width=200 height=120)\n\n::: column.grow\nLike before, four or more pentagons [[don’t work|are possible]] because there is\nnot enough space.\n:::"
    },
    {
      "id": "platonic-hexagons",
      "content": "The next regular polygon to try are hexagons:\n\n::: column(width=120 parent=\"padded-thin\")\n::: column(width=200)\n\n    img.reveal(when=\"blank-0\" src=\"images/platonic/hexagons.svg\" width=200 height=120)\n\n::: column.grow\nIf three hexagons meet at every vertex, we immediately get a [[tessellation|polyhedron|hexahedron]].\n_{span.reveal(when=\"blank-0\")} Since there is no space for more than three, it\nseems like there are no Platonic solids consisting of hexagons._\n:::"
    },
    {
      "id": "platonic-final",
      "content": "The same also happens for all regular polygons with more than six sides. They\ndon’t tessellate, and we certainly don’t get any three-dimensional polygons.\n\nThis means that there are just [[five]] Platonic solids! Let’s have a look at\nall of them together:"
    },
    {
      "id": "platonic-overview",
      "content": "::: column.grow.text-center(width=120 parent=\"plato padded-thin\")\n__Tetrahedron__\n\n    x-polyhedron.dual(size=120 shape=\"Tetrahedron\")\n\n_{span.dual}[[4]] Faces_<br>\n_{span.dual}[[4]] Vertices_<br>\n_{span.dual}[[6]] Edges_\n\n::: column.grow.text-center(width=120)\n__Cube__\n\n    x-polyhedron.dual(target=\"dual1\" size=120 shape=\"Cube\")\n\n_{span.dual(target=\"dual1\")}[[6]] Faces_<br>\n_{span.dual(target=\"dual1\")}[[8]] Vertices_<br>\n_{span.dual}[[12]] Edges_\n\n::: column.grow.text-center(width=120)\n__Octahedron__\n\n    x-polyhedron.dual(target=\"dual1\" size=120 shape=\"Octahedron\")\n\n_{span.dual(target=\"dual1\")}[[8]] Faces_<br>\n_{span.dual(target=\"dual1\")}[[6]] Vertices_<br>\n_{span.dual}[[12]] Edges_\n\n::: column.grow.text-center(width=120)\n__Dodecahedron__\n\n    x-polyhedron.dual(target=\"dual2\" size=120 shape=\"Dodecahedron\")\n\n_{span.dual(target=\"dual2\")}[[12]] Faces_<br>\n_{span.dual(target=\"dual2\")}20 Vertices_<br>\n_{span.dual}30 Edges_\n\n::: column.grow.text-center(width=120)\n__Icosahedron__\n\n    x-polyhedron.dual(target=\"dual2\" size=120 shape=\"Icosahedron\")\n\n_{span.dual(target=\"dual2\")}[[20]] Faces_<br>\n_{span.dual(target=\"dual2\")}12 Vertices_<br>\n_{span.dual}30 Edges_\n:::\n\n{.reveal(when=\"blank-3 blank-4 blank-6 blank-7 blank-9 blank-10\")} Notice how\nthe number of faces and vertices are [[swapped around|the same]] for [cube and\noctahedron](target:dual1), as well as [dodecahedron and icosahedron](target:dual2),\nwhile the number of edges [[stays the same|are different]]. These pairs of\nPlatonic solids are called [__dual solids__](gloss:polyhedron-dual)."
    },
    {
      "id": "platonic-dual",
      "content": "We can turn a polyhedron into its dual, by “replacing” every face with a vertex,\nand every vertex with a face. These animations show how:\n\n::: column(width=300)\n\n    x-solid(size=300)\n    x-slider(steps=100)\n\n::: column(width=300)\n\n    x-solid(size=300)\n    x-slider(steps=100)\n\n:::\n\nThe tetrahedron is dual with itself. Since it has the same number of faces and\nvertices, swapping them wouldn’t change anything."
    },
    {
      "id": "platonic-elements",
      "content": "[Plato](bio:plato) believed that all matter in the Universe consists of four\nelements: Air, Earth, Water and Fire. He thought that every element correspond\nto one of the Platonic solids, while the fifth one would represent the universe\nas a whole. Today we know that there are more than 100 different elements which\nconsist of spherical atoms, not polyhedra.\n\n    figure\n      img(src=\"images/elements.jpg\" width=600 height=153)\n      p.caption Images from Johannes Kepler’s book “Harmonices Mundi” (1619)"
    },
    {
      "id": "archimedean",
      "content": "### Archimedean Solids\n\n\nPlatonic solids are particularly important polyhedra, but there are countless\nothers.\n\n[__Archimedean solids__](gloss:archimedean-solid), for example, still have to be\nmade up of [regular polygons](gloss:regular-polygon), but you can use multiple\ndifferent types. They are named after another Greek mathematician, [Archimedes\nof Syracuse](bio:archimedes), and there are 13 of them:\n\n::: column(width=170 parent=\"padded-thin\")\n    x-polyhedron(size=170 shape=\"TruncatedTetrahedron\")\n\n{.caption} __Truncated Tetrahedron__<br>\n8 faces, 12 vertices, 18 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"Cuboctahedron\")\n\n{.caption} __Cuboctahedron__<br>\n14 faces, 12 vertices, 24 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"TruncatedCube\")\n\n{.caption} __Truncated Cube__<br>\n14 faces, 24 vertices, 36 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"TruncatedOctahedron\")\n\n{.caption} __Truncated Octahedron__<br>\n14 faces, 24 vertices, 36 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"Rhombicuboctahedron\")\n\n{.caption} __Rhombicuboctahedron__<br>\n26 faces, 24 vertices, 48 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"TruncatedCuboctahedron\")\n\n{.caption} __Truncated Cuboctahedron__<br>\n26 faces, 48 vertices, 72 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"SnubCube\")\n\n{.caption} __Snub Cube__<br>\n38 faces, 24 vertices, 60 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"Icosidodecahedron\")\n\n{.caption} __Icosidodecahedron__<br>\n32 faces, 30 vertices, 60 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"TruncatedDodecahedron\")\n\n{.caption} __Truncated Dodecahedron__<br>\n32 faces, 60 vertices, 90 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"TruncatedIcosahedron\")\n\n{.caption} __Truncated Icosahedron__<br>\n32 faces, 60 vertices, 90 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"Rhombicosidodecahedron\")\n\n{.caption} __Rhombicosidodecahedron__<br>\n62 faces, 60 vertices, 120 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"TruncatedIcosidodecahedron\")\n\n{.caption} __Truncated Icosidodecahedron__<br>\n62 faces, 120 vertices, 180 edges\n::: column(width=170)\n    x-polyhedron(size=170 shape=\"SnubDodecahedron\")\n\n{.caption} __Snub Dodecahedron__<br>\n92 faces, 60 vertices, 150 edges\n:::\n\n    // Prisms and antiprisms, whose symmetry groups are the dihedral groups, are\n    // generally not considered to be Archimedean solids, despite meeting the\n    // above definition."
    },
    {
      "id": "polyhedra-applications",
      "content": "### Applications\n\nPlato was wrong in believing that all elements consists of Platonic solids. But\nregular polyhedra have many special properties that make them appear elsewhere\nin nature – and we can copy these properties in science and engineering.\n\n::: column(width=180)\n\n    x-img(lightbox width=180 height=180 src=\"images/radiolaria.jpg\")\n    p.caption Radiolaria skeleton\n\n::: column(width=180)\n\n    x-img(lightbox width=180 height=180 src=\"images/virus.jpg\")\n    p.caption Icosahedral virus\n\n::: column.grow\nMany __viruses__, __bacteria__ and other small __organisms__ are shaped like\n[icosahedra](gloss:icosahedron). Viruses, for example, must enclose their\ngenetic material inside a shell of many identical protein units. The icosahedron\nis the most efficient way to do this, because it consists of a few regular\nelements but is almost shaped like a sphere.\n:::\n\n::: column(width=180)\n\n    x-img(lightbox, credit=\"NASA/JPL\", width=180, height=180, src=\"images/buckyball.jpg\")\n    p.caption Buckyball molecule\n\n::: column(width=180)\n\n    x-img(lightbox, credit=\"Philipp Hienstorfer, via Wikipedia\", width=180, height=180, src=\"images/biosphere.jpg\")\n    p.caption Montreal Biosphere\n\n::: column.grow\nMany __molecules__ are shaped like regular polyhedra. The most famous example is\n`C_60` which consists of 60 carbon atoms arranged in the shape of a [Truncated\nIcosahedron](gloss:truncated-icosahedron).\n\nIt was discovered in 1985 when scientists researched interstellar dust. They\nnamed it “Buckyball” (or Buckminsterfullerene) after the architect [Buckminster\nFuller](bio:fuller), famous for constructing similar-looking buildings.\n:::\n\n::: column(width=180)\n\n    x-img(lightbox credit=\"Chris Gladis via Wikipedia\" width=180 height=180 src=\"images/crystal.jpg\")\n    p.caption Fluorite octahedron\n\n::: column(width=180)\n\n    x-img(lightbox credit=\"Archaeodontosaurus, via Wikipedia\" width=180 height=180 src=\"images/rock.jpg\")\n    p.caption Pyrite cube\n\n::: column.grow\nMost __crystals__ have their atoms arranged in a regular grid consisting of\n[tetrahedra](gloss:tetrahedron), [cubes](gloss:cube) or [octahedra](gloss:octahedron).\nWhen they crack or shatter, you can see these shapes on a larger scale.\n:::\n\n::: column(width=180)\n\n    x-img(lightbox, credit=\"Andrew Dunn, via Wikipedia\", width=\"180\", height=\"180\", src=\"images/space-frame.jpg\")\n    p.caption Octagonal space frames\n\n::: column(width=180)\n\n    x-img(lightbox width=\"180\", height=\"180\", src=\"images/louvre.jpg\")\n    p.caption Louvre museum in Paris\n\n::: column.grow\nTetrahedra and octahedra are incredibly rigid and stable, which makes them very\nuseful in __construction__. _Space frames_ are polygonal structures that can\nsupport large roofs and heavy bridges.\n:::\n\n::: column(width=180)\n\n    x-img(lightbox width=\"180\", height=\"180\", src=\"images/football.jpg\")\n    p.caption Football\n\n::: column(width=180)\n\n    x-img(lightbox width=\"180\", height=\"180\", src=\"images/dice.jpg\")\n    p.caption Polygonal role-playing dice\n\n::: column.grow\nPlatonic solids are also used to create __dice__. because of their symmetry,\nevery side has the [probability](gloss:probability) of landing facing up – so\nthe dice are fair.\n\nThe [Truncated Icosahedron](gloss:truncated-icosahedron) is probably the most\nfamous polyhedron in the world: it is the shape of the football.\n:::"
    }
  ],
  "title": "Polygons and Polyhedra"
}