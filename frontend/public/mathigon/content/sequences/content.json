{
  "sections": [
    {
      "section": "introduction",
      "id": "intro",
      "description": "Learn about some of the most fascinating patterns in mathematics, from triangle numbers to the Fibonacci sequence and Pascal’s triangle.",
      "trailer": "u2vwpDVj5rU",
      "color": "\"#F97E08\"",
      "level": "Intermediate",
      "next": "fractals",
      "content": "# Sequences and Patterns\n\n## Introduction\n\n\nMany professions that use mathematics are interested in one specific aspect – _finding patterns_,\nand being able to predict the future. Here are two examples:\n\n::: column(width=160 parent=\"padded-thin\")\n\n    x-img(src=\"images/volcanoes.jpg\" width=160 height=160 alt=\"Volcano\")\n\n::: column(width=400)\n\nGeologists around the world want to predict __earthquakes__ and __volcano eruptions__. They can try\nto find patterns in historical data of from seismographs, of the atmosphere, or even animal\nbehaviour. One earthquake, for example, might trigger aftershocks later.\n\n::: column(width=160)\n\n    x-img(src=\"images/finance.jpg\" width=160 height=160 alt=\"Stock Market Charts\")\n\n::: column(width=400)\n\nBankers also look at historical data of stock prices, interest rates and currency  exchange rates\nto estimate how __financial markets__ might change in the  future. Being able to predict if the\nvalue of a stock will go up or down can be extremely lucrative!\n\n:::\n\nProfessional mathematicians use highly complex algorithms to find and analyse all these patterns,\nbut for now, let’s start with something much simpler."
    },
    {
      "id": "simple-patterns",
      "content": "### Simple Sequences\n\nIn mathematics, a [__sequence__](gloss:sequence) is a chain of numbers (or other\nobjects) that usually follow a particular pattern. The individual elements in a\nsequence are called [__terms__](gloss:sequence-term).\n\nHere are a few examples of sequences. Can you find their patterns and calculate\nthe next two terms?\n\n{.text-center.s-orange.with-arrows.no-voice} _{.n}3_, _{.n}6 *{span.arrow}+3*_,\n_{.n}9 *{span.arrow(hidden)}+3*_, _{.n}12 *{span.arrow(hidden)}+3*_,\n_{.n}15 *{span.arrow(hidden)}+3*_, _{.n}[[18]] *{span.arrow(hidden)}+3*_\n_{.n}[[21]] *{span.arrow(hidden)}+3*_, …\n_{span.pattern.reveal(when=\"blank-0 blank-1\")}Pattern: “Add 3 to the previous\nnumber to get the next one.”_\n\n{.text-center.s-teal.with-arrows.no-voice} _{.n}4_, _{.n}10 *{span.arrow(hidden)}+6*_,\n_{.n}16 *{span.arrow(hidden)}+6*_, _{.n}22 *{span.arrow(hidden)}+6*_,\n_{.n}28 *{span.arrow(hidden)}+6*_, _{.n}[[34]] *{span.arrow(hidden)}+6*_,\n_{.n}[[40]] *{span.arrow(hidden)}+6*_, …\n_{span.pattern.reveal(when=\"blank-2 blank-3\")} Pattern: “Add 6 to the previous\nnumber to get the next one.”_\n\n{.text-center.s-purple.with-arrows.no-voice} _{.n}3_, _{.n}4 *{span.arrow(hidden)}+1*_,\n_{.n}7 *{span.arrow(hidden)}+3*_, _{.n}8 *{span.arrow(hidden)}+1*_,\n_{.n}11 *{span.arrow(hidden)}+3*_, _{.n}[[12]] *{span.arrow(hidden)}+1*_,\n_{.n}[[15]] *{span.arrow(hidden)}+3*_, …\n_{span.pattern.reveal(when=\"blank-4 blank-5\")} Pattern: “Alternatingly add 1 and\nadd 3 to the previous number, to get the next one.”_\n\n{.text-center.s-lime.with-arrows.no-voice} _{.n}1_, _{.n}2 *{span.arrow(hidden)}×2*_,\n_{.n}4 *{span.arrow(hidden)}×2*_, _{.n}8 *{span.arrow(hidden)}×2*_,\n_{.n}16 *{span.arrow(hidden)}×2*_, _{.n}[[32]] *{span.arrow(hidden)}×2*_,\n_{.n}[[64]] *{span.arrow(hidden)}×2*_, …\n_{span.pattern.reveal(when=\"blank-6 blank-7\")} Pattern: “Multiply the previous\nnumber by 2, to get the next one.”_"
    },
    {
      "id": "simple-patterns-1",
      "content": "The dots (…) at the end simply mean that the sequence can go on forever. When\nreferring to sequences like this in mathematics, we often represent every term\nby a special [variable](gloss:variable):\n\n    p.text-center.s-orange\n      for i in [1, 2, 3, 4, 5, 6, 7]\n        span.math.n\n          msub\n            mi x\n            mn= i\n        | ,&nbsp;\n      | …\n\nThe small number after the _x_ is called a __subscript__, and indicates the\nposition of the term in the sequence. This means that we can represent the *n*th\nterm in the sequence by [[`x_n`|`x_i`|`x_2`]].\n\n    // You might think that it would be easier to label the terms in the\n    // sequence as _a_, _b_, _c_, _d_, and so on. However you’ll eventually\n    // [[run out of letters|reach 100|forget a letter]], while the sequence\n    // might go on forever!"
    },
    {
      "id": "triangles",
      "content": "### Triangle and Square Numbers\n\nSequences in mathematics don’t always have to be numbers. Here is a sequence\nthat consists of geometric shapes – triangles of increasing size:\n\n::: column(width=24 parent=\"padded-thin\")\n{.text-center.no-voice} __1__\n\n    include svg/triangle-1.svg\n::: column(width=52)\n{.text-center.no-voice} __3__\n\n    include svg/triangle-2.svg\n::: column(width=80)\n{.text-center.no-voice} __6__\n\n    include svg/triangle-3.svg\n::: column(width=108)\n{.text-center.b.no-voice} [[10]]\n\n    include svg/triangle-4.svg\n::: column(width=136)\n{.text-center.b.no-voice} [[15]]\n\n    include svg/triangle-5.svg\n::: column(width=164)\n{.text-center.b.no-voice} [[21]]\n\n    include svg/triangle-6.svg\n:::"
    },
    {
      "id": "triangle-1",
      "content": "At every step, we’re adding one more row to the previous triangle. The length of\nthese new rows also increases by one every time. Can you see the pattern?\n\n{.text-center.s-orange.with-arrows.no-voice} _{.n}1_, _{.n}3 *{span.arrow}+2*_,\n_{.n}6 *{span.arrow}+3*_, _{.n}10 *{span.arrow}+4*_,\n_{.n}15 *{span.arrow}+5*_, _{.n}21 *{span.arrow}+6*_\n_{.n}[[28]] *{span.arrow.reveal(when=\"blank-0\")}+7*_,\n_{.n}[[36]] *{span.arrow.reveal(when=\"blank-1\")}+8*_, …"
    },
    {
      "id": "recursive",
      "content": "We can also describe this pattern using a special [formula](gloss:formula):\n\n    p.text-center.s-orange\n      span.n.md `x_n`\n      | &nbsp;=&nbsp;\n      span.n.md `x_(n-1)`\n      | &nbsp;+&nbsp;\n      em#t3 n\n\nTo get the _n_-th triangle number, we take the [[previous|first|next]] triangle\nnumber and add _n_. For example, if _n_&nbsp;=&nbsp;${n}{n|5|2,20,1}, the\nformula becomes `x_var(\"n\") = x_var(\"n-1\") + var(\"n\")`."
    },
    {
      "id": "recursive-1",
      "content": "A formula that expresses `x_n` as a function of previous terms in the sequence\nis called a [__recursive formula__](gloss:sequence-recursive). As long as you\nknow the [[first term|last term|second term]] in the sequence, you can calculate\nall the following ones."
    },
    {
      "id": "squares",
      "content": "hr\n\nAnother sequence which consists of geometric shapes are the __square numbers__.\nEvery term is formed by increasingly large squares:\n\n::: column(width=24 parent=\"padded-thin squares\")\n{.text-center.no-voice} __1__\n\n    include svg/square-1.svg\n::: column(width=50)\n{.text-center.no-voice} __4__\n\n    include svg/square-2.svg\n::: column(width=76)\n{.text-center.no-voice} __9__\n\n    include svg/square-3.svg\n::: column(width=102)\n{.text-center.b.no-voice} [[16]]\n\n    include svg/square-4.svg\n::: column(width=128)\n{.text-center.b.no-voice} [[25]]\n\n    include svg/square-5.svg\n::: column(width=154)\n{.text-center.b.no-voice} [[36]]\n\n    include svg/square-6.svg\n:::"
    },
    {
      "id": "square-1",
      "content": "For the triangle numbers we found a recursive formula that tells you the _next_\nterm of the sequence as a function of of its _previous_ terms. For square\nnumbers we can do even better: a formula that tells you the *n*th term\ndirectly, without first having to calculate all the previous ones:\n\n{.text-center.s-purple} *{.n}`x_n`* = _{x-equation(solution=\"n^2\")}_"
    },
    {
      "id": "explicit",
      "content": "This is called an [__explicit formula__](gloss:sequence-explicit).\nWe can use it, for example, to calculate that the 13th square number is [[169]],\nwithout first finding the previous 12 square numbers."
    },
    {
      "id": "definitions",
      "content": "hr\n\nLet’s summarise all the definitions we have seen so far:\n\n::: .theorem\nA [__sequence__](gloss:sequence) is a list of numbers, geometric shapes or other\nobjects, that follow a specific pattern. The individual items in the sequence\nare called [__terms__](gloss:sequence-term), and represented by variables like\n`x_n`.\n\nA [__recursive formula__](gloss:sequence-recursive) for a sequence tells you the\nvalue of the *n*th term as a function of [[its previous terms|the first term]].\nYou also have to specify the first term(s).\n\nAn [__explicit formula__](gloss:sequence-explicit) for a sequence tells you the\nvalue of the *n*th term as a function of [[just _n_|the previous term]],\nwithout referring to other terms in the sequence.\n:::"
    },
    {
      "id": "action-sequence",
      "content": "### Action Sequence Photography\n\nIn the following sections you will learn about many different mathematical\nsequences, surprising patterns, and unexpected applications.\n\nFirst, though, let’s look at something completely different: __action sequence\nphotography__. A photographer takes many shots in quick succession, and then\nmerges them into a single image:\n\n    figure: x-img(src=\"images/action-1.jpg\" width=640 height=320 alt=\"Skiing Jump\")\n\nCan you see how the skier forms a sequence? The pattern is not addition or\nmultiplication, but a geometric [transformation](gloss:rigid-transformation).\nBetween consecutive steps, the skier is both translated and\n[[rotated|reflected|dilated]]."
    },
    {
      "id": "halley",
      "section": "arithmetic-geometric",
      "content": "Here are a few more examples of action sequence photography for your enjoyment:\n\n::: column(width=320 parent=\"padded-thin\")\n\n    x-img(src=\"images/action-2.jpg\" width=320 height=160 credit=\"© Ray Demski\" lightbox alt=\"Jumping Volleyball Player\")\n\n::: column(width=320)\n\n    x-img(src=\"images/action-3.jpg\" width=320 height=160 credit=\"© Ray Demski\" lightbox alt=\"Wind Surfing\")\n\n::: column(width=320)\n\n    x-img(src=\"images/action-4.jpg\" width=320 height=160 credit=\"© Marcio Abe\" lightbox alt=\"Snowboard Jump\")\n\n::: column(width=320)\n\n    x-img(src=\"images/action-5.jpg\" width=320 height=160 credit=\"© Jason Halayko\" lightbox alt=\"Mountain Bike Jump\")\n\n::: column(width=320)\n\n    x-img(src=\"images/action-6.jpg\" width=320 height=160 credit=\"© Jason Halayko\" lightbox alt=\"Mountain Bike Jump\")\n\n::: column(width=320)\n\n    x-img(src=\"images/action-7.jpg\" width=320 height=160 lightbox alt=\"Kite Surfing\")\n\n:::\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Arithmetic and Geometric Sequences\n\n\n::: column.grow\n\nIn 1682, the astronomer [Edmond Halley](bio:halley) observed an unusual\nphenomenon: a glowing white object with a long tail that moved across the night\nsky. It was a __comet__, a small, icy rock that is flying through space, while\nleaving behind a trail of dust and ice.\n\nHalley remembered that other astronomers had observed similar comets much\nearlier: one in 1530 and another in 1606. Notice that the gap between two\nconsecutive observations is the same in both cases: [[76]] years.\n\n::: column(width=320)\n\n    x-img(width=320 height=256 src=\"images/halley.jpg\" alt=\"Halley’s Comet\")\n    p.caption Image of Halley’s Comet,#[br]taken in 1986 on Easter Island\n\n:::"
    },
    {
      "id": "halley-1",
      "content": "Halley concluded that all three observations were in fact of the same comet –\nwhich is now called _Halley’s comet_. It is orbiting around the sun and passes\nEarth approximately every 76 years. He also predicted when the comet would be\nvisible next:\n\n{.text-center.s-orange.s-large.with-arrows.no-voice} _{span.n}1530_,\n_{span.n}1606 *{span.arrow}+76*_, _{.n}1682 *{span.arrow}+76*_,\n_{.n}1758 *{span.arrow}+76*_, _{.n}[[1834]] *{span.arrow}+76*_,\n_{.n}[[1910]] *{span.arrow}+76*_, _{.n}[[1986]] *{span.arrow}+76*_, …"
    },
    {
      "id": "halley-2",
      "content": "Actually, the time interval is not always _exactly_ 76 years: it can vary by one\nor two years, as the comet’s orbit is interrupted by other planets. Today we\nknow that Halley’s comet was observed by ancient astronomers as early as 240 BC!\n\n    figure\n      .row\n        x-img(src=\"images/halley-1.jpg\" width=160 height=180)\n        x-img(src=\"images/halley-2.jpg\" width=173 height=180 lightbox)\n        x-img(src=\"images/halley-3.jpg\" width=200 height=180 lightbox)\n        x-img(src=\"images/halley-4.jpg\" width=130 height=180 lightbox)\n      p.caption Depictions of Halley’s comet throughout time: a Babylonian tablet (164 BC), a medival tapestry (1070s), a science magazine (1910) and a Soviet stamp (1986)."
    },
    {
      "id": "ball",
      "content": "A different group of scientists is investigating the behaviour of a bouncing\ntennis ball. They dropped the ball from a height of 10 meters and measured its\nposition over time. With every bounce, the ball loses some of its original\nheight:\n\n    x-coordinate-system(padding=\"12 12 24 120\" width=640 height=320 x-axis=\"0,7,1\" label-suffix=\"s,m\" axis-names=\"time,height\")\n      .tennis-ball\n      .tennis-ball\n    x-slider(steps=400 speed=0.5)"
    },
    {
      "id": "ball-1",
      "goals": "reveals",
      "content": "The scientists noticed that the ball loses 20% of its height after every bounce.\nIn other words, the maximum height of every bounce is 80% of the previous one.\nThis allowed them to predict the height of every following bounce:\n\n{.text-center.s-teal.s-large.with-arrows.no-voice} _{span.n}10_,\n_{span.n}8 *{span.arrow}×0.8*_, _{.n}[[6.4]] *{span.arrow}×0.8*_,\n_{span.n}[[5.12]] *{span.arrow}×0.8*_,\n_{span.n.reveal}4.096 *{span.arrow}×0.8*_*{span.reveal},*\n_{span.n.reveal}3.277 *{span.arrow}×0.8*_*{span.reveal},*\n_{span.n.reveal}2.621 *{span.arrow}×0.8*_*{span.reveal},*\n_{span.n.reveal}2.097 *{span.arrow}×0.8*_*{span.reveal}, …*"
    },
    {
      "id": "arithmetic-geometric",
      "content": "### Definitions\n\nIf you compare both these problems, you might notice that there are many\nsimilarities: the sequence of Halley’s comet has the same\n[[difference|ratio|product]] between consecutive terms, while the\nsequence of tennis ball bounces has the same [[ratio|difference|product]]\nbetween consecutive terms."
    },
    {
      "id": "arithmetic-geometric-1",
      "content": "Sequences with these properties have a special name:\n\n::: column.grow\n::: .theorem.s-red\n\n    p.text-center: include svg/comet.svg\n\nAn [__arithmetic sequence__](gloss:arithmetic-sequence) has a constant\n__{.m-red}difference *d*__ between consecutive terms.\n\nThe same number is added or subtracted to every term, to produce the next one.\n\n:::\n::: column.grow\n::: .theorem.s-green\n\n    p.text-center: include svg/ball.svg\n\nA [__geometric sequence__](gloss:geometric-sequence) has a constant\n__{.m-green}ratio *r*__ between consecutive terms.\n\nEvery term is multiplied or divided by the same number, to produce the next.\n\n:::\n:::"
    },
    {
      "id": "arithmetic-geometric-select",
      "content": "Here are a few different sequences. Can you determine which ones are arithmetic,\ngeometric or neither, and what the values of _{.b.m-red}d_ and _{.b.m-green}r_\nare?\n\n::: column(width=330 parent=\"ag-select\")\n\n{.text-center.s-grey.s-small.no-voice} _{span.n}2_, _{span.n}4_, _{span.n}8_,\n_{span.n}16_, _{span.n}32_, _{span.n}64_, …\n\n::: column(width=320)\n\n{.no-voice} is [[geometric|arithmetic|neither]]_{span.reveal(when=\"blank-0\")}, with\nratio [[2]]._\n\n::: column(width=330)\n\n{.text-center.s-grey.s-small.no-voice} _{span.n}2_, _{span.n}5_, _{span.n}8_,\n_{span.n}11_, _{span.n}14_, _{span.n}17_, …\n\n::: column(width=320)\n\n{.no-voice} is [[arithmetic|geometric|neither]]_{span.reveal(when=\"blank-2\")}, with\ndifference [[3]]._\n\n::: column(width=330)\n\n{.text-center.s-grey.s-small.no-voice} _{span.n}17_, _{span.n}13_, _{span.n}9_,\n_{span.n}5_, _{span.n}1_, _{span.n}–3_, …\n\n::: column(width=320)\n\n{.no-voice} is [[arithmetic|geometric|neither]]_{span.reveal(when=\"blank-4\")}, with\ndifference [[-4]]._\n\n::: column(width=330)\n\n{.text-center.s-grey.s-small.no-voice} _{span.n}2_, _{span.n}4_, _{span.n}7_,\n_{span.n}11_, _{span.n}16_, _{span.n}22_, …\n\n::: column(width=320)\n\n{.no-voice} is [[neither|arithmetic|geometric]]_{span.reveal(when=\"blank-6\")}._\n\n::: column(width=330)\n\n{.text-center.s-grey.s-small.no-voice} _{span.n}40_, _{span.n}20_, _{span.n}10_,\n_{span.n}5_, _{span.n}2.5_, _{span.n}1.25_, …\n\n::: column(width=320)\n\n{.no-voice} is [[geometric|arithmetic|neither]]_{span.reveal(when=\"blank-7\")}, with\nratio [[0.5]]._\n\n:::"
    },
    {
      "id": "arithmetic-geometric-graph",
      "content": "To define an arithmetic or geometric sequence, we have to know not just the\ncommon difference or ratio, but also the initial value (called `a`). Here you\ncan generate your own sequences and plot their values on a graph, by changing\nthe values of `a`, _d_ and _r_. Can you find any patterns?\n\n::: column.ag-chart(width=320)\n\n#### {.m-red} Arithmetic Sequence\n\n{.text-center.no-voice} `a` = ${a}{a|2|-10,10,0.2}, _d_ = ${d}{d|2|-10,10,0.2}\n\n    hr\n\n{.text-center.s-red.s-small.no-voice} _{span.n}${arithmetic(a,d,0)}_,\n_{span.n}${arithmetic(a,d,1)}_, _{span.n}${arithmetic(a,d,2)}_,\n_{span.n}${arithmetic(a,d,3)}_, _{span.n}${arithmetic(a,d,4)}_,\n_{span.n}${arithmetic(a,d,5)}_, …\n\n    x-coordinate-system(padding=\"12 12 24 40\" width=320 height=240)\n    x-gesture(target=\"#arithmetic-geometric-graph x-var\" slide=\"100,0\")\n\n::: column.ag-chart.s-green(width=320)\n\n#### {.m-green} Geometric Sequence\n\n{.text-center.no-voice} `a` = ${b}{b|2|-10,10,0.2}, _r_ = ${r}{r|2|-10,10,0.2}\n\n    hr\n\n{.text-center.s-red.s-small.no-voice} _{span.n}${geometric(b,r,0)}_,\n_{span.n}${geometric(b,r,1)}_, _{span.n}${geometric(b,r,2)}_,\n_{span.n}${geometric(b,r,3)}_, _{span.n}${geometric(b,r,4)}_,\n_{span.n}${geometric(b,r,5)}_, …\n\n    x-coordinate-system.green(padding=\"12 12 24 40\" width=320 height=240)\n\n:::\n\n{.reveal(when=\"var-0 var-1 var-2 var-3\")} Notice how all __{.m-red}arithmetic\nsequences__ look very similar: if the difference is positive, they steadily\n[[increase|decrease]], and if the difference is negative, they steadily\n[[decrease|increase]].\n\n{.reveal(when=\"blank-0 blank-1\")} Geometric sequences, on the other hand, can\nbehave completely differently based on the values of `a` and *r*:\n\n::: column.frame.blue.text-center.reveal(when=\"blank-0 blank-1\" animation=\"pop\" width=220 parent=\"padded-thin\")\n\nIf [`r > 1`](action:set(2,2)), the terms will [[quickly get bigger|quickly decrease|get closer to\nzero]], _{span.reveal(when=\"blank-2\")}up to infinity. Mathematicians say that the sequence\n[__diverges__](gloss:sequence-divergence)._\n\n::: column.frame.blue.text-center.reveal(when=\"blank-2\" animation=\"pop\" delay=200 width=220)\n\nIf [`–1 < r < 1`](action:set(10,0.6)), the terms will always [[get closer to 0|decrease to negative\ninfinity|get smaller]]. _{span.reveal(when=\"blank-3\")}We say that the sequence\n[__converges__](gloss:sequence-convergence)._\n\n::: column.frame.blue.text-center.reveal(when=\"blank-3\" animation=\"pop\" delay=200 width=220)\n\nIf [`r < -1`](action:set(3,-1.4)), the terms will alternate between positive and\nnegative, while their [[absolute value|inverse|difference]] gets bigger.\n\n:::\n\n{.reveal(when=\"blank-4 blank-5\")} You’ll learn more about convergence and\ndivergence in the [last section](/course/sequences/convergence) of this course."
    },
    {
      "id": "arithmetic-geometric-recursive",
      "content": "### Recursive and Explicit Formulas\n\nIn the previous section, you learned that a [__recursive\nformula__](gloss:sequence-recursive) tells you the value of each term as a\nfunction of previous terms. Here are the recursive formulas for arithmetic and\ngeometric sequences:\n\n::: column.grow\n\n{.text-center.no-voice} `x_n =` [[`x_(n-1) + d`|`x_(n-1) × d`|`x_d + n`]]\n\n::: column.grow\n\n{.text-center.no-voice} `x_n =` [[`x_(n-1) × r`|`x_(n-1) - r`|`x_n - r + n`]]\n\n:::"
    },
    {
      "id": "arithmetic-geometric-explicit",
      "content": "One problem with recursive formulas is that to find the 100th term, for example,\nwe first have to calculate the previous 99 terms – and that might take a long\ntime. Instead, we can try to find an [__explicit formula__](gloss:sequence-explicit),\nthat tells us the value of the *n*th term directly.\n\n::: column.grow\n\nFor __{.m-red}arithmetic sequences__, we have to add _d_ at every step:\n\n{.ag-equation.no-voice} `x_1 =` `a`\n\n{.ag-equation.no-voice} `x_2 =` `a + d`\n\n{.ag-equation.no-voice} `x_3 =` `a + d + d`\n\n{.ag-equation.no-voice} `x_4 =` *{x-equation(solution=\"a+d+d+d\")}*\n\n{.ag-equation.no-voice.reveal(when=\"eqn-0\")} `x_5 =` *{x-equation(solution=\"a+d+d+d+d\")}*\n\n{.reveal(when=\"eqn-1\")} At the *n*th term, we are adding [[`n-1`|`n`|`n+1`]]\ncopies of _d_, so the general formula is\n\n{.ag-equation.no-voice.reveal(when=\"blank-0\")} `x_n = a + d × (n-1)`.\n\n::: column.grow\n\nFor __{.m-green}geometric sequences__, we have to multiply _r_ at every step:\n\n{.ag-equation.no-voice} `x_1 = a`\n\n{.ag-equation.no-voice} `x_2 = a × r`\n\n{.ag-equation.no-voice} `x_3 = a × r × r`\n\n{.ag-equation.no-voice} `x_4 =` *{x-equation(solution=\"a×r×r×r\")}*\n\n{.ag-equation.no-voice.reveal(when=\"eqn-2\")} `x_5 =` *{x-equation(solution=\"a×r×r×r×r\")}*\n\n{.reveal(when=\"eqn-3\")} At the *n*th term, we are multiplying [[`n-1`|`n`|`n+1`]]\ncopies of _r_, so the general formula is\n\n{.ag-equation.no-voice.reveal(when=\"blank-1\")} `x_n = a × r^(n-1)`.\n\n:::"
    },
    {
      "id": "arithmetic-geometric-explicit-1",
      "content": "Here is a summary of all the definitions and formulas you’ve seen so far:\n\n::: column.grow\n::: .theorem.s-red\n\nAn __{.m-red}arithmetic sequence__ has first term `a` and common difference `d`\nbetween consecutive terms.\n\n{.text-center} __Recursive formula__: `x_n = x_(n-1) + d`\n\n{.text-center} __Explicit formula__: `x_n = a + d × (n-1)`\n\n:::\n::: column.grow\n::: .theorem.s-green\n\nA __{.m-green}geometric sequence__ has first term `a` and common ratio `r`\nbetween consecutive terms.\n\n{.text-center} __Recursive formula__: `x_n = x_(n-1) × r`\n\n{.text-center} __Explicit formula__: `x_n = a × r^(n-1)`\n\n:::\n:::\n\nNow let’s have a look at some examples where we can use all this!"
    },
    {
      "id": "pay-it-forward",
      "goals": "video",
      "content": "### Pay it Forward\n\nHere is a short clip from the movie _Pay it Forward_, where 12-year-old Trevor\nexplains his idea for making the world a better place:\n\n    figure\n      x-video(src=\"https://static.mathigon.org/videos/pay-it-forward.mp4\" poster=\"images/pay-it-forward-poster.jpg\" width=640 height=360 controls audio)\n      .caption Extract from “Pay It Forward” (2000), © Warner Bros. Entertainment"
    },
    {
      "id": "pay-it-forward-1",
      "content": "The essence of Trevor’s idea is that, if everyone “pays it forward”, a single\nperson can have a huge impact on the world:\n\n    figure: img.invert(src=\"images/pay-it-forward.png\" width=700 height=220)\n\nNotice how the number of people at every step forms a [[geometric sequence|arithmetic\nsequence|triangle number]], _{span.reveal(when=\"blank-0\")}with common ratio [[3]]:_\n\n{.text-center.s-orange.with-arrows.no-voice.reveal(when=\"blank-1\")} _{span.n}1_,\n_{span.n}3 *{span.arrow}×3*_, _{span.n}9 *{span.arrow}×3*_,\n_{span.n}[[27]] *{span.arrow}×3*_, _{span.n}[[81]] *{span.arrow}×3*_,\n_{span.n}[[243]] *{span.arrow}×3*_, …"
    },
    {
      "id": "pay-it-forward-2",
      "content": "Using the [explicit formula](gloss:sequence-explicit) for geometric sequences,\nwe can work out how many new people are affected at any step:\n\n{.text-center} `x_n` = _{x-equation(solution=\"3^(n-1)\")}_"
    },
    {
      "id": "pay-it-forward-3",
      "content": "The number of people increases incredibly quickly. In the 10th step, you would\nreach 19,683 new ones, and after 22 steps you would have reached more people\nthan are currently alive on Earth.\n\nThis sequence of numbers has a special name: the __powers of 3__. As you can\nsee, every term is actually just a different [power](gloss:powers) of 3:\n\n{.text-center.s-orange.no-voice} _{span.n}`3^0`_, _{span.n}`3^1`_, _{span.n}`3^2`_,\n_{span.n}`3^3`_, _{span.n}`3^4`_, _{span.n}`3^5`_, …"
    },
    {
      "id": "millionaire",
      "content": "### Who wants to be a Millionaire?\n\n{.todo} COMING SOON!\n\n    // Two siblings, Anna and Thomas, are receiving pocket money from their parents.\n    // They can choose between two different options:\n\n    // * Thomas is receiving $1 in the first month, $2s in the second month, $3 in the\n    //   third month, and so on. Every month, he receives $1 more than in the previous\n    //   one.\n    // * Anna receives 1¢ in the first month, 2¢ in the second month\n\n    // img.text-wrap(src=\"images/dishes.jpg\" style=\"shape-outside: url(images/dishes.png)\" width=280 height=276)\n\n    // In order to make some additional pocket money, you decided to make a deal with\n    // your parents: for appropriate payment, you’ll do every possible chore around\n    // the house – washing the dishes, laundry, taking out the trash or walking the\n    // dog.\n\n    // The payment system works like this: on the first day, you get 1 cent. On the\n    // second day, you get 2 cents – twice as much as before. On the next day you’ll\n    // get 4 cents. Every day, your payment doubles.\n\n    // 1¢ is not a lot of money – and neither are 2¢ or 4¢, especially\n    // considering how much work you’re doing. But the amount will slowly increase.\n    // How long do you think will it take until you’ve made $100? How long until\n    // you’ve made it to 1 Million?\n\n    // guess fields\n\n    // Let’s try to calculate it mathematically! Just like before, your salary\n    // follows an exponential model, because it changes by a constant ratio every\n    // day (times 2). On day `x`, you’ll get `2^x` cents.\n\n    // | __day__ | __payment__  |\n    // | ------- | ------------ |\n    // | 1       | $ 0.01       |\n    // | 2       | $ 0.02       |\n    // | 3       | $ 0.04       |\n    // | 4       | $ [[0.08]]   |\n    // | 5       | $ [[0.16]]   |\n    // | 6       | $ [[0.32]]   |\n    // | 7       | $ [[0.64]]   |\n    // | 8       | $ 1.28       |\n    // | 9       | $ 2.56       |\n    // | 10      | $ 5.12       |\n    // | 11      | $ 10.24      |\n    // | 12      | $ [[20.48]]  |\n    // | 13      | $ [[40.96]]  |\n    // | 14      | $ [[81.92]]  |\n    // | 15      | $ [[163.84]] |\n    // | 16      | $ 327.68     |\n    // | 17      | $ 655.36     |\n    // | 18      | $ 1,310.72   |\n\n    // One sibling gets $${a}{a|1|1,10,1} every day. The other sibling\n    // gets ${b}{b|1|1,10,1}¢ every day.\n\n    // As you can see, your daily payment start low but then grow rapidly. After 15\n    // days you’ve reached $100. After less than a month you’re making more than 1\n    // million per day, and after 2 months you’d have made more than _all the money\n    // on Earth_. :1f4b0: :1f37e: :1f911:\n\n    // Exponential growth can be truly XXXXX. Even if they start really slowly, they\n    // will eventually speed up a lot, and overtake any possible linear model. Most\n    // importantly, us humans tend to be very bad at estimating just _how fast_\n    // exponential models can grow. Or are we?"
    },
    {
      "id": "figurate",
      "section": "figurate",
      "content": "### The Chessboard Problem\n\n{.todo} COMING SOON!\n\n    // The game of chess was invented in India, many hundreds of years ago. According\n    // to legend, the Indian king loved the game so much that he invited its inventor\n    // to his palace and promised him any present they ask for.\n\n    // The inventor had just one simple request: rice. He wanted the king to place\n    // one grain of rice on the first square of the chess board, two grains on the\n    // second, four grains of the third, eight grains on the fourth, and so on. Every\n    // new square should have twice as many grains of rice as the previous one.\n\n    // The king, who was very wealthy, agreed immediately and asked his servants to\n    // fetch bags of rice. A chessboard has 64 squares, so how many grains of rice\n    // does the king need in total?\n\n    // You might have noticed that the number of grains of rice form a geometric sequence.\n    // The first term is [[1]], and the common ratio is [[2]]. Using the results from\n    // above, we can calculate how many grains of rice there will be on the last square:\n\n    // {.text-center} `a_64 = 1 * 2^63 =` 9 223 372 036 854 775 808\n\n    // That’s 9 billion billion grains of rice! In total, they would weight about\n    // 100 billion tonnes – or 100 times the weight of Mount Everest, the tallest\n    // mountain on Earth.\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Figurate Numbers\n\n\nThe name for [geometric sequences](gloss:geometric-sequence) is pretty\nconfusing, because they don’t have anything to do with geometry. In fact, the\nname was developed hundreds of years ago, when mathematicians thought about\n_multiplication_ and _square roots_ in a much more geometric way.\n\nHowever, there are many other sequences that _are_ based on certain geometric\nshapes – some of which you already saw in the [introduction](/course/sequences/introduction).\nThese sequences are often called [__figurate numbers__](gloss:figurate-numbers),\nand in this section we will have a closer look at some of them."
    },
    {
      "id": "triangle-numbers",
      "content": "### Triangle Numbers\n\nThe __triangle numbers__ are generated by creating triangles of progressively\nlarger size:\n\n::: column(width=24 parent=\"padded-thin\")\n{.text-center.no-voice} __1__\n\n    include svg/triangle-1.svg\n::: column(width=52)\n{.text-center.no-voice} __3__\n\n    include svg/triangle-2.svg\n::: column(width=80)\n{.text-center.no-voice} __6__\n\n    include svg/triangle-3.svg\n::: column(width=108)\n{.text-center.no-voice} __10__\n\n    include svg/triangle-4.svg\n::: column(width=136)\n{.text-center.no-voice} __15__\n\n    include svg/triangle-5.svg\n::: column(width=164)\n{.text-center.no-voice} __21__\n\n    include svg/triangle-6.svg\n:::\n\nYou’ve already seen the recursive formula for triangle numbers:\n`x_n =` [[`x_(n-1) + n`|`n^2 - 1`|`2 × x_(n-1) - 1`]]."
    },
    {
      "id": "billiard-pool",
      "content": "It is no coincidence that there are always 10 pins when bowling or 15 balls when\nplaying billiards: they are both triangle numbers!\n\n::: column(width=320)\n\n    x-img(src=\"images/bowling.jpg\" width=320 height=240)\n\n::: column(width=320)\n\n    x-img(src=\"images/billiard.jpg\" width=320 height=240)\n\n:::"
    },
    {
      "id": "triangle-proof",
      "content": "Unfortunately, the recursive formula is not very helpful if we want to find the\n100th or 5000th triangle number, without first calculating all the previous\nones. But, like we did with arithmetic and geometric sequences, we can try to\nfind an explicit formula for the triangle numbers.\n\n{.todo} COMING SOON: Animated Proof for the Triangle Number Formula\n\n    // ::: column(width=300)\n\n    // svg(width=300 height=300)\n      g\n\n    // ::: column.grow\n    // Let’s start with a triangle of size ${x}{x|5|1,10,1}.\n\n    // First, we need to make a second copy of the triangle.\n\n    // Now we can rearrange the two triangles, to fit together in a rectangle.\n\n    // The size of the rectangle is ${x} × ${x + 1}, so it must have an area of\n    // ${x * (x + 1)}\n\n    // Since the rectangle is twice as large as the original triangle, we know that\n    // the ${n}th triangle number must be ${x*(x+1)/2}.\n\n    // In general, the *n*th triangle number is `T_n = (n × (n + 1)) / 2`.\n    // :::"
    },
    {
      "id": "triangle-sums",
      "content": "Triangle numbers seem to pop up everywhere in mathematics, and you’ll see them\nagain throughout this course. One particularly interesting fact is that _any_\nwhole number can be written as the sum of at most three triangle numbers:\n\n::: column(width=140 parent=\"triangle-sum\")\n{.text-center.no-voice} ${n}{n|42|1,100,1}\n\n    svg.t-sum(width=140 height=140)\n    x-gesture(target=\"#triangle-sums x-var\" slide=\"100,0\")\n\n::: column(width=40)\n{.text-center} =\n::: column(width=140)\n{.text-center.no-voice} __{.t-sum}__\n\n    svg.t-sum.red(width=140 height=140)\n\n::: column(width=40)\n{.text-center} +\n::: column(width=140)\n{.text-center.no-voice} __{.t-sum}__\n\n    svg.t-sum.blue(width=140 height=140)\n\n::: column(width=40)\n{.text-center} +\n::: column(width=140)\n{.text-center.no-voice} __{.t-sum}__\n\n    svg.t-sum.green(width=140 height=140)\n\n:::\n\n{.reveal(when=\"slide\")} The fact that this works for _all_ whole numbers was\nfirst proven in 1796 by the German mathematician [Carl Friedrich\nGauss](bio:gauss) – at the age of 19!"
    },
    {
      "id": "triangle-investigate",
      "content": "::: .box.blue\n\n#### Problem Solving\n\nWhat is the sum of the first 100 positive [integers](gloss:integer)? In other\nwords, what is the value of\n\n{.text-center} `1 + 2 + 3 + 4 + 5 + … + 97 + 98 + 99 + 100`?\n\nRather than manually adding up everything, can you use the [triangle\nnumbers](gloss:triangle-numbers) to help you? What about the sum of the first\n1000 positive integers?\n\n:::"
    },
    {
      "id": "square-numbers",
      "content": "### Square and Polygonal Numbers\n\nAnother sequence that is based on geometric shapes are the __square numbers__:\n\n{.text-center.s-purple.with-arrows.no-voice} _{.n}1_,\n_{.n}4 *{span.arrow.reveal(when=\"blank-4\")}+3*_,\n_{.n}9 *{span.arrow.reveal(when=\"blank-4\")}+5*_,\n_{.n}16 *{span.arrow.reveal(when=\"blank-4\")}+7*_,\n_{.n}[[25]] *{span.arrow.reveal(when=\"blank-4\")}+9*_,\n_{.n}[[36]] *{span.arrow.reveal(when=\"blank-4\")}+11*_,\n_{.n}[[49]] *{span.arrow.reveal(when=\"blank-4\")}+13*_,\n_{.n}[[64]] *{span.arrow.reveal(when=\"blank-4\")}+15*_, …\n\n{.reveal(when=\"blank-0 blank-1 blank-2 blank-3\")} You can calculate the numbers\nis this sequence by squaring every whole number (`1^2`, `2^2`, `3^2`, …), but it\nturns out that there is another pattern: the differences between consecutive\nsquare numbers are the [[odd numbers|triangle numbers|integers]] in increasing\norder!"
    },
    {
      "id": "square-numbers-1",
      "content": "::: column.grow\n\nThe reason for this pattern becomes apparent if we actually draw a square. Every\nstep adds one row and one column. The size of these “corners” starts at 1 and\nincreases by 2 at every step – thereby forming the sequence of odd numbers.\n\nThis also means that the *n*th square number is just the sum of the first *n*\nodd numbers! For example, the sum of the first 6 odd numbers is\n\n{.text-center} `1 + 3 + 5 + 7 + 9 + 11 =` [[36]].\n\n::: column(width=240)\n\n    include svg/square-steps.svg\n    x-slider(steps=6 initial=6 no-play)\n\n:::"
    },
    {
      "id": "square-numbers-2",
      "content": "In addition, every square number is also the sum of two consecutive [triangle\nnumbers](gloss:triangle-numbers). For example, ${n×n}{n|4|1,20,1} =\n${n×(n+1)/2} + ${n×(n-1)/2}. Can you see how we can split every square along\nits diagonal, into two triangles?"
    },
    {
      "id": "polygon-numbers",
      "content": "::: column(width=300)\n\n    svg(width=300 height=260)\n    .text-center #[msub #[mi x]#[mn]]#[mo(value=\"=\") =]#[mn]\n    x-slider(steps=11 initial=3 no-play)\n\n::: column.grow\n\nAfter triangle and square numbers, we can keep on going with larger\n[polygons](gloss:polygon). The resulting number sequences are called __polygonal\nnumbers__.\n\nFor example, if we use polygons with ${k}{k|5|3,10,1} sides, we get the sequence\nof __${polygonName(k)} numbers__.\n\nCan you find recursive and explicit formulas for the *n*th polygonal number\nthat has _k_ sides? And do you notice any other interesting patterns for larger\npolygons?\n\n:::"
    },
    {
      "id": "tetrahedral",
      "content": "### Tetrahedral and Cubic Numbers\n\nOf course, we also don’t have to limit ourselves to two-dimensional shapes and\npatterns. We could stack spheres to form small pyramids, just like how you would\nstack oranges in a supermarket:\n\n::: column(width=64 parent=\"padded-thin\")\n{.text-center.no-voice} __1__\n\n    x-tetrahedron(size=160 layers=1 style=\"margin: 0 -48px\")\n\n::: column(width=88)\n{.text-center.no-voice} __[[4]]__\n\n    x-tetrahedron(size=160 layers=2 style=\"margin: 0 -36px\")\n\n::: column(width=112)\n{.text-center.no-voice} __[[10]]__\n\n    x-tetrahedron(size=160 layers=3 style=\"margin: 0 -24px\")\n\n::: column(width=136)\n{.text-center.no-voice} __20__\n\n    x-tetrahedron(size=160 layers=4 style=\"margin: 0 -12px\")\n\n::: column(width=160)\n{.text-center.no-voice} __35__\n\n    x-tetrahedron(size=160 layers=5)\n\n:::"
    },
    {
      "id": "rabbits",
      "section": "fibonacci",
      "sectionStatus": "dev",
      "content": "Mathematicians often call these pyramids [__tetrahedra__](gloss:tetrahedron),\nand the resulting sequence [__tetrahedral numbers__](gloss:tetrahedral-numbers).\n\n{.todo} COMING SOON: More on Tetrahedral numbers, Cubic numbers, and the 12\ndays of Christmas.\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Sequences as Functions\n\n\nTODO\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Fibonacci Numbers\n\n\nImagine that you’ve received a pair of baby rabbits, one male and one female.\nThey are very special rabbits, because they never die, and the female one gives\nbirth to a new pair of rabbits exactly once every month (always another pair of\nmale and female).\n\n::: x-slideshow\n\n    .stage.rabbits(slot=\"stage\")\n      .rabbits-wrap.s-orange.s-small\n        svg(width=760 height=456 viewBox=\"0 0 760 456\")\n          line(y1=51  x2=760 y2=51)\n          line(y1=130 x2=760 y2=130)\n          line(y1=209 x2=760 y2=209)\n          line(y1=287 x2=760 y2=287)\n          line(y1=366 x2=760 y2=366)\n          path(d=\"M84,91c223.68,0,405,7,405,45\")\n          path(d=\"M84,170c124.82,0,226,14,226,45\")\n          path(d=\"M84,248c74.56,0,135,20.15,135,45\")\n          path(d=\"M534,248c74.56,0,135,20.15,135,45\")\n          path(d=\"M84,327a45,45,0,0,1,45,45\")\n          path(d=\"M354,327a45,45,0,0,1,45,45\")\n          path(d=\"M534,327a45,45,0,0,1,45,45\")\n          polygon(points=\"489 150 481 130 489 135 497 130 489 150\")\n          polygon(points=\"310 229 302 209 310 214 318 209 310 229\")\n          polygon(points=\"219 307 211 287 219 292 227 287 219 307\")\n          polygon(points=\"669 307 661 287 669 292 677 287 669 307\")\n          polygon(points=\"129 386 121 366 129 371 137 366 129 386\")\n          polygon(points=\"399 386 391 366 399 371 407 366 399 386\")\n          polygon(points=\"579 386 571 366 579 371 587 366 579 386\")\n\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"left: 2%; top: 0%; width: 7%\")\n\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"top: 13%\")\n\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"top: 30%\")\n        img.rabbit(src=\"images/rabbits-2.svg\" width=85 height=75 style=\"left: 61%; top: 34%; width: 7%\")\n\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"top: 47%\")\n        img.rabbit(src=\"images/rabbits-3.svg\" width=85 height=75 style=\"left: 37%; top: 51%; width: 7%\")\n        img.rabbit(src=\"images/rabbits-2.svg\" width=85 height=75 style=\"left: 59%; top: 47%\")\n\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"top: 64%\")\n        img.rabbit(src=\"images/rabbits-4.svg\" width=85 height=75 style=\"left: 25%; top: 68%; width: 7%\")\n        img.rabbit(src=\"images/rabbits-3.svg\" width=85 height=75 style=\"left: 35%; top: 64%\")\n        img.rabbit(src=\"images/rabbits-2.svg\" width=85 height=75 style=\"left: 59%; top: 64%\")\n        img.rabbit(src=\"images/rabbits-5.svg\" width=85 height=75 style=\"left: 85%; top: 68%; width: 7%\")\n\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"top: 81%\")\n        img.rabbit(src=\"images/rabbits-2.svg\" width=85 height=75 style=\"left: 13%; top: 85%; width: 7%\")\n        img.rabbit(src=\"images/rabbits-4.svg\" width=85 height=75 style=\"left: 23%; top: 81%\")\n        img.rabbit(src=\"images/rabbits-3.svg\" width=85 height=75 style=\"left: 35%; top: 81%\")\n        img.rabbit(src=\"images/rabbits-1.svg\" width=85 height=75 style=\"left: 49%; top: 85%; width: 7%\")\n        img.rabbit(src=\"images/rabbits-2.svg\" width=85 height=75 style=\"left: 59%; top: 81%\")\n        img.rabbit(src=\"images/rabbits-3.svg\" width=85 height=75 style=\"left: 73%; top: 85%; width: 7%\")\n        img.rabbit(src=\"images/rabbits-5.svg\" width=85 height=75 style=\"left: 83%; top: 81%\")\n\n        .n(style=\"top: 0%\") 1\n        .n(style=\"top: 15%\") 1\n        .n(style=\"top: 32%\") 2\n        .n(style=\"top: 49%\") 3\n        .n(style=\"top: 66%\") 5\n        .n(style=\"top: 84%\") 8\n\nIn the first month, the rabbits are very small and can’t do much – but they grow very quickly.\n\nAfter one month, the rabbits are grown up and can start mating…\n\n… and after another month, they will give birth to their first pair of kids. You now have two pairs\nof rabbits.\n\nIn the next month, your pair of rabbits will give birth to another couple. Meanwhile, the first pair\nof kids have grown up. You now have three pairs in total.\n\nIn the fifth month, your original pair of rabbits will give birth to a new pair. At the same time,\ntheir first pair of kids is now old enough to give birth to grandchildren. You now have five pairs\nof rabbits.\n\nIn the sixth month, there are three more couples that give birth: the original one, as well as their\nfirst two pairs or kids.\n\n:::"
    },
    {
      "id": "rabbits-1",
      "content": "{.r} In the following month you would have 13 pairs of rabbits: the 8 ones from the\nprevious month, plus 5 new sets of babies. Can you detect a pattern in this\nsequence? [Continue](btn:next)"
    },
    {
      "id": "rabbits-2",
      "content": "The number of rabbits in a particular month is [[the sum of the two previous\nnumbers|twice the previous number]]. _{span.reveal(when=\"blank-0\")}In other\nwords, you have to add the *previous two* terms in the sequence, to get the\nnext one. The sequence starts with two 1s, and the [recursive\nformula](gloss:sequence-recursive) is_\n\n{.text-center.s-orange.reveal(when=\"blank-0\")} *{span.n}`x_n`* =\n*{span.n}`x_(n-1)`* + *{span.n}`x_(n-2)`*"
    },
    {
      "id": "rabbits-3",
      "content": "Can you calculate the number of rabbits after a few more months?\n\n{.text-center.s-orange} _{.n}1_, _{.n}1_, _{.n}2_, _{.n}3_, _{.n}5_, _{.n}8_,\n_{.n}[[13]]_, _{.n}[[21]]_, _{.n}[[34]]_, _{.n}[[55]]_, _{.n}[[89]]_,\n_{.n}[[144]]_, …\n\n{.reveal(when=\"blank-5\")} So after 12 months, you’ll have 144 pairs of rabbits!\n\n    figure.reveal(when=\"blank-5\")\n      x-img(src=\"images/rabbits.jpg\" width=600 height=230)"
    },
    {
      "id": "fibonacci",
      "content": "This sequence of numbers is called the [__Fibonacci\nSequence__](gloss:fibonacci-numbers), named after the Italian mathematician\n[Leonardo Fibonacci](bio:fibonacci).\n\n::: column.grow\nWhen Fibonacci was born in 1175, most people in Europe still used the [Roman\nnumeral system](gloss:roman-numerals) for numbers (like XIV or MCMLIV).\nFibonacci’s father was a merchant, and together they travelled to Northern\nAfrica as well as the Middle East. It was there that Fibonacci first learned the\n[Arabic numeral system](gloss:arabic-numerals).\n\nWhen he returned to Italy, Fibonacci wrote a book called _Liber Abaci_ (Latin\nfor “The Book of Calculations”), where he first introduced the new Arabic\nnumerals to European merchants. They were an immediate success – and we still\nuse them today.\n\n::: column(width=300)\n\n    x-img(src=\"images/fibonacci.jpg\" width=300 height=300)\n    .caption Portrait of Leonardo Fibonacci\n\n:::\n\nOn one of the pages in his book, he also investigated the breeding patterns of\nrabbits – that’s why the Fibonacci numbers were named after him.\n\n    figure\n      x-img(src=\"images/liber-abaci.jpg\" width=440 height=290 lightbox)\n      p.caption Pages from Fibonacci’s #[em Liber Abaci]"
    },
    {
      "id": "spirals",
      "content": "Of course, the Fibonacci numbers are not how rabbits _actually_ populate in real\nlife. Rabbits don’t have exactly one male and one female offspring every single\nmonth, and we haven’t accounted for rabbits dying eventually.\n\nBut it turns out that there are many other places in nature where Fibonacci\nnumbers _do_ appear: for example the spirals in plants. Can you count how many\nspirals there are in each direction?\n\n::: column(width=320)\n\n    x-select.segmented\n      div Original\n      div(data-value=\"cw\") Clockwise\n      div(data-value=\"ccw\") Countercw.\n    .spirals(style=\"background-image: url(images/pinecone.jpg)\")\n      .clockwise(style=\"background-image: url(images/pinecone-1.jpg)\")\n      .anticlockwise(style=\"background-image: url(images/pinecone-2.jpg)\")\n\n{.text-center} This pine cone has [[8]] clockwise spirals and [[13]]\ncounterclockwise spirals.\n\n::: column(width=320)\n\n    x-select.segmented\n      div Original\n      div(data-value=\"cw\") Clockwise\n      div(data-value=\"ccw\") Countercw.\n    .spirals(style=\"background-image: url(images/sunflower.jpg)\")\n      .clockwise(style=\"background-image: url(images/sunflower-1.jpg)\")\n      .anticlockwise(style=\"background-image: url(images/sunflower-2.jpg)\")\n\n{.text-center.reveal(when=\"blank-0 blank-1\")} This sunflower has 34 clockwise\nspirals and 55 counterclockwise spirals.\n\n:::"
    },
    {
      "id": "spirals-1",
      "content": "In both cases, the numbers of spirals are consecutive Fibonacci numbers. The\nsame is true for many other plants: next time you go outside, count the number\nof petals in a flower or the number of leaves on a stem. Very often you’ll find\nthat they are Fibonacci numbers!\n\nOf course, this is not just a coincidence. There is an important reason why\nnature likes the Fibonacci sequence, which you’ll learn more about later."
    },
    {
      "id": "bees",
      "content": "::: column(width=320)\n\n    x-select.segmented\n      div(data-value=\"male\") Male\n      div(data-value=\"female\") Female\n    .bees\n      img(src=\"images/bees-male.png\")\n      img(hidden src=\"images/bees-female.png\")\n\n::: column.grow\n\nFibonacci numbers also appear in the populations of honeybees.\n\nIn every bee colony there is a single _queen_ that lays many eggs. If an egg is\nfertilised by a male bee, it hatches into a __female__ bee. If it is not\nfertilised, it hatches into a __male__ bee (called a drone).\n\nThis means that female bees have [[two parents|one parent]], while male bees\nonly have [[one parent|two parents]].\n\n{.reveal(when=\"blank-0 blank-1\")} If we draw the ancestry tree of a bee, the\nnumber of parents, grandparents, great-grandparents, and earlier generations are\nalways Fibonacci numbers!\n\n{.i.lgrey.reveal(when=\"blank-0 blank-1\" delay=400)} Occasionally, young female\nbees are fed with special food called “royal jelly”. In that case, they turn\ninto queens and will fly away to start a new hive.\n\n:::"
    },
    {
      "id": "golden-spiral",
      "content": "### The Golden Ratio\n\nJust like the [triangle](gloss:triangle-numbers) and [square\nnumbers](gloss:square-numbers), and other sequences we’ve seen before, the\nFibonacci sequence can be visualised using a geometric pattern:\n\n::: x-slideshow.golden-spiral\n\n    .stage(slot=\"stage\"): include svg/spiral.svg\n\nWe start with two small squares of size 1.\n\nNext, we add a new square of size 2, to form a larger rectangle.\n\nNext, we add a square of size 3, to form an even larger rectangle.\n\nThe next square has size 5. Can you see that we’re recreating the Fibonacci numbers?\n\nIf we continue adding squares, they will have size 8, 13, 21, and so on.\n\nYou might have noticed that, as the rectangles get larger, they seem to start “spiraling” outwards.\nWe can even visualise this by drawing a perfect spiral that connects the corners of the squares.\n\n:::"
    },
    {
      "id": "golden-ratio",
      "content": "At every step, the squares form a larger rectangle. Its width and height are\nalways two consecutive Fibonacci numbers. The __aspect ratio__ of the rectangle\nis the ratio of its width and its height:\n\n::: column(width=100 parent=\"padded-thin golden-rect\")\n\n    include svg/golden-1.svg\n\n{.text-center.no-voice} `2/1` = 2\n::: column(width=100)\n\n    include svg/golden-2.svg\n\n{.text-center.no-voice} `3/2` = 1.5\n::: column(width=100)\n\n    include svg/golden-3.svg\n\n{.text-center.no-voice} `5/3` = 1.666…\n::: column(width=100)\n\n    include svg/golden-4.svg\n\n{.text-center.no-voice} `8/5` = 1.6\n::: column(width=100)\n\n    include svg/golden-5.svg\n\n{.text-center.no-voice} `input(13) / input(8) reveal(= 1.625, \"blank-0 blank-1\")`\n::: column(width=100)\n\n    include svg/golden-6.svg\n\n{.text-center.no-voice} `input(21) / input(13) reveal(= 1.62…, \"blank-2 blank-3\")`\n:::"
    },
    {
      "id": "golden-ratio-1",
      "goals": "img-0 img-1",
      "content": "Notice how, as we add more and more squares, the aspect ratio seems to get\ncloser and closer to a specific number around 1.6. This number is called the\n[__golden ratio__](gloss:golden-ratio) and is usually represented by the Greek\nletter `φ` (“phi”). Its exact value is\n\n{.text-center} `(1 + sqrt(5))/2 = 1.61803398875…`\n\nMany people believe that the golden ratio is particularly aesthetically\npleasing. That’s why it is often used by artists and architects – like in these\ntwo examples:\n\n::: column(width=320)\n\n    .golden-art\n      x-img(src=\"images/pantheon.jpg\" width=320 height=198)\n      img(src=\"images/pantheon-box.png\" width=320 height=198)\n    x-gesture(target=\".golden-art\")\n\n{.caption} The Greek sculptor Phidias is said to have used the golden ratio\nwhen designing the _Parthenon_ in Athens. The first letter of his name, `φ`, is\nthe symbol we now use for the golden ratio.\n\n::: column(width=320)\n\n    .golden-art\n      x-img(src=\"images/dali.jpg\" width=320 height=198)\n      img(src=\"images/dali-box.png\" width=320 height=198)\n\n{.caption} _The Sacrament of the Last Supper_, by Spanish artist Salvador Dalí,\nis one of many paintings in the golden ratio. In the background, you can also\nsee a large [dodecahedron](gloss:dodecahedron).\n\n:::"
    },
    {
      "id": "golden-ratio-2",
      "content": "We can approximate the golden ratio by [[dividing|adding|subtracting]] two\nconsecutive Fibonacci numbers.\n\n{.reveal(when=\"blank-0\")} However, it turns out that the exact value of `φ`\ncan’t be written as a simple fraction: it is an [__irrational\nnumber__](gloss:irrational-numbers), just like [`π`](gloss:pi) and `sqrt(2)` and\nsome other numbers you’ve seen before."
    },
    {
      "id": "sunflower-growing",
      "content": "### Fibonacci Spirals\n\n::: column.grow\n\nThe golden ratio explains why Fibonacci numbers appear in nature, like the\nsunflower and pine cone you saw at the beginning of this section.\n\nBoth these plants grow outwards from their center (a part of the plant called\nthe _meristem_). As new seeds, leaves or petals are added, they push the\nexisting ones further outwards.\n\nMove the slider on the right to visualise how a plant grows. Notice how every\nleaf is added at a different rotation than the previous one. The angle between\ntwo consecutive leafs is always the same.\n\n::: column(width=300)\n\n    svg.petals(width=300 height=300)\n      circle(r=1 cx=150 cy=150)\n      - var i = 0\n      while i < 40\n        path(d=\"M166,158A20,20,0,0,1,150,150a20,20,0,0,1,32,0A20,20,0,0,1,166,158Z\")\n        - i += 1\n\n    x-slider(steps=39 speed=0.5)\n\n:::"
    },
    {
      "id": "sunflower-spiral",
      "content": "It is important for flowers to pick a suitable angle: the leaves or seeds have\nto be approximately equally spaced so that they get the largest amount of\nsunlight and nutrients. In the diagram below, you can explore what a sunflower\nmight look like with different angles between its seeds:\n\n    // Notice how even tiny changes to the angle can produce a completely different arrangement:\n\n::: x-slideshow\n\n    .sunflower-spiral(slot=\"stage\")\n      .value\n      x-slider(steps=1000 continuous speed=0.1 no-play)\n      svg(width=400 height=400 viewBox=\"0 0 400 400\")\n\nIf the angle is [0°](action:set(0)), all seeds will grow in a single long row away from the center.\n\nIf the angle is [`1/2`](action:set(0.5)) of a full a rotation (180°), the seeds will alternate\nbetween two separate “arms” that move away from the center.\n\nIf the rotation is another fractional proportion of 360°, for example [`2/5`](action:set(2/5)) or\n[`1/3`](action:set(1/3)) or [`3/8`](action:set(3/8)), then the number of “arms” will be the same as\nthe [[denominator|numerator|prime factor]] of that fraction.\n\nUnfortunately “arms” are bad, because they mean that the seeds are not evenly distributed: all of\nthe space between the arms is wasted. But if [rational numbers](gloss:rational-numbers) aren’t going\nto work, let’s try [irrational numbers](gloss:irrational-numbers)!\n\nOne example of an irrational number is [`pi`](gloss:pi). But if the angle between seeds is\n[`1/pi`](action:set(0.31831)) of 360°, we still seem to get arms: 22 of them. That’s because the\nfraction `22/7 = 3.1429…` is a pretty good approximation for `pi`. What we really need is an\nirrational number that _can’t_ be closely approximated by a simple fraction.\n\nIt turns out that the [golden ratio](gloss:golden-ratio) is just that: the “most irrational” of all\nirrational numbers. If the angle between seeds is [`1/phi`](action:set(0.6180339)) of 360°, they\nseem to be almost perfectly spaced. This is precisely the angle that plants around the world are\nusing.\n\n:::"
    },
    {
      "id": "sunflower-spiral-1",
      "content": "::: column(width=240)\n\n    x-img(src=\"images/flowers.jpg\" width=240 height=400)\n\n::: column.grow\n\nYou might remember from above that the ratios of consecutive Fibonacci numbers\nget closer and closer to the golden ratio – and that’s why, if you count the\nnumber of spirals in a plant, you will often find a Fibonacci number.\n\nIt is important to remember that nature doesn’t know about Fibonacci numbers.\nNature also can’t solve equations to calculate the golden ratio – but over the\ncourse of millions of years, plants had plenty of time to try out different\nangles and discover the best one.\n\nPlants and animals always want to grow in the most efficient way, and that is why\nnature is full of regular, mathematical patterns.\n\n:::"
    },
    {
      "id": "lucas-numbers",
      "content": "### Fibonachos\n\nSo far, we have only used the recursive equation for Fibonacci numbers. There\nactually is an explicit equation, too – but it is much more difficult to\nfind:\n\n{.text-center} `F_n = 1/(  sqrt(5)) ( ((1 + sqrt(5))/2)^n - ((1 - sqrt(5))/2)^n )`\n\nWe could also try picking different starting points for the Fibonacci numbers.\nFor example, if we start with 2, 1, … rather than 1, 1, … we get a sequence\ncalled the __Lucas numbers__.\n\nIt turns out that, whatever two starting numbers you pick, the resulting\nsequences share many properties. For example, the ratios of consecutive terms\nwill _always_ [converge](gloss:sequence-convergence) to the golden ratio.\n\n{.text-center.s-purple.s-small.no-voice}\n${a}{a|1|0,10,1}, ${b}{b|1|0,10,1}, _{span.n}${a+b}_, _{span.n}${a+2×b}_,\n_{span.n}${2×a+3×b}_, _{span.n}${3×a+5×b}_, _{span.n}${5×a+8×b}_,\n_{span.n}${8×a+13×b}_, …"
    },
    {
      "id": "special-intro",
      "section": "special",
      "content": "There are many other puzzles, patterns and applications related to Fibonacci\nnumbers. Here are a few examples, which you can try yourself:\n\n::: .box.blue\n\n#### Problem solving\n\n__1. Fibonacci Divisibility__\n\n(a) Which Fibonacci numbers are even? Is there a pattern to where they are\npositioned along the sequence? Can you explain why?\n\n(b) Which Fibonacci numbers are divisible by 3 (or divisible by 4)? What do you\nnotice?\n\n    hr\n\n__2. Fibonacci Sums__\n\nWhat happens if you add up any three consecutive Fibonacci numbers? Can you\nexplain why?\n\n    hr\n\n__3. Fibonacci Staircases__\n\nWhen walking up the stairs, I can either take single steps or leap over two\nsteps at a time. This means that there are many different possibilities for how I\ncould go up a staircase. For example, if there are 5 steps, I have 8 different\nchoices:\n\n    figure: x-img(src=\"images/stairs.svg\" width=530 height=200)\n\nHow many choices are there for staircase with 6, 7 or 8 steps? Can you detect\na pattern? And how is this related to the Fibonacci numbers?\n\n:::\n\n    //- figure\n    //-   x-img(src=\"images/fibonachos.jpg\" width=600 height=282)\n    //-   p.caption © FoxTrot, by Bill Amend\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Special Sequences\n\n\n\nIn addition to [arithmetic](gloss:arithmetic-sequence) and\n[geometric](gloss:geometric-sequence) sequences, [Fibonacci\nnumbers](gloss:fibonacci-numbers) and [figurate numbers](gloss:figurate-numbers),\nthere are countless interesting sequences that don’t follow a similar, regular\npattern."
    },
    {
      "id": "primes",
      "content": "### Prime Numbers\n\nOne example that you’ve already seen before are the [__Prime\nnumbers__](gloss:prime). We say that a number is _prime_ if it has no\n[factors](gloss:factor) [[other than 1 and itself|other than 1 and 2|and no\nmultiples]]."
    },
    {
      "id": "primes-1",
      "content": "Here are the first few prime numbers:\n\n{.text-center.s-teal} _{.n}2_, _{.n}3_, _{.n}5_, _{.n}7_, _{.n}11_,\n_{.n}[[13]]_, _{.n}[[17]]_, _{.n}[[19]]_, …"
    },
    {
      "id": "primes-2",
      "goals": "p2 p3 p5 p7",
      "content": "Unfortunately, prime numbers don’t follow a simple pattern or recursive\nformula. Sometimes they appear directly next to each other (these are called\n[twin primes](gloss:twin-primes)), and sometimes there are huge gaps between\nthem. They seem to be distributed almost randomly!\n\nPrime numbers also don’t have a simple geometric representation like\n[triangle](gloss:triangle-numbers) or [square numbers](gloss:square-numbers),\nbut with a bit of work we can reveal interesting patterns:\n\n::: column(width=320)\n\n    .eratosthenes\n      .deleted 1\n      .l-red 2\n      - var i = 3\n      while i <= 100\n        div= i\n        - i += 1\n    x-gesture(target=\".eratosthenes .l-red\")\n\n{.caption} If we cross out all multiples of small integers, the remaining\nnumbers must all be prime. This method is called the [__Sieve of\nEratosthenes__](gloss:sieve-eratosthenes).\n\n::: column(width=320)\n\n    x-coordinate-system(width=320 height=320 padding=\"8 8 20 24\" axis-names=\"x,number of primes less than x\")\n\n{.caption} If we draw a chart that increases by 1 whenever there is a prime\nnumber, we get a “stepped” function with fascinating properties.\n:::"
    },
    {
      "id": "primes-3",
      "content": "You can learn more about these and other properties of prime numbers in our\ncourse on [Divisibility and Primes](/course/divisibility/primes). They are\nsome of the most important and most mysterious concepts in mathematics!\n\n    figure: img(src=\"images/primes.svg\" width=480 height=156)"
    },
    {
      "id": "perfect",
      "content": "### Perfect Numbers\n\nTo determine if a number is [prime](gloss:prime), we have to find all of its\n[factors](gloss:factor). Usually we would _multiply_ these factors to get back\nthe original number, but let’s see what happens if we _add up_ all factors\nof a number (excluding the number itself):\n\n    - list = function(n) { return Array.apply(null, {length: n}).map((x,i) => i+1); }\n    - factors = function(n) { return list(n-1).filter(i => !(n % i)); }\n    - total = function(a) { return a.reduce((a, c) => a + c, 0); }\n\n    table.grid.perfect-table\n      tr\n        td: strong Number\n        td: strong Factors\n        td: strong Sum of Factors\n      for i in [5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n        tr\n          td: .c= i\n          td\n            for j in factors(i)\n              .c.small= j\n          if i >= 10\n            td.md [[#{total(factors(i))}]]\n          else\n            td= total(factors(i))"
    },
    {
      "id": "perfect-1",
      "content": "Let’s compare these numbers with their sum of factors:\n\n::: column.frame.blue.text-center(width=222 parent=\"padded-thin\")\n\nFor most numbers, the sum of its factors is [[less than|greater than|equal to]]\nitself. These numbers are called __deficient numbers__.\n\n::: column.frame.green.text-center.reveal(when=\"blank-0\" animation=\"pop\" width=222)\n\nFor a few numbers, the sum of its factors is greater than itself. These numbers\nare called __abundant numbers__.\n\n::: column.frame.yellow.text-center.reveal(when=\"blank-0\" animation=\"pop\" delay=500 width=222)\n\nOnly one number in the list above has a sum of factors that is _equal_ to itself:\n[[6]]. This is called a [__perfect number__](gloss:perfect-numbers).\n\n:::"
    },
    {
      "id": "perfect-2",
      "content": "The next perfect number is 28, because if we add up all its factors we get\n`1 + 2 + 4 + 7 + 14 = 28`. After that, perfect numbers become much rarer:\n\n{.text-center.s-purple.s-vertical.perfect-list.no-voice.no-voice} _{.n}6_, _{.n}28_,\n_{.n}496_, _{.n}8,128_, _{.n}33,550,336_, _{.n}8,589,869,056_,\n_{.n}137,438,691,328_, _{.n}2,305,843,008,139,952,128_, …\n\nNotice that all of these numbers are [[even|multiples of 3|2 more than a square\nnumber]]. _{span.reveal(when=\"blank-0\")}It turns out that they are also all\ntriangle numbers!_"
    },
    {
      "id": "perfect-3",
      "content": "::: column.grow\n\nPerfect numbers were first studied by ancient Greek mathematicians like\n[Euclid](bio:euclid), [Pythagoras](bio:pythagoras) and [Nicomachus](bio:nicomachus),\nmore than 2000 years ago. They calculated the first few perfect numbers, and\nwondered if there might be any _odd_ ones.\n\nToday, mathematicians have used computers to check the first 10<sup>1500</sup>\nnumbers (that’s a 1 followed by 1500 zeros), but without success: all perfect\nnumbers they found were even. To this day, it is still unknown whether there are\nany odd perfect numbers, making it the oldest unsolved problem in _all of\nmathematics_!\n\n::: column(width=220)\n\n    x-img(src=\"images/euclid.jpg\" width=220 height=269)\n\n{.caption} Euclid of Alexandria\n:::"
    },
    {
      "id": "hailstone",
      "content": "### The Hailstone Sequence\n\nMost of the sequences we have seen so far had a single rule or pattern. But\nthere is no reason why we can’t combine multiple different ones – for example\na recursive formula like this:\n\n    table.grid.text-left\n      tr\n        td: strong.md If `x_n` is even:\n        td.md `x_(n+1) = x_n // 2`\n      tr\n        td: strong.md If `x_n` is odd:\n        td.md `x_(n+1) = 3 x_n + 1`\n\nLet’s start with `x_1 = 5` and see what happens:\n\n{.text-center.s-orange.with-arrows.no-voice} _{.n}5_, _{.n}[[16]] *{span.arrow}×3 +1*_,\n_{.n}[[8]] *{span.arrow.reveal(when=\"blank-0\")}÷2*_,\n_{.n}[[4]] *{span.arrow.reveal(when=\"blank-1\")}÷2*_,\n_{.n}[[2]] *{span.arrow.reveal(when=\"blank-2\")}÷2*_,\n_{.n}[[1]] *{span.arrow.reveal(when=\"blank-3\")}÷2*_,\n_{.n}[[4]] *{span.arrow.reveal(when=\"blank-4\")}×3 +1*_,\n_{.n}[[2]] *{span.arrow.reveal(when=\"blank-5\")}÷2*_,\n_{.n}[[1]] *{span.arrow.reveal(when=\"blank-6\")}÷2*_, …"
    },
    {
      "id": "hailstone-1",
      "content": "It looks like after a few terms, the sequence reaches a “cycle”: 4, 2, 1 will\ncontinue to repeat over and over again, forever.\n\nOf course, we could have picked a different starting point, like ${n}{n|10|5,40,1}.\nThen the sequence would look like this:\n\n{.text-center.no-voice} _{span.var.s-orange(:html=\"hailstones(n)\")}_, *{span.s-red}_{.n}4_,\n_{.n}2_, _{.n}1_,* *{span.s-purple}_{.n}4_, _{.n}2_, _{.n}1_,*\n*{span.s-blue}_{.n}4_, _{.n}2_, _{.n}1_, …*"
    },
    {
      "id": "hailstone-2",
      "content": "It seems like the length of the sequence varies a lot, but it will always end up\nin a 4, 2, 1 cycle – no matter what first number we pick. We can even visualise\nthe terms of the sequence in a chart:\n\n    x-coordinate-system(width=600 height=400 padding=\"12 12 24 40\")\n      .hailstone-slider.md #[span Start value:]${n}{n|12|1,50,1}\n\n{.reveal(when=\"var-0\")} Notice how some starting points end very quickly,\nwhile others (like [31](action:set(31)) or [47](action:set(47))) take more\nthan one hundreds steps before they reach the 4, 2, 1 cycle."
    },
    {
      "id": "hailstone-3",
      "content": "::: column.grow\n\nAll sequences that follow this recursive formula are called [__Hailstone\nSequences__](gloss:hailstone-sequence), because they seem to move randomly up\nand down before reaching the 4, 2, 1 cycle – just like hailstones that move up\nand down in a cloud before crashing to Earth.\n\nIn 1937, the mathematician [Lothar Collatz](bio:collatz) proposed that _every_\nhailstone sequence eventually ends in a 4, 2, 1 cycle – whatever starting value\nyou pick. You’ve already checked a few starting points above, and computers have\nactually tried all numbers up to `10^20` – that’s 100 billion billion or a 1\nfollowed by twenty zeros.\n\n::: column(width=240)\n\n    x-img(src=\"images/storm.jpg\" width=240 height=340)\n\n:::\n\nHowever, there are infinitely many integers. It is impossible to check each of\nthem, and no one has been able to find a [proof](gloss:proof) that works for\nall.\n\nJust like the search for odd perfect numbers, this is still an open problem in\nmathematics. It is amazing that these simple patterns for sequences can lead to\nquestions that have mystified even the best mathematicians in the world for\ncenturies!"
    },
    {
      "id": "look-and-say",
      "content": "### The Look-and-Say Sequence\n\nHere is one more sequence that is a bit different from all the ones you’ve seen\nabove. Can you find the pattern?\n\n{.text-center.s-lime.s-vertical} _{span.n}1_, _{span.n}11_, _{.n}21_,\n_{.n}1211_, _{.n}111221_, _{.n}312211_, …\n\n[Continue](btn:next)"
    },
    {
      "id": "look-and-say-1",
      "content": "This sequence is called the __Look-and-Say__ sequence, and the pattern is just\nwhat the name says: you start with a 1, and every following term is what you\nget if you “read out loud” the previous one. Here is an example:\n\n    p: x-img(src=\"images/look-and-say.svg\" width=240 height=130 style=\"margin: 0 auto\")\n\nCan you now find the next terms?\n\n{.text-center.s-lime.s-vertical} …, _{.n}312211_, _{.n}[[13112221]]_,\n_{.n}[[1113213211]]_, …"
    },
    {
      "id": "look-and-say-2",
      "content": "This sequence is often used as a puzzle to trip up mathematicians – because the\npattern appears to be completely non-mathematical. However, as it turns out,\nthe sequence has many interesting properties. For example, every term ends in\n[[1]], and no digit larger than [[3]] ever gets used."
    },
    {
      "id": "look-and-say-3",
      "content": "The British mathematician [John Conway](bio:conway) discovered that, no matter\nwhat number you pick as starting value, the sequence will eventually split into\ndistinct “sections” that no longer interact with each other. Conway called this\nthe _Cosmological Theorem_, and named the different sections using the chemical\nelements _Hydrogen_, _Helium_, _Lithium_, …, up to _Plutonium_."
    },
    {
      "id": "pascal-intro",
      "section": "pascals-triangle",
      "content": "### The Sequence Quiz\n\nYou’ve now seen countless different mathematical sequences – some based on\ngeometric shapes, some that follow specific formulas, and others that seem\nto behave almost randomly.\n\nIn this quiz you can combine all your knowledge about sequences. There is just\none goal: find the pattern and calculate the next two terms!\n\n::: .box.blue\n\n#### Find the next number\n\n{.text-center.s-yellow.no-voice} _{span.n}7_, _{span.n}11_, _{.n}15_, _{.n}19_, _{.n}23_,\n_{.n}27_, _{.n}[[31]]_, _{.n}[[35]]_, …\n_{span.pattern.reveal(when=\"blank-0 blank-1\")} Pattern: Always +4_\n\n{.text-center.s-orange.no-voice} _{span.n}11_, _{span.n}14_, _{.n}18_, _{.n}23_, _{.n}29_,\n_{.n}36_, _{.n}[[44]]_, _{.n}[[53]]_, …\n_{span.pattern.reveal(when=\"blank-2 blank-3\")} Pattern: +3, +4, +5, +6, …_\n\n{.text-center.s-red.no-voice} _{span.n}3_, _{span.n}7_, _{.n}6_, _{.n}10_, _{.n}9_,\n_{.n}13_, _{.n}[[12]]_, _{.n}[[16]]_, …\n_{span.pattern.reveal(when=\"blank-4 blank-5\")} Pattern: +4, –1, +4, –1, …_\n\n{.text-center.s-purple.no-voice} _{span.n}2_, _{span.n}4_, _{.n}6_, _{.n}12_, _{.n}14_,\n_{.n}28_, _{.n}[[30]]_, _{.n}[[60]]_, …\n_{span.pattern.reveal(when=\"blank-6 blank-7\")} Pattern: ×2, +2, ×2, +2, …_\n\n{.text-center.s-blue.no-voice} _{span.n}1_, _{span.n}1_, _{.n}2_, _{.n}3_, _{.n}5_,\n_{.n}8_, _{.n}[[13]]_, _{.n}[[21]]_, …\n_{span.pattern.reveal(when=\"blank-8 blank-9\")} Pattern: Fibonacci Numbers_\n\n{.text-center.s-teal.no-voice} _{span.n}27_, _{span.n}28_, _{.n}30_, _{.n}15_, _{.n}16_,\n_{.n}18_, _{.n}[[9]]_, _{.n}[[10]]_, …\n_{span.pattern.reveal(when=\"blank-10 blank-11\")} Pattern: +1, +2, ÷2, +1, +2, ÷2, …_\n\n{.text-center.s-green.no-voice} _{span.n}1_, _{span.n}9_, _{.n}25_, _{.n}49_, _{.n}81_,\n_{.n}121_, _{.n}[[169]]_, _{.n}[[225]]_, …\n_{span.pattern.reveal(when=\"blank-12 blank-13\")} Pattern: Odd square numbers_\n\n:::\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Pascal’s Triangle\n\n\nBelow you can see a number pyramid that is created using a simple pattern: it\nstarts with a single “1” at the top, and every following cell is the sum of\nthe two cells directly above. Hover over some of the cells to see how they are\ncalculated, and then fill in the missing ones:\n\n    - var fact = function(x) { return !x ? 1 : (x * fact(x-1)); };\n    - var bin = function(a, b) { return fact(a) / fact(b) / fact(a - b); };\n\n    .overflow-wrap: .pascal-grid(style=\"width: 560px\")\n      - var i = 0;\n      while i < 13\n        - var j = 0\n        .r\n          while j <= i\n            if (i == 6 && j == 2) || (i == 8 && j == 5) || (i == 10 && j == 5)  || (i == 12 && j == 3)  || (i == 12 && j == 9)\n              .c.md [[#{bin(i, j)}]]\n            else\n              .c= bin(i, j)\n            - j += 1;\n        - i += 1;"
    },
    {
      "id": "pascal-intro-1",
      "content": "This diagram only showed the first twelve rows, but we could continue forever,\nadding new rows at the bottom. Notice that the triangle is\n[[symmetric|right-angled|equilateral]], which can help you calculate some of the\ncells."
    },
    {
      "id": "pascal-triangle",
      "content": "The triangle is called [__Pascal’s triangle__](gloss:pascals-triangle), named\nafter the French mathematician [Blaise Pascal](bio:pascal). He was one of the\nfirst European mathematicians to investigate its patterns and properties, but it\nwas known to other civilisations many centuries earlier:\n\n::: column(width=200)\n\n    x-img(src=\"images/pascal-1.jpg\" width=130 height=280 style=\"margin: 0 auto\")\n\n{.caption} In 450BC, the Indian mathematician [Pingala](bio:pingala) called the\ntriangle the __“Staircase of Mount Meru”__, named after a sacred Hindu mountain.\n\n::: column(width=200)\n\n    x-img(src=\"images/pascal-2.jpg\" width=200 height=280)\n\n{.caption} In Iran, it was known as the __“Khayyam triangle”__ (مثلث خیام),\nnamed after the Persian poet and mathematician [Omar Khayyám](bio:khayyam).\n\n::: column(width=200)\n\n    x-img(src=\"images/pascal-3.jpg\" width=200 height=280)\n\n{.caption} In China, the mathematician Jia Xian also discovered the triangle.\nIt was named after his successor, __“Yang Hui’s triangle”__ (杨辉三角).\n\n:::\n\nPascal’s triangle can be created using a very simple pattern, but it is filled\nwith surprising patterns and properties. That’s why it has fascinated\nmathematicians across the world, for hundreds of years.\n\n[Continue](btn:next)"
    },
    {
      "id": "pascal-sequences",
      "content": "### Finding Sequences\n\nIn the previous sections you saw countless different mathematical sequences. It\nturns out that many of them can also be found in Pascal’s triangle:\n\n    - var fact = function(x) { return !x ? 1 : (x * fact(x-1)); };\n    - var bin = function(a, b) { return fact(a) / fact(b) / fact(a - b); };\n\n    .overflow-wrap: .pascal-grid.sums(style=\"width: 760px\")\n      - var i = 0;\n      while i < 17\n        - var j = 0\n        .r\n          while j <= i\n            - b = bin(i, j)\n            if b == 120\n              .c: span.s120= b\n            else if b == 3003\n              .c: span.s3003= b\n            else\n              .c= b\n            - j += 1;\n          .c.sum\n        - i += 1;\n\n::: tab(parent=\"pascal-tabs\")\n#### {.btn.yellow} _{span.check(when=\"blank-0\")}_\nThe numbers in the first diagonal on either side are all\n[[ones|increasing|even]].\n::: tab\n#### {.btn.orange} _{span.check(when=\"blank-1\")}_\nThe numbers in the second diagonal on either side are the\n[[integers|primes|square numbers]].\n::: tab\n#### {.btn.red} _{span.check(when=\"blank-2\")}_\nThe numbers in the third diagonal on either side are the [[triangle\nnumbers|square numbers|Fibonacci numbers]].\n::: tab\n#### {.btn.purple} _{span.check(when=\"blank-3\")}_\nThe numbers in the fourth diagonal are the [[tetrahedral numbers|cubic\nnumbers|powers of 2]].\n::: tab\n#### {.btn.blue} _{span.check(when=\"blank-4\")}_\nIf you add up all the numbers in a row, their sums form another sequence: the\n[[powers of two|perfect numbers|prime numbers]].\n::: tab\n#### {.btn.teal} _{span.check(when=\"blank-5\")}_\nIn every row that has a prime number in its second cell, all following numbers\nare [[multiples|factors|inverses]] of that prime.\n::: tab\n#### {.btn.green} _{span.check(when=\"blank-6\")}_\nThe diagram above highlights the “shallow” diagonals in different colours. If\nwe add up the numbers in every diagonal, we get the [[Fibonacci\nnumbers|Hailstone numbers|geometric sequence]].\n:::"
    },
    {
      "id": "pascal-sequences-1",
      "content": "Of course, each of these patterns has a mathematical reason that explains why it\nappears. Maybe you can find some of them!\n\nAnother question you might ask is how often a number appears in Pascal’s\ntriangle. Clearly there are infinitely many 1s, one 2, and every other number\nappears [[at least twice|at least once|exactly twice]],\n_{span.reveal(when=\"blank-0\")} in the second diagonal on either side._"
    },
    {
      "id": "pascal-sequences-2",
      "content": "Some numbers in the middle of the triangle also appear three or four times.\nThere are even a few that appear six times: you can see both [120](->.s120) and\n[3003](->.s3003) four times in the triangle above, and they’ll appear two more\ntimes each in rows 120 and 3003.\n\nSince 3003 is a triangle number, it actually appears two more times in the\n_third_ diagonals of the triangle – that makes eight occurrences in total.\n\nIt is unknown if there are any other numbers that appear eight times in the\ntriangle, or if there are numbers that appear more than eight times. The American\nmathematician [David Singmaster](bio:singmaster) hypothesised that there is a\nfixed limit on how often numbers can appear in Pascal’s triangle – but it hasn’t\nbeen proven yet."
    },
    {
      "id": "modular",
      "goals": "select",
      "content": "### Divisibility\n\nSome patterns in Pascal’s triangle are not quite as easy to detect. In the\ndiagram below, highlight all the cells that are even:\n\n    - var fact = function(x) { return !x ? 1 : (x * fact(x-1)); };\n    - var bin = function(a, b) { return Math.round(fact(a) / fact(b) / fact(a - b)); };\n\n    .overflow-wrap: .pascal-grid#pascal-select(style=\"width: 340px\")\n      - var i = 0;\n      while i < 8\n        - var j = 0\n        .r\n          while j <= i\n            .c= bin(i, j)\n            - j += 1;\n        - i += 1;\n    x-gesture(target=\"#pascal-select .r:nth-child(3) .c:nth-child(2)\")\n\n{.reveal(when=\"select\")} It looks like the even number in Pascal’s triangle form\nanother, smaller [[triangle|matrix|square]]."
    },
    {
      "id": "modular-1",
      "goals": "c2 c3 c4 c5",
      "content": "Colouring each cell manually takes a long time, but here you can see what\nhappens if you would do this for many more rows. And what about cells divisible\nby other numbers?\n\n    - var fact = function(x) { return !x ? 1 : (x * fact(x-1)); };\n    - var bin = function(a, b) { return Math.round(fact(a) / fact(b) / fact(a - b)); };\n\n    .overflow-wrap: .pascal-grid.small(style=\"width: 760px\")\n      - var i = 0;\n      while i < 25\n        - var j = 0\n        .r\n          while j <= i\n            - b = bin(i, j)\n            if b > 99999\n              .c: span.small= b\n            else\n              .c= b\n            - j += 1;\n        - i += 1;\n      .pascal-buttons\n        button.btn.btn-red(data-value=\"2\") Divisible by 2\n        button.btn.btn-blue(data-value=\"3\") Divisible by 3\n        button.btn.btn-green(data-value=\"4\") Divisible by 4\n        button.btn.btn-yellow(data-value=\"5\") Divisible by 5"
    },
    {
      "id": "modular-2",
      "content": "::: column.grow\nWow! The coloured cells always appear in [[triangles|squares|pairs]] (except for\na few single cells, which could be seen as triangles of size 1).\n\nIf we continue the pattern of cells divisible by 2, we get one that is very\nsimilar to the __Sierpinski triangle__ on the right. Shapes like this, which\nconsist of a simple pattern that seems to continue forever while getting smaller\nand smaller, are called [__Fractals__](gloss:fractal). You will learn more about\nthem in the future…\n\n::: column.width(280)\n\n    img(src=\"images/sierpinski.svg\" width=280 height=243 alt=\"Sierpinski Triangle\")\n    p.caption The Sierpinski Triangle\n\n:::"
    },
    {
      "id": "convergence-intro",
      "section": "convergence",
      "sectionStatus": "dev",
      "content": "### Binomial Coefficients\n\nThere is one more important property of Pascal’s triangle that we need to talk\nabout. To understand it, we will try to solve the same problem with two\ncompletely different methods, and then see how they are related.\n\n{.todo} COMING SOON\n\n    // Galton Board, normal distribution\n\n\n\n--------------------------------------------------------------------------------\n\n\n\n## Limits and Convergence\n\n\n{.todo} COMING SOON\n\n    // In some sequences, such as Prime numbers or Perfect numbers, the individual\n    // terms are very special and interesting. In other sequences we may only be\n    // interested in what happens to the terms as we calculate more and more of\n    // them (what happens to xn as n gets very large). Here are a few examples\n    // of what could happen (the numbers, for clarity, are represented by dots):\n\n    // This sequence gets closer and closer to a particular number. We say that it converges.\n    // This sequence doesn’t converge, since it doesn’t keep getting closer to one single number.\n    // This sequence keeps on growing. We say that it diverges.\n\n    // Convergence means that the terms keep getting closer to a particular number,\n    // and divergence means that the terms keep getting bigger, whether towards\n    // infinity or negative infinity. Remember that the sequence of ratios of\n    // consecutive Fibonacci numbers above converged to the golden ratio.\n\n    // Unfortunately “getting closer” is not a particularly precise description\n    // in mathematics. A sequence could for example first get very big and then\n    // turn around and converge. We don’t really care about what happens at the\n    // beginning, only what happens to the most distant terms. All of the\n    // following sequences converge:\n\n    // Here is how mathematicians define the notion of convergence precisely,\n    // and this is one of the most important definitions in all of mathematics:\n\n    // A sequence with terms x1, x2, x3, … tends to a limit y if we can think of\n    // any tiny positive number, let us call it ε (the Greek letter Epsilon), and\n    // if eventually all terms of the sequence will be within ε of the limit y.\n    // This means that there is some (sometimes very big) integer N so that xN,\n    // xN+1, xN+2, … are all between y – ε and y + ε.\n\n    // Using special mathematical notation, it is possible to express this\n    // definition without any words. We use ∀ meaning “for all”, ∃ meaning\n    // “there exists” and : meaning “such that”:\n\n    // ∀ ε ∃ N : |xn – y| < ε ∀ n > N\n    // For all ε there exists a number N such that the distance |xn – y|\n    // between xn and y is less than ε for all n > N.\n\n    // Sequences and their convergence is studied in an area of mathematics\n    // called Analysis. We use sequences to define crucial concepts in mathematics\n    // such as series, continuity and differentiation.\n\n    // Litov’s Mean Value Theorem\n\n    // Start with two numbers, say 8 and 2.\n    // Let’s generate a sequence where the next number is the mean of the previous two numbers.\n    // So the next number is half of (8+2), and the sequence continues: 8,2,5\n    // The next number is half of (2+5), and the sequence continues: 8,2,5,3.5\n    // What would happen if you continued this process indefinitely?\n    // Choose a few pairs of starting numbers and repeat the process.\n    // Each time, your sequence should get closer and closer to a value which we call the limit.\n    // Can you find a relationship between your starting numbers and the limit of the sequence they generate?\n    // Can you explain why this happens?\n    // Now start with three numbers.\n    // This time, we can generate a sequence where the next number is the mean of the last three numbers.\n    // Check you agree that if we start with 4,1,10, the next number is 5, and the number after that is 163.\n    // What would happen if you continued this process indefinitely?\n    // Choose some more sets of three starting numbers.\n    // Can you find a relationship between your starting numbers and the limit of the sequence they generate?\n    // Can you explain why this happens?\n\n    // After a while of playing with the numbers on a spreadsheet I have\n    // discovered that the formula to find the “limiting value” for 2 starting\n    // numbers is: (x+2y)/3\n    // where x is the first number chosen and y is the second number chosen."
    }
  ],
  "title": "Sequences and Patterns"
}