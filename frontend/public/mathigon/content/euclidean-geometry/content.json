{
  "sections": [
    {
      "id": "thales",
      "goals": "p1 p2 p3 move",
      "section": "introduction",
      "description": "Geometry is one of the oldest parts of mathematics – and one of the most useful. Its logical, systematic approach has been copied in many other areas.",
      "color": "\"#0F82F2\"",
      "level": "Intermediate",
      "next": "transformations",
      "content": "# Euclidean Geometry\n\n## Introduction\n\n\n::: column.grow\nMathematics has been studied for thousands of years – to predict the seasons,\ncalculate taxes, or estimate the size of farming land.\n\nMathematicians in ancient Greece, around 500 BC, were amazed by mathematical\npatterns, and wanted to explore and explain them. For the first time, they began\nto study mathematics just “for fun”, without a specific application in mind.\n::: column(width=300)\n\n    x-img(src=\"images/tablet.jpg\" width=300 height=210)\n\n{.caption} A Babylonian clay tablet, dated 1800 BC, that contains geometric\ncalculations.\n:::\n\nOne of these mathematicians was [Thales of Miletus](bio:thales), who made a\nsurprising discovery when playing around with geometric shapes:\n\n::: column(width=420)\n\n    x-geopad.sticky(width=420 height=320): svg\n\n::: column.grow\nStart by picking two points anywhere in the box on the left.\n_{span.reveal(when=\"p1 p2\")} Let’s draw a semicircle around these points._\n\n{.reveal(when=\"p1 p2\")} Now pick a third point that lies somewhere on the\n[circumference](target:circumf) of the semicircle.\n\n{.reveal(when=\"p3\")} We can draw a [{.red}triangle](target:triangle) formed by the two corners of the\nsemicircle, as well as the point you picked on the circumference.\n\n{.reveal(when=\"p3\" delay=1000)} Try moving the position of the three points and\nobserve what happens to the [{.yellow}angle](target:angle) at the top of the triangle.\n_{span.reveal(when=\"move\")} It seems like it is always [[90]]°!_\n_{span.reveal(when=\"blank-0\")} This means that the triangle is\n[[right-angled|equilateral|acute]]._\n:::"
    },
    {
      "id": "thales-1",
      "content": "For Thales, this was a pretty spectacular result. Why should _semicircles_ and\n_right-angled triangles_, two completely different shapes, be linked in this\nfundamental way? He was so awed by his discovery that, according to legend, he\nsacrificed an entire ox to thank the gods.\n\n    figure\n      x-img(src=\"images/temple.svg\" width=400 height=170)\n\nHowever, simply _observing_ a relationship like this was not enough for Thales.\nHe wanted to understand _why_ it is true, and verify that it is _always_ true\n– not just in the few examples he tried.\n\nAn argument that logically explains, beyond any doubt, why something must be\ntrue, is called a [__proof__](gloss:proof). In the following courses you will\nlearn a number of geometric techniques, that will eventually allow us to prove\n_Thales’ theorem_."
    },
    {
      "id": "applications",
      "content": "But geometry is not just useful for proving theorems – it is everywhere around\nus, in nature, architecture, technology and design. We need geometry for\neverything from measuring distances to constructing skyscrapers or sending\nsatellites into space. Here are a few more examples:\n\n::: column(width=200)\n\n    x-img(src=\"images/pyramids.jpg\" credit=\"© Ricardo Liberato\" width=200 height=200)\n\n{.caption} Geometry allowed the ancient Egyptians to construct gigantic,\nperfectly regular pyramids.\n::: column(width=200)\n\n    x-img(src=\"images/sextant.jpg\" width=200 height=200)\n\n{.caption} Sailors use sextants to determine their location while at sea, using\nangles formed by the sun or stars.\n::: column(width=200)\n\n    x-img(src=\"images/video-game.jpg\" credit=\"© Eric Lascoña\" width=200 height=200)\n\n{.caption} Geometry is needed to create realistic video game or movie graphics.\n::: column(width=200)\n\n    x-img(src=\"images/plane.jpg\" width=200 height=200)\n\n{.caption} Geometry can help design and test new airplane models, making them\nsafer and more efficient.\n::: column(width=200)\n\n    x-img(src=\"images/cctv.jpg\" lightbox width=200 height=200)\n\n{.caption} Geometry was key when designing this skyscraper in Beijing – and to\nmake sure it won’t fall over.\n::: column(width=200)\n\n    x-img(src=\"images/satellite.jpg\" lightbox credit=\"NASA\" width=200 height=200)\n\n{.caption} Geometry allows us to predict the position of stars, planets and\nsatellites orbiting Earth.\n:::\n\nIn this and the following courses, you will learn about many different tools and\ntechniques in geometry, that were discovered by mathematicians over the course\nof many centuries. We will also see how these techniques can be used to solve\nimportant problems in the real world."
    },
    {
      "section": "axioms",
      "id": "points",
      "content": "## Euclid’s Axioms\n\n\nBefore we can write any proofs, we need some common terminology that will make\nit easier to talk about geometric objects. These are not particularly exciting,\nbut you should already know most of them:\n\n::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      circle.move.pulsate(cx=100 cy=30 target=\"move\" label=\"P\")\n      circle.move.pulsate(cx=150 cy=100 target=\"move\" label=\"Q\")\n      circle.move.pulsate(cx=40 cy=75 target=\"move\")\n      circle(x=\"point(200,50)\" target=\"no-move\")\n      circle(x=\"point(70,120)\" target=\"no-move\" label=\"R\")\n\n::: column.grow\nA [__point__](gloss:point) is a specific location in space. Points describe a\nposition, but have no _size_ or _shape_ themselves. They are labelled using\ncapital letters.\n\n{.r} In Mathigon, [large, solid dots](target:move) indicate interactive points\nyou can move around, while [smaller, outlined dots](target:no-move) indicate\nfixed points which you can’t move.\n[Continue](btn:next)\n:::"
    },
    {
      "id": "lines",
      "content": "::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      path.green(x=\"line(point(60,100),point(90,40))\" label=\"a\")\n      path.red(x=\"line(point(50,120),point(150,150))\" label=\"b\")\n      circle.move(name=\"P\" cx=170 cy=55 label=\"P\")\n      circle.move(name=\"Q\" cx=200 cy=130 label=\"Q\")\n      path.yellow(x=\"line(P,Q)\")\n\n::: column.grow\n\nA [__line__](gloss:line) is a set of infinitely many points that extend forever\nin both directions. Lines are always straight and, just like points, they don’t\ntake up any space – they have no _width_.\n\n{.r} Lines are labeled using lower-case letters like _a_ or _b_. We can also\nrefer to them using two points that lie on the line, for example\n<span class=\"math\"><mover><mi>PQ</mi><mo value=\"↔\">↔</mo></mover></span> or\n<span class=\"math\"><mover><mi>QP</mi><mo value=\"↔\">↔</mo></mover></span>. The\norder of the points does not matter.\n[Continue](btn:next)\n\n:::"
    },
    {
      "id": "segments",
      "content": "::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      circle.move(name=\"a\" cx=50 cy=50 label=\"A\")\n      circle.move(name=\"b\" cx=90 cy=120 label=\"B\")\n      path.red(x=\"segment(a,b)\")\n      circle.move(name=\"c\" cx=120 cy=40 label=\"C\")\n      circle.move(name=\"d\" cx=210 cy=110 label=\"D\")\n      path.blue(x=\"segment(c,d)\")\n\n::: column.grow\n{.r} A [__line segment__](gloss:line-segment) is the part of a line between two\npoints, without extending to infinity. We can label them just like lines, but\nwithout arrows on the bar above: `bar(AB)` or `bar(BA)`. Like, before the order\nof the points does not matter.\n[Continue](btn:next)\n:::"
    },
    {
      "id": "rays",
      "content": "::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      circle.move(name=\"c\" cx=40 cy=120)\n      circle.move(name=\"d\" cx=60 cy=40)\n      path.green(x=\"ray(c,d)\")\n      circle.move(name=\"a\" cx=90 cy=90 label=\"A\")\n      circle.move(name=\"b\" cx=190 cy=130 label=\"B\")\n      path.yellow(x=\"ray(a,b)\")\n\n::: column.grow\nA [__ray__](gloss:ray) is something in between a _line_ and a _line segment_:\nit only extends to infinity on one side. You can think of it like _sunrays_:\nthey start at a point (the sun) and then keep going forever.\n\n{.r} When labelling rays, the arrow shows the direction where it extends to\ninfinity, for example `vec(AB)`. This time, the order of the points _does_ matter.\n[Continue](btn:next)\n:::"
    },
    {
      "id": "circles",
      "content": "::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      circle.move(name=\"a\" cx=50 cy=60)\n      path(x=\"segment(a,a.add(point(1,1).unitVector.scale(40)))\" target=\"radius\")\n      path.red(x=\"circle(a,40)\")\n\n      circle.move(name=\"b\" cx=170 cy=90)\n      path(x=\"segment(b,b.shift(60,0))\" target=\"radius\")\n      path.blue(x=\"circle(b,60)\")\n\n::: column.grow\n{.r} A [__circle__](gloss:circle) is the collection of points that all have the\nsame [distance](target:radius) from a point in the center. This distance is\ncalled the [__radius__](gloss:circle-radius).\n[Continue](btn:next)\n:::"
    },
    {
      "id": "congruence",
      "goals": "pair-a-a pair-b-b pair-c-c pair-d-d pair-e1-e2 pair-e1-e3 pair-e2-e3 pair-f-f",
      "content": "### Congruence\n\n::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      path.fill.green(name=\"x\" x=\"polygon(point(30,30),point(80,20),point(100,80),point(70,110),point(30,90))\" label=\"A\" label-class=\"white\" target=\"move\")\n      path.fill.green.light(x=\"x.rotate(1).shift(190,10)\" target=\"move\")\n      path.fill.green#congruent-path(x=\"x.rotate(1).shift(190,10)\" target=\"move\" label=\"B\" label-class=\"white\")\n\n::: column.grow\nThese two shapes basically look identical. They have the same size\nand shape, and we could [{.green}turn and slide](target:move) one of them to exactly\nmatch up with the other. In geometry, we say that the two shapes are\n[__congruent__](gloss:congruent).\n\nThe symbol for congruence is _{span(voice=\"this\")}`≅`_, so we would say that `A ≅ B`.\n:::\n\nHere are a few different geometric objects – connect all pairs that are\ncongruent to each other. Remember that _more than two_ shapes might be\ncongruent, and some shapes might not be congruent to _any_ others:\n\n    svg.congruence(width=760 height=320 viewBox=\"0 0 760 320\")\n      g.lines\n      g.obj(data-q=\"a\" cx=\"145.2\" cy=\"166.1\")\n    \tpolygon(points=\"119.6,146.6 131.7,186.9 170.9,175.1 139.7,159.5 154.4,145.2\")\n      g.obj(data-q=\"a\" cx=\"376.4\" cy=\"73.5\")\n    \tpolygon(points=\"388.1,44.7 353.1,68.2 376,102.2 381.7,67.8 399.7,77.6\")\n      g.obj(data-q=\"b\" cx=\"93\" cy=\"258\")\n    \trect(x=\"80\" y=\"245\" transform=\"matrix(0.5953 0.8035 -0.8035 0.5953 244.9541 29.6955)\" width=26 height=26)\n      g.obj(data-q=\"b\" cx=\"264\" cy=\"200\")\n        rect(x=\"251\" y=\"187\" transform=\"matrix(0.1863 0.9825 -0.9825 0.1863 411.3196 -96.636)\" width=26 height=26)\n      g.obj(data-q=\"c\" cx=\"77\" cy=\"59.5\")\n    \trect(x=\"54\" y=\"36.5\" transform=\"matrix(0.9159 0.4013 -0.4013 0.9159 30.3505 -25.8995)\" width=46 height=46)\n      g.obj(data-q=\"c\" cx=\"238\" cy=\"78\")\n        rect(x=\"215\" y=\"55\" transform=\"matrix(0.828 -0.5607 0.5607 0.828 -2.8011 146.8683)\" width=46 height=46)\n      g.obj(data-q=\"d\" cx=\"510\" cy=\"55\")\n    \tpolyline(points=\"539.9,68.9 489.7,78.3 506.7,27.5\")\n        path(d=\"M523.5,72c-2.4-12.7-11.4-22.4-22.9-26.3\")\n      g.obj(data-q=\"d\" cx=\"501\" cy=\"258\")\n    \tpolyline(points=\"497.8,287.8 475.2,242.1 528.7,244.7\")\n        path(d=\"M490.4,272.9c11.6-5.7,18.5-17.1,19.1-29.1\")\n      g.obj(data-q=\"e1\" cx=\"417\" cy=\"166.8\")\n        ellipse(transform=\"matrix(0.9464 -0.3229 0.3229 0.9464 -31.5073 143.6043)\" cx=\"417\" cy=\"166.8\" rx=\"30.7\" ry=\"17.1\")\n      g.obj(data-q=\"e2\" cx=\"585\" cy=\"138.2\")\n        ellipse(transform=\"matrix(0.4618 -0.887 0.887 0.4618 192.197 593.2707)\" cx=\"585\" cy=\"138.2\" rx=\"17.1\" ry=\"30.7\")\n      g.obj(data-q=\"e3\" cx=\"618\" cy=\"250.2\")\n        ellipse(transform=\"matrix(0.9089 -0.4171 0.4171 0.9089 -48.0564 280.5469)\" cx=\"618\" cy=\"250.2\" rx=\"17.1\" ry=\"30.7\")\n      g.obj(data-q=\"f\" cx=\"670.8\" cy=\"72.5\")\n        line(x1=\"649.4\" y1=\"65.5\" x2=\"692.1\" y2=\"79.5\")\n        path(d=\"M647.6,72c-3.6-1.2-5.5-5-4.3-8.5s5-5.5,8.5-4.3c3.6,1.2,5.5,5,4.3,8.5C655,71.3,651.1,73.2,647.6,72z\")\n        path(d=\"M689.7,85.8c3.6,1.2,7.4-0.8,8.5-4.3s-0.8-7.4-4.3-8.5c-3.6-1.2-7.4,0.8-8.5,4.3C684.2,80.8,686.2,84.7,689.7,85.8z\")\n      g.obj(data-q=\"f\" cx=\"705.1\" cy=\"190.6\")\n        line(x1=\"693.9\" y1=\"210.1\" x2=\"716.4\" y2=\"171.1\")\n        path(d=\"M699.9,213.2c-1.9,3.2-6,4.3-9.2,2.5c-3.2-1.9-4.3-6-2.5-9.2c1.9-3.2,6-4.3,9.2-2.5C700.7,205.8,701.8,209.9,699.9,213.2z\")\n        path(d=\"M722.1,174.8c1.9-3.2,0.8-7.4-2.5-9.2c-3.2-1.9-7.4-0.8-9.2,2.5c-1.9,3.2-0.8,7.4,2.5,9.2C716.1,179.1,720.2,178,722.1,174.8z\")\n      g.obj(data-q=\"g\" cx=\"357\" cy=\"265\")\n    \tpolyline(points=\"372.2,298.7 336,271.4 354.3,230.3\")\n    \tpath(d=\"M362.1,291.2c4.3-5.6,6.9-12.6,6.9-20.2c0-13.4-8-25-19.5-30.1\")"
    },
    {
      "id": "congruence-1",
      "content": "Two line segments are congruent if they [[have the same length|intersect]]. Two\nangles are congruent if they [[have the same size|meet at a point]] (in degrees).\n\nNote the that _“congruent”_ does not mean _“equal”_. For example, congruent\nlines and angles don’t have to point in the same direction. Still, _congruence_\nhas many of the same properties of _equality_:\n\n* Congruence is __symmetric__: if `X ≅ Y` then also `Y ≅ X`.\n* Congruence is __reflexive__: any shape is congruent to itself. For example, `A ≅ A`.\n* Congruence is __transitive__: if `X ≅ Y` and `Y ≅ Z` then also `X ≅ Z`."
    },
    {
      "id": "parallel",
      "content": "### Parallel and Perpendicular\n\n::: column(width=240)\n\n    x-geopad(width=240 height=200): svg\n      path.red(x=\"line(point(30,100),point(70,20))\" name=\"l1\" mark=\"arrow\" label=\"a\")\n      path.red(x=\"l1.shift(40,10)\" mark=\"arrow\" label=\"b\")\n      path.red(x=\"l1.shift(100,30)\" mark=\"arrow\" label=\"c\")\n      path.yellow(x=\"line(point(30,120),point(160,140))\" name=\"l2\" mark=\"arrow2\" label=\"d\")\n      path.yellow(x=\"l2.shift(-30,40)\" mark=\"arrow2\" label=\"e\")\n\n::: column.grow\n\nTwo straight lines that never intersect are called [__parallel__](gloss:parallel).\nThey point into the same direction, and the distance between them is always\n[[the same|increasing|decreasing]].\n\n{.reveal(when=\"blank-0\")} A good example of parallel lines in real life are\n_railroad tracks_. But note that more than two lines can be parallel to each\nother!\n\n{.reveal(when=\"blank-0\")} In diagrams, we denote parallel lines by adding one or\nmore small arrows. In this example, __{.m-red}`a ∥ b ∥ c`__ and\n__{.m-yellow}`d ∥ e`__. The `∥` symbol simply means _“is parallel to”_.\n\n:::"
    },
    {
      "id": "perpendicular",
      "content": "::: column(width=240)\n\n    x-geopad(width=240 height=160): svg\n      path(x=\"angle(point(60,50),point(50,100),point(100,110))\")\n      path.blue(x=\"line(point(50,100),point(100,110))\" label=\"a\")\n      path.green(x=\"line(point(50,100),point(70,0))\" label=\"b\")\n\n::: column.grow\n\nThe opposite of _parallel_ is two lines meeting at a 90° angle (right angle).\nThese lines are called [__perpendicular__](gloss:perpendicular).\n\n{.r} In this example, we would write  _{.b.m-blue}a_ `⊥` _{.b.m-green}b_. The\n`⊥` symbol simply means _“is perpendicular to”_.\n\n:::"
    },
    {
      "id": "euclid",
      "content": "### Euclid’s Axioms\n\n::: column.grow\n\nGreek mathematicians realised that to write formal proofs, you need some sort of\n_starting point_: simple, intuitive statements, that everyone agrees are true.\nThese are called [__axioms__](gloss:axiom) (or _postulates_).\n\nA key part of mathematics is combining different axioms to prove more complex\nresults, using the rules of logic.\n\nThe Greek mathematician [Euclid of Alexandria](bio:euclid), who is often called\nthe _father of geometry_, published the five axioms of geometry:\n\n::: column(width=220)\n\n    img(src=\"images/euclid.jpg\" width=220 height=269)\n\n{.caption} Euclid of Alexandria\n\n:::\n\n::: column(width=220 parent=\"padded-thin\")\n\n    x-geopad(width=220 height=160): svg\n      circle.move(name=\"a\" cx=30 cy=130 target=\"1_point\")\n      circle.move(name=\"b\" cx=190 cy=30 target=\"1_point\")\n      path.red(x=\"segment(a,b)\" target=\"1_line\")\n\n{.text-center }__First Axiom__<br>\nYou can join any [two points](target:1_point) using exactly one straight\n[{.red} line segment](target:1_line).\n\n::: column(width=220)\n\n    x-geopad(width=220 height=160): svg\n      circle.move(name=\"c\" cx=60 cy=100)\n      circle.move(name=\"d\" cx=180 cy=60)\n      path.blue(x=\"line(c,d)\" target=\"2_line\")\n      path(x=\"segment(c,d)\" target=\"2_segment\")\n      path.blue.transparent(x=\"segment(c,d)\" target=\"2_line\")\n\n{.text-center }__Second Axiom__<br>\nYou can extend any [line segment](target:2_segment) to an\n[{.blue} infinitely long line](target:2_line).\n\n::: column(width=220)\n\n    x-geopad(width=220 height=160): svg\n      circle.move(name=\"e\" cx=120 cy=80 target=\"3_center\" label=\"P\")\n      circle.move(name=\"f\" cx=170 cy=130)\n      path(x=\"segment(e,f)\" label=\"r\" target=\"3_radius\")\n      path.green(x=\"circle(e,distance(e,f))\" target=\"3_circle\")\n\n{.text-center }__Third Axiom__<br>\nGiven a [point _P_](target:3_center) and a [distance _r_](target:3_radius), you can draw a\n[{.green} circle](target:3_circle) with centre _P_ and radius _r_.\n\n::: column(width=220)\n\n    x-geopad(width=220 height=160): svg\n      circle.move(name=\"x\" cx=50 cy=100)\n      circle(hidden name=\"xa\" x=\"x.translate(point(110,80).subtract(x).rotate(pi/4).unitVector.scale(50))\")\n      circle(hidden name=\"xb\" x=\"x.translate(point(110,80).subtract(x).rotate(-pi/4).unitVector.scale(50))\")\n      path.fill.orange(x=\"angle(xb,x,xa)\" target=\"4_angle\")\n      path.dark(x=\"segment(x,xa)\")\n      path.dark(x=\"segment(x,xb)\")\n\n      circle.move(name=\"y\" cx=190 cy=60)\n      circle(hidden name=\"ya\" x=\"y.translate(point(110,80).subtract(y).rotate(pi/4).unitVector.scale(50))\")\n      circle(hidden name=\"yb\" x=\"y.translate(point(110,80).subtract(y).rotate(-pi/4).unitVector.scale(50))\")\n      path.fill.orange(x=\"angle(yb,y,ya)\" target=\"4_angle\")\n      path.dark(x=\"segment(y,ya)\")\n      path.dark(x=\"segment(y,yb)\")\n\n{.text-center }__Fourth Axiom__<br>\nAny two [{.orange} right angles](target:4_angle) are congruent.\n\n::: column(width=220)\n\n    x-geopad(width=220 height=160): svg\n      circle.move(name=\"g\" cx=160 cy=60 target=\"5_point\" label=\"P\")\n      path(name=\"line5\" x=\"line(point(50,80),point(130,140))\" target=\"5_line\" label=\"L\")\n      path.yellow(x=\"line5.parallel(g)\" target=\"5_parallel\")\n\n{.text-center }__Fifth Axiom__<br>\nGiven a [line _L_](target:5_line) and a [point _P_](target:5_point) not on _L_, there is exactly\n[{.yellow} one line](target:5_parallel) through _P_ that is [parallel](gloss:parallel) to _L_.\n:::\n\n{.r} [Continue](btn:next)"
    },
    {
      "id": "jefferson",
      "content": "::: column.grow\nEach of these axioms looks pretty obvious and self-evident, but together they\nform the foundation of geometry, and can be used to deduce almost everything\nelse. According to none less than [Isaac Newton](bio:newton), _“it’s the glory\nof geometry that from so few principles it can accomplish so much”_.\n\nEuclid published the five axioms in a book _“Elements”_. It is the first example\nin history of a systematic approach to mathematics, and was used as mathematics\ntextbook for thousands of years.\n\n::: column(width=220)\n\n    x-img(src=\"images/elements.jpg\" width=220 height=330 lightbox)\n\n:::\n\nOne of the people who studied Euclid’s work was the American President [Thomas\nJefferson](bio:jefferson). When writing the Declaration of Independence in 1776,\nhe wanted to follow a similar approach. He begins by stating a few, simple\n“axioms” and then “proves” more complex results:\n\n{div.parchment.voice} “We hold these truths to be self-evident: that all men are created equal,\nthat they are endowed by their Creator with certain unalienable Rights, that among these are Life,\nLiberty and the pursuit of Happiness.”\n\n{.text-center.follows.no-voice} `=>`\n\n{div.parchment.voice} We, therefore … declare, that these United Colonies are, and of right ought\nto be, free and independent states.”\n\nThis is just one example where Euclid’s ideas in mathematics have inspired\ncompletely different subjects."
    },
    {
      "section": "construction",
      "id": "measuring",
      "content": "## Ruler and Compass Construction\n\n\nYou might have noticed that Euclid’s five axioms don’t contain anything about\n_measuring_ distances or angles. Up to now, this has been a key part of\ngeometry, for example to calculate areas and volumes.\n\n::: column.grow\nHowever, at the times of Thales or Euclid, there wasn’t a universal framework of\nunits like we have today. Distances were often measured using body parts, for\nexample finger widths, or arm lengths. These are not very accurate and they vary\nfor different people.\n\nTo measure longer distances, architects or surveyors used _knotted cords_: long\npieces of string that contained many knots at equal intervals. But these were\nalso not perfectly accurate, and different string had the knots placed at\nslightly different distances.\n\n    figure: x-img(src=\"images/knots.jpg\" width=370 height=23 style=\"opacity: 0.8\")\n\n::: column(width=200)\n\n    x-img(src=\"images/units.png\" width=200 height=336)\n\n:::\n\nGreek mathematicians didn’t want to deal with these approximations. They were\nmuch more interested in the underlying laws of geometry, than in their practical\napplications.\n\nThat’s why they came up with a much more idealised version of our universe: one\nin which points can have no size and lines can have no width. Of course, it is\n[[impossible|very difficult]] to draw these on paper. Visible points will always\ntake up some space, and lines will always have some width. This is why our\ndrawings are always just “approximations”."
    },
    {
      "id": "tools",
      "goals": "play-l1 play-c1",
      "content": "figure: img(src=\"images/divider-1.svg\" width=760 height=42)\n\nEuclid’ axioms basically tell us _what’s possible_ in his version of geometry.\nIt turns out that we just need two very simple tools to be able to sketch this\non paper:\n\n::: column(width=320)\n\n    x-geopad.r(width=300 height=240)\n      svg\n        circle.move(name=\"a\" cx=50 cy=190)\n        circle.move(name=\"b\" cx=250 cy=50)\n        path.red(name=\"l1\" x=\"segment(a,b)\" hidden)\n      x-play-btn\n\n{.text-center} A __straight-edge__ is like a ruler but without any markings. You\ncan use it to connect two points (as in Axiom 1), or to extend a line segment\n(as in Axiom 2).\n\n::: column.reveal(width=300 when=\"play-l1\")\n\n    x-geopad.r(width=300 height=240)\n      svg\n        circle.move(name=\"c\" cx=150 cy=120)\n        circle.move(name=\"d\" cx=250 cy=150)\n        path(x=\"segment(c,d)\")\n        path.red(name=\"c1\" x=\"arc(c,d,1.99*pi)\" hidden)\n      x-play-btn\n\n{.text-center} A __compass__ allows you to draw a circle of a given size around\na point (as in Axiom 3).\n:::"
    },
    {
      "id": "construction",
      "content": "Axioms 4 and 5 are about comparing properties of shapes, rather than drawing\nanything. Therefore they don’t need specific tools.\n\n::: column.grow\nYou can imagine that Greek mathematicians were thinking about Geometry on the\nbeach, and drawing different shapes in the sand: using long planks as\nstraight-edge and pieces of string as compass.\n\nEven though these tools look very primitive, you can draw a great number of\nshapes with them. This became almost like a puzzle game for mathematicians:\ntrying to find ways to “construct” different geometric shapes using just a\nstraight-edge and compass.\n\n::: column(width=340)\n\n    x-img(src=\"images/archimedes.jpg\" width=340 height=265)\n\n{.caption} The Greek Mathematician [Archimedes](bio:archimedes) was studying\nGeometry when he was killed by Roman invaders. His last words were “do not\ndisturb my circles”.\n:::"
    },
    {
      "id": "equilateral",
      "goals": "segment0 segment1 segment2 circle1 circle2",
      "content": "::: column(width=320)\n\n    x-geopad.sticky(width=320 tools=\"move|line|circle\" intersections projections=\"no\"): svg\n\n::: column.grow\n{.task} Draw an [equilateral triangle](gloss:equilateral-triangle) using just a\nstraight-edge and compass.\n\nTo begin, draw a line segment anywhere in a box on the right. With the [{.no-margins} line\ntool](->#equilateral_.tool:nth-child(3)) selected, simply drag from start to end. This segment will\nbe one of the sides of the triangle.\n\n{.reveal(when=\"segment0\")} Next, draw two circles that have one of the endpoints of the line\nsegments as center, and go through the other endpoint. With the [{.no-margins} circle\ntool](->#equilateral_.tool:nth-child(5)) selected, simply drag from one endpoint to the other.\n\n{.reveal(when=\"circle1 circle2\")} We already have two vertices of the triangle,\nand the third one is the intersection of the two circles. Use the line tool\nagain to draw the two missing sides and complete the triangle.\n\n{.reveal(when=\"segment1 segment2\")} Now [these two sides](target:a) and\n[these two sides](target:b) are each [[radii|diameters|circumferences]] of the\nsame circle, _{span.reveal(when=\"blank-0\")} so they must have the same length.\nIn other words, all three sides of the triangle are congruent – and therefore it\nis indeed an equilateral triangle._\n:::"
    },
    {
      "id": "perp-bisector",
      "content": "### Midpoints and Perpendicular Bisectors\n\n{.todo} COMING SOON – Constructing Midpoints and Perpendicular Bisectors\n\n    // A midpoint is a point on a line segment that divides it into two congruent\n    // segments. If A,B, and C are collinear, and AB=BC, then B is the midpoint of\n    // `bar(AC)`.\n    //\n    // A line, segment, or ray that passes through a midpoint of another segment\n    // at a right angle is called a __perpendicular bisector__. `bar(DE)` is the\n    // perpendicular bisector of `bar(AC)`, so `bar(AB) ~= bar(BC)` and `bar(AC) ⊥ bar(DE)`."
    },
    {
      "id": "angle-bisector",
      "content": "### Angle Bisectors\n\n{.todo} COMING SOON – Constructing Angle Bisectors\n\n    // When two rays have the same endpoint, an angle is created.\n    //\n    // Here, `vec(BA)` and `vec(BC)` meet to form an angle. An angle is labeled with an\n    // “∠” symbol in front of the three letters used to label it. This angle can be\n    // labeled `/_ABC` or `/_CBA`. Always put the vertex (the common endpoint of the\n    // two rays) in the middle of the three points. It doesn’t matter which side point\n    // is written first.\n    //\n    // An __angle bisector__ is a ray that divides an angle into two congruent angles,\n    // each having a measure exactly half of the original angle. Every angle has\n    // exactly one angle bisector.\n    //\n    // Angle Bisector Theorem: If a point is on the bisector of an angle, then the\n    // point is equidistant from the sides of the angle.\n    // In other words, if BD←→ bisects ∠ABC,BE−→−⊥ED, and BF−→−⊥DF, then ED=DF."
    },
    {
      "id": "impossible",
      "content": "### Impossible Constructions\n\nIn the next chapter, we will see even more shapes that can be constructed\nlike this. However, there is a limit to Euclidean geometry: some constructions\nare simply impossible using just straight-edge and compass.\n\n::: column.grow\nAccording to legend, the city of Delos in ancient Greece was once faced with a\nterrible plague. The oracle in Delphi told them that this was a punishment from\nthe gods, and the plague would go away if they built a new altar for their\ntemple that was _exactly twice_ the volume of the existing one.\n\n    figure: img(src=\"images/altar.svg\" width=320 height=140)\n\n::: column(width=300)\n\n    x-img(src=\"images/delphi.jpg\" credit=\"© De Agostini Editorial\" width=300 height=239)\n\n{.caption} A reconstruction of a temple in Delphi\n:::\n\nNote that _doubling the volume_ is not the same as _doubling an edge of the\ncube_. In fact, if the [[three-dimensional|two-dimensional|one-dimensional]] volume\nincreases by a factor of 2, the [[one-dimensional|three-dimensional|two-dimensional]]\nedge of the cube will increase by a factor of `root(2,3)`."
    },
    {
      "id": "impossible-1",
      "content": "This still sounds pretty simple, but doubling the cube is actually impossible\nin [Euclidean geometry](gloss:euclidean-geometry), using only straight-edge and\ncompass! For the citizens of Delos this unfortunately meant that all hope was\nlost. There are two other constructions that are famously impossible.\nMathematicians devoted a great amount of time trying to find a solution – but\nwithout success:\n\n::: column(width=220)\n\n    figure: img(src=\"images/impossible-1.svg\" width=200 height=180)\n\n{.text-center} __{.m-red} Trisecting the angle__<br>\nWe already know how to bisect angles. However it is impossible to similarly\nsplit an angle into _three_ equal parts.\n\n::: column(width=220)\n\n    figure: img(src=\"images/impossible-2.svg\" width=200 height=180)\n\n{.text-center} __{.m-blue} Doubling the cube__<br>\nGiven the edge of a cube, it is impossible to construct the edge of another cube\nthat has exactly twice the volume.\n\n::: column(width=220)\n\n    figure: img(src=\"images/impossible-3.svg\" width=200 height=180)\n\n{.text-center} __{.m-green} Squaring the circle__<br>\nGiven a circle, it is impossible to construct a square that has exactly the same\narea.\n:::\n\nNote that these problems can all be solved quite easily with algebra, or using\nmarked rulers and protractors. But they are impossible if you are just allowed to\nuse straight-edge and compass."
    },
    {
      "section": "more-construction",
      "sectionStatus": "dev",
      "content": "## Even More Constructions\n\n\nConstructing a Football Pitch\n\nConstructing Parallel and Perpendicular Lines\n\nConstructing a Square\n\nPerpendicular Line Construction; through a Point NOT on the Line\nDraw a horizontal line and a point above that line. Label the line l and the point A.\n\n* Take the compass and put the pointer on A. Open the compass so that it reaches beyond line l. Draw an arc that intersects the line twice.\n* Move the pointer to one of the arc intersections. Widen the compass a little and draw an arc below the line. Repeat this on the other side so that the two arc marks intersect.\n* Take your straightedge and draw a line from point A to the arc intersections below the line. This line is perpendicular to l and passes through A.\n\nTheorem #1: If two lines are parallel and a third line is perpendicular to one of the parallel lines, it is also perpendicular to the other parallel line. Or, if l || m and l⊥n, then n⊥m.\n\nTheorem #2: If two lines are perpendicular to the same line, they are parallel to each other.\n\nDistance Between Parallel Lines\nThe shortest distance between two parallel lines is the length of the perpendicular segment between them. It doesn’t matter which perpendicular line you choose, as long as the two points are on the lines. Recall that there are infinitely many perpendicular lines between two parallel lines."
    },
    {
      "section": "proofs",
      "sectionStatus": "dev",
      "content": "## Angles and Proofs\n\n\nTODO"
    },
    {
      "id": "origami",
      "section": "origami",
      "sectionBackground": "dark",
      "content": "## Origami and Paper Folding\n\n\nUsing straight-edge and compass is not the only way to construct geometric\nshapes. Another technique uses no tools at all: __Origami__.\n\nThe word _Origami_ _{span.no-voice}(折り紙)_ comes from the Japanese _oru_ (to fold) and _kami_\n(paper). The goal is to make objects out of one or more sheets of paper,\nwithout any additional tools like glue or scissors. You can create incredibly\nbeautiful and impressive designs – all of these figures were built using nothing\nbut rectangular sheets of paper:\n\n::: column(width=186)\n\n    x-img(src=\"images/origami/origami-1.jpg\" lightbox credit=\"© Dirk Eisner\" width=186 height=200)\n\n::: column(width=186)\n\n    x-img(src=\"images/origami/origami-2.jpg\" lightbox credit=\"© Dirk Eisner, Thomas Hull\" width=186 height=200)\n\n::: column(width=186)\n\n    x-img(src=\"images/origami/origami-3.jpg\" lightbox credit=\"© ServeSmasher (Flickr)\" width=186 height=200)\n\n::: column(width=186)\n\n    x-img(src=\"images/origami/origami-4.jpg\" lightbox credit=\"© Dirk Eisner\" width=186 height=200)\n\n::: column(width=186)\n\n    x-img(src=\"images/origami/origami-5.jpg\" lightbox credit=\"© Meenakshi Mukerji\" width=186 height=200)\n\n::: column(width=186)\n\n    x-img(src=\"images/origami/origami-6.jpg\" lightbox credit=\"© Meenakshi Mukerji, Dennis Walker\" width=186 height=200)\n\n:::"
    },
    {
      "id": "crane",
      "goals": "video",
      "content": "Building shapes like this can take a lot of time, and it is important to be\nextremely accurate. But with a bit of practice, you can do it yourself!\n\n::: column.sticky-video(width=360)\n\n    x-video(src=\"https://static.mathigon.org/videos/crane.mp4\" poster=\"images/crane.jpg\" width=360 height=360 controls)\n\n::: column.grow\n{.step.active(data-t=0)} You just need a square sheet of paper. To start, fold\nthe sheet along its two diagonals.\n\n{.step(data-t=16)} Next, fold it along its horizontal and vertical centers – but\nin the opposite direction.\n\n{.step(data-t=38)} Now take two opposite corners of the sheet and bring them\ntogether as shown. This forms a smaller square which is open at the bottom.\n\n{.step(data-t=51)} Fold the left and right corners of the square towards its\ncenter line. Then turn it over and repeat the same.\n\n{.step(data-t=83)} Now fold the top triangle down, along the horizontal line,\nand then open up the folds from the last two steps.\n\n{.step(data-t=99)} This one is difficult: take the bottom corner of the paper\nand fold it all the way up, along the horizontal line you just created. Some of\nthe folds you made before will be inverted. Then turn over and repeat.\n\n{.step(data-t=135)} Make sure the two “legs” are pointing down. Then take the\nleft and right corner and fold them towards the center line. Turn over and\nrepeat.\n\n{.step(data-t=172)} You’re almost done! Slightly open the right side, and fold\nthe head up towards the top. You will have to turn it inside out. Then repeat\nthe same with the tail on the left.\n\n{.step(data-t=203)} Reverse the fold as shown to create a beak. You can decide\nhow long you want it to be by picking the location of the fold.\n\n{.step(data-t=215)} Finally, fold down the two wings, and pull them apart.\n:::"
    },
    {
      "id": "crane-1",
      "content": "This _crane_ is one of the oldest and most famous Origami models. We have many\nmore [instructions for Origami models](/origami) you can try!\n\n    figure: x-img(src=\"images/origami-1.jpg\" credit=\"© Meenakshi Mukerji, Joel Lord, Dirk Eisner, Angie Harms, Michal Kosmulski\" width=760 height=118)"
    },
    {
      "id": "origami-axioms",
      "content": "### Origami Axioms\n\nJust like drawing with straight-edge and compass, there are a few axioms of\ndifferent _folds_ that are possible with origami. They were first listed in\n1992, by the Italian-Japanese mathematician Humiaki Huzita.\n\n::: column(width=220 parent=\"padded-thin origami-axioms\")\n\n    x-video(src=\"images/origami/axiom-1.mp4\" width=220 height=220)\n\n{.text-center} You can fold a line connecting any two points.\n::: column(width=220)\n\n    x-video(src=\"images/origami/axiom-2.mp4\" width=220 height=220)\n\n{.text-center} You can fold any point _P_ onto any other point _Q_. This creates\nthe [[perpendicular bisector|angle bisector|midpoint]] of the line `bar(PQ)`.\n::: column(width=220)\n\n    x-video(src=\"images/origami/axiom-3.mp4\" width=220 height=220)\n\n{.text-center} We can fold any two lines onto each other. If the lines\nintersect, this creates the [[angle bisector|perpendicular bisector|midpoint]]\nof the angle between the two lines.\n::: column(width=220)\n\n    x-video(src=\"images/origami/axiom-4.mp4\" width=220 height=220)\n\n{.text-center} Given a point _P_ and a line _L_, we can make a fold\nperpendicular to _L_ passing through _P_.\n::: column(width=220)\n\n    x-video(src=\"images/origami/axiom-5.mp4\" width=220 height=220)\n\n{.text-center} Given two points _P_ and _Q_ and a line _L_, we can make a fold\nthat passes through _P_ and places _Q_ onto _L_.\n::: column(width=220)\n\n    x-video(src=\"images/origami/axiom-6.mp4\" width=220 height=220)\n\n{.text-center} Given any two points _P_ and _Q_ and any two lines _K_ and _L_,\nwe can make a fold that places point _P_ onto line _K_ and at the same time\nplaces point _Q_ onto line _L_.\n::: column(width=220)\n\n    x-video(src=\"images/origami/axiom-7.mp4\" width=220 height=220)\n\n{.text-center} Given a point _P_ and two lines _K_ and _L_, we can fold a line\nperpendicular to _K_ that places _P_ onto _L_.\n:::"
    },
    {
      "id": "origami-axioms-1",
      "content": "It turns out that these axioms are even more powerful than the Euclidean ones.\nIt is possible to trisect angles and double cubes using just paper folding!\nOf course, it is impossible to fold any _curved_ lines, and you still can’t\nsquare the circle with origami.\n\n    figure: x-img(src=\"images/origami-2.jpg\" credit=\"© Dirk Eisner, Meenakshi Mukerji, noricum, fdecomite\" width=760 height=123)"
    },
    {
      "id": "origami-applications",
      "goals": "video",
      "content": "### Applications of Origami\n\nOrigami is an ancient art, and for the longest time, it was mostly a recreational\npursuit, without real-life applications. However, it turns out that techniques\ndeveloped for Origami can be incredibly useful in technology and engineering:\n\n::: column(width=300)\n\n    x-video(src=\"https://static.mathigon.org/videos/space.mp4\" poster=\"images/space.jpg\" width=300 height=225 credit=\"© Brigham Young University\")\n\n::: column.grow\n\n#### Origami in Space\n\nSatellites need large solar panels to generate power. Unfortunately, the rockets\nthat carry satellites into space only have very limited space for cargo, and\nany additional weight costs a lot of fuel.\n\nOrigami techniques allow solar panels to “unfold” when they reach space. Some\nparticularly clever folds are incredibly compact and require very few motors\nand other mechanical components.\n\n    // One of these is the __Miura Map Fold__, which was invented by _Korio Miura_.\n    // The same is also true for the mirrors of telescopes in space. Larger mirrors\n    // can take better images. Engineers can use Origami to build large mirrors that\n    // can be folded up very efficiently when loaded onto rockets.\n\n:::"
    },
    {
      "id": "origami-applications-3",
      "goals": "video",
      "content": "::: column(width=300)\n\n    x-video(src=\"https://static.mathigon.org/videos/stents.mp4\" poster=\"images/stents.jpg\" width=300 height=225 credit=\"© Virtual Point\")\n\n::: column.grow\n\n#### Origami in Medicine\n\nIn medicine, similar ideas from Origami are used on a much smaller scale. In\n2003, researchers developed _Origami Stents_: tiny tubes that can be inserted\ninto blood vessels. They are initially folded up but can expand inside patients’\nblood in order to enlarge clogged arteries or veins.\n\n:::"
    },
    {
      "id": "origami-applications-1",
      "content": "::: column(width=300)\n\n    x-img(src=\"images/bridge.jpg\" width=300 height=225 credit=\"© Hiroshima University\")\n\n::: column.grow\n\n#### Foldable Bridges\n\nThe British and American military used Origami to develop foldable, mobile\nbridges. These were important for quickly crossing rivers or anti-tank ditches,\nand could be deployed much faster than previous designs.\n\nThey can also be used for disaster relief, to quickly give emergency vehicles\naccess after earthquakes or tsunamis. This image is of a prototype designed at\nHiroshima University in Japan.\n\n:::\n\n    // ---\n    // > id: origami-applications-2\n    // > goals: video\n    //\n    // ::: column(width=300)\n    //\n    // x-video(src=\"https://static.mathigon.org/videos/stadium.mp4\" poster=\"images/stadium.jpg\" width=300 height=225 credit=\"© Mercedes Benz Stadium\")\n    //\n    // ::: column.grow\n    // #### Stadium Roofs\n    //\n    // Bridges are difficult to construct because they have to span large distances\n    // without intermediate support. This also is the case for the roofs of sports\n    // stadiums, which have to cover a large area without being supported by pillars.\n    //\n    // The roof of the new Falcons Stadium in Atlanta consists of eight enormous\n    // modules that can twist to open or close.\n    // :::"
    },
    {
      "id": "origami-applications-4",
      "goals": "video",
      "content": "::: column(width=300)\n\n    x-video(src=\"https://static.mathigon.org/videos/marine.mp4\" poster=\"images/marine.jpg\" width=300 height=225 credit=\"© Harvard University\")\n\n::: column.grow\n\n#### Origami under the Sea\n\nThe depths of the oceans are some of the least explored areas on Earth. Animals\nthat live there are often squishy and delicate, which makes them very hard\nto examine.\n\nHere you can see a “trap” in the shape of a [dodecahedron](gloss:dodecahedron)\nthat can fold around marine organisms, allowing them to be studied. It is\nremotely controlled and only needs a single motor to drive the complex folding\nmotion of its five arms.\n\n:::"
    },
    {
      "id": "origami-applications-5",
      "content": "And there are many more applications of Origami in everyday life: houses\nthat will compress rather than crumble during an earthquake, unfolding airbags\nin cars, self-assembling robots, more efficient packaging, and lightweight\naircraft."
    },
    {
      "id": "origami-wings",
      "goals": "video",
      "content": "### Origami in Nature\n\nIt turns out that we humans are not the only ones harnessing the power of\nOrigami: nature has been doing so for millions of years.\n\nHere you can see the wing of an __earwig__ that can be folded up using an\ningenious pattern. When opened, the size of the wing expands by a factor of 10 –\nthe highest “folding ratio” in the animal kingdom:\n\n::: column(width=300)\n\n    x-img(src=\"images/wing.jpg\" width=300 height=170 credit=\"© ETH Zürich\")\n\n::: column(width=300)\n\n    x-video(src=\"https://static.mathigon.org/videos/wing-animation.mp4\" poster=\"images/wing-animation.jpg\" width=300 height=170 credit=\"© ETH Zürich\")\n\n:::"
    },
    {
      "id": "origami-wings-1",
      "content": "When expanded, the large wings snap into a stable position that allows the\ninsects to fly. But it only takes the lightest touch for the wings to retract.\nWhen folded up, they are compact enough to allow earwigs to tunnel underground.\nMany other insects, bats, leaves and flowers use similar folding patterns to fit\nlarge surfaces into small spaces.\n\nScientists are studying these plants and animals, hoping to mimic their abilities\nin engineering and technology. Potential applications could include foldable\nelectronics in smartphones, expanding solar panels for satellites, or even\nself-folding camping tents."
    },
    {
      "id": "origami-dna",
      "goals": "video",
      "content": "::: column(width=320)\n\n    x-video(src=\"https://static.mathigon.org/videos/dna.mp4\" poster=\"images/dna.jpg\" width=320 height=240 credit=\"© PyMOL\")\n\n::: column.grow\n\nOrigami even appears in your own body: every human cell contains around 2 meters\nof [DNA](gloss:dna), the [molecule](gloss:molecule) that carries all your\ngenetic information. If you could combine the DNA from all cells in your body,\ntheir length would be more than 140 times the distance from Earth to the sun!\n\nTo fit all that DNA in your body, without it getting twisted or torn, every\nstrand is curled, folded, and held in place by special molecules.\n\n:::"
    },
    {
      "id": "origami-dna-1",
      "content": "A similar process is also used by other complex molecules that appear in living\norganisms. For example, __[protein](gloss:protein) folding__ is one of the most\ncomplex problems in biology. Understanding it better can help scientists develop\nnew drugs in the future."
    }
  ],
  "title": "Euclidean Geometry"
}