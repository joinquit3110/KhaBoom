{
  "sections": [
    {
      "id": "intro-0",
      "section": "introduction",
      "description": "Discover the mathematical principles that connect our world – from shaking hands to travel and navigation, colouring maps and social networks.",
      "color": "\"#A7208A\"",
      "level": "Intermediate",
      "next": "probability",
      "content": "# Graphs and Networks\n\n## Introduction\n\n\nEvery day we are surrounded by countless connections and networks: roads and rail tracks, phone\nlines, the internet, electronic circuits and even molecular bonds. There are even _social networks_\nbetween friends and families. Can you think of any other examples?\n\n::: column(width=220 parent=\"padded-thin\")\n\n    x-img(src=\"images/network1.jpg\" width=220 height=220 lightbox)\n\n{.caption} Road and Rail Networks\n\n::: column(width=220)\n\n    x-img(src=\"images/network6.jpg\" width=220 height=220 lightbox)\n\n{.caption} Computer Chips\n\n::: column(width=220)\n\n    x-img(src=\"images/network3.jpg\" width=220 height=220 lightbox)\n\n{.caption} Supply Chains\n\n::: column(width=220)\n\n    x-img(src=\"images/network2.jpg\" width=220 height=220 lightbox)\n\n{.caption} Friendships\n\n::: column(width=220)\n\n    x-img(src=\"images/network7.jpg\" width=220 height=220 lightbox)\n\n{.caption} Neural Connections\n\n::: column(width=220)\n\n    x-img(src=\"images/network4.jpg\" width=220 height=220 lightbox)\n\n{.caption} The Internet\n\n:::"
    },
    {
      "id": "intro",
      "content": "::: column.grow\n\nIn mathematics, all these examples can be represented as [__graphs__](gloss:graph) (not to be\nconfused with the _graph_ of a function). A graph consists of certain _points_ called\n[[vertices|circles|crossings]], some of which are connected by [[edges|boundaries|pairs]].\n\n__Graph theory__ is the study of graphs and their properties. It is one of the most exciting and\nvisual areas of mathematics, and has countless important applications.\n\n::: column(width=180)\n\n    svg#graph0.graph.novertices.noedges(width=180 height=180)\n\n:::"
    },
    {
      "id": "intro-1",
      "content": "We can draw the layout of simple graphs using circles and lines. The position of the vertices and\nthe length of the edges is irrelevant – we only care about _how they are connected_ to each other.\nThe edges can even cross each other, and don’t have to be straight.\n\n::: column(width=200)\n\n    svg.graph(height=120 width=200 style=\"margin: 0 auto .8em\")\n\n{.caption} In some graphs, the edges only go one way. These are called [__directed\ngraphs__](gloss:directed-graph).\n\n::: column(width=200)\n\n    svg.graph(height=120 width=200 style=\"margin: 0 auto .8em\")\n\n{.caption} Some graphs consist of multiple groups of vertices which are not connected with each\nother by edges. These graphs are __disconnected__.\n\n::: column(width=200)\n\n    svg.graph(height=120 width=200 style=\"margin: 0 auto .8em\")\n\n{.caption} Other graphs may contain multiple edges between the same pairs of vertices, or vertices\nwhich are connected to themselves (loops).\n\n:::\n\n    // TODO maybe include examples of graphs with edges crossing, curved edges, etc.\n    // could include an \"is this a graph?\" quiz"
    },
    {
      "id": "intro-2",
      "content": "We can create new graphs from an existing graph by removing some of the vertices and edges. The\nresult is called a [__subgraph__](gloss:subgraph). Here you can see a few more examples of graphs,\nwith coloured edges and vertices indicating a possible subgraph:\n\n::: column(width=212 parent=\"padded-thin\")\n\n    svg.graph(height=100 width=100 style='float: left; margin-right: 12px')\n    svg.graph(height=100 width=100 style='float: left')\n\n::: column(width=212)\n\n    svg.graph(height=100 width=100 style='float: left; margin-right: 12px')\n    svg.graph(height=100 width=100 style='float: left')\n\n::: column(width=212)\n\n    svg.graph(height=100 width=100 style='float: left; margin-right: 12px')\n    svg.graph(height=100 width=100 style='float: left')\n\n:::"
    },
    {
      "id": "intro-3",
      "content": "We say that the [__order__](gloss:graph-order) of a graph is the number of vertices it has. The\n[__degree__](gloss:graph-degree) of a vertex is the number of edges which meet at that vertex.\n\n::: column(width=130)\n\n    svg.graph(height=120 width=120 style='margin: 0 auto .8em')\n\n{.text-center} Order: [[5]]\n\n::: column(width=130)\n\n    svg.graph(height=120 width=120 style='margin: 0 auto .8em')\n\n{.text-center} Order: [[8]]\n\n::: column(width=130)\n\n    svg.graph(height=120 width=120 style='margin: 0 auto .8em')\n\n{.text-center} Degree: [[3]]\n\n::: column(width=130)\n\n    svg.graph(height=120 width=120 style='margin: 0 auto .8em')\n\n{.text-center} Degree: [[6]]\n\n:::"
    },
    {
      "id": "intro-4",
      "content": "Graphs that consist of a single loop of vertices are called [__cycles__](gloss:graph-cycle). All\ncycles have [[the same number of edges and vertices|more edges than vertices|fewer edges than\nvertices]].\n\n    .row\n      svg.graph(style='width: 120px; height: 120px;')\n      svg.graph(style='width: 120px; height: 120px;')\n      svg.graph(style='width: 120px; height: 120px;')\n\n{.reveal(when=\"blank-0\")} Equipped with these new definitions, let’s explore some of the fascinating\nproperties and applications of graphs."
    },
    {
      "id": "bridges-0",
      "title": "The Bridges of Königsberg",
      "section": "bridges",
      "content": "## The Bridges of Königsberg\n\n::: column.grow\n\nOne of the first mathematicians to think about graphs and networks was [Leonhard\nEuler](bio:euler). Euler was intrigued by an old problem regarding the town of\nKönigsberg near the Baltic Sea.\n\nThe river Pregel divides Königsberg into four separate parts, which are\nconnected by seven bridges. Is it possible to walk around the city crossing all\nof the bridges exactly once – but not more than once? (You can start and finish\nanywhere, not necessarily in the same place.)\n\nTry to find a valid route by drawing on these maps:\n\n::: column(width=250)\n\n    img.shifted(src=\"images/konigsberg1.jpg\" width=250 height=350)\n\n:::"
    },
    {
      "id": "bridges",
      "goals": "bridge-0 bridge-1 bridge-2 bridge-3",
      "title": "The Bridges of Königsberg",
      "content": "x-tabbox.full-width\n      .tab\n        h3 Map 1#[span.check.incorrect(when=\"bridge-0\")]\n        x-solved\n        include svg/bridges-1.svg\n        button.btn Clear\n        button.btn.right Skip\n      .tab\n        h3 Map 2#[span.check(when=\"bridge-1\")]\n        x-solved\n        include svg/bridges-2.svg\n        button.btn Clear\n        button.btn.right Skip\n      .tab\n        h3 Map 3#[span.check(when=\"bridge-2\")]\n        x-solved\n        include svg/bridges-3.svg\n        button.btn Clear\n        button.btn.right Skip\n      .tab\n        h3 Map 4 #[span.check.incorrect(when=\"bridge-3\")]\n        x-solved\n        include svg/bridges-4.svg\n        button.btn Clear\n        button.btn.right Skip"
    },
    {
      "id": "bridges-1",
      "content": "In the case of Königsberg it seems to be impossible to find a valid route, but\nsome of the other cities do work. Euler managed to find a simple rule that can\nbe applied to any city, without having to try lots of possibilities – using\ngraph theory.\n\n::: column.grow\n\nFirst, we need to convert the city maps into graphs with edges and vertices.\nEvery island or region of land is represented by [[a vertex|an edge|an area]]\nand every bridge connecting two regions is represented by a corresponding\n[[edge|vertex|street]].\n\n{.reveal(when=\"blank-0 blank-1\")} Now the problem of “touring a city while\ncrossing every bridge exactly once” has become a problem of “drawing a graph\nwith one continuous stroke while tracing every edge exactly once”.\n::: column(width=200)\n\n    include svg/konigsberg.svg\n\n:::"
    },
    {
      "id": "bridges-2",
      "content": "On paper, come up with a few different graphs and then try to work out which\nones can be drawn with a single, continuous stroke.\n\n    // p Try drawing these graphs with one continuous stroke:\n    // p.todo Interactive coming soon…"
    },
    {
      "id": "bridges-3",
      "goals": "size prime eo",
      "content": "Just like for the city maps before, we find that some graphs are possible while\nothers are not. To help us understand why, let us label every vertex with its\n[degree](gloss:graph-degree). Then we can colour the vertices in different ways,\nand try to reveal a pattern:\n\n    figure\n      x-select.var.tabs(:bind=\"colour\")\n        div(value=\"val\") Value\n        div(value=\"size\") Size\n        div(value=\"prime\") Prime Numbers\n        div(value=\"eo\") Even and Odd\n      .box\n        p.no-voice(style=\"margin: 0\"): strong These graphs are possible:\n        include svg/vertex-orders-1.svg\n        p.no-voice(style=\"margin: 1em 0 0\"): strong These graphs are not possible:\n        include svg/vertex-orders-2.svg"
    },
    {
      "id": "bridges-4",
      "content": "Comparing these numbers for graphs which are possible, and those which are not\npossible, it seems that a graph can be drawn if it [[has no more than two “odd”\nvertices|only has “even” vertices|has no vertices with an order larger than\n4|has an odd number of vertices|has no vertices of order 3]]. This condition can\nbe explained if we look at just a single vertex in the graph:\n\n::: x-slideshow\n\n    .stage(slot=\"stage\"): include svg/konigsberg-proof.svg\n\nHere you can see a single, magnified vertex in a graph.\n\nIf we draw the graph, we will eventually have an edge leading towards this vertex, and then another\none leading away. This makes two edges meeting at the vertex.\n\nMaybe the vertex is a crossing rather than a corner. In that case there will be another edge leading towards the vertex, and another edge leading away. Now we have four edges.\n\nAnd in some graphs, there may even be a third pair of edges leading towards and away from the vertex. Now there are six edges.\n\nNotice that, either way, there always is an even number of edges meeting at the vertex.\n\nThe only two exceptions are the vertices where the path starts, and where it ends – these two may have an odd number of edges. If the start and end point are the same, all vertices in the graph are even.\n\n:::"
    },
    {
      "id": "bridges-5",
      "content": "::: column.grow(parent=\"right\")\n\nIf you scroll back to the map of Königsberg, you will find that there are more\nthan two islands with an odd number of bridges. Therefore, a route that crosses\nevery bridge exactly once is indeed impossible – and this is what Leonard Euler\ndiscovered.\n\nEuler’s discovery may not seem particularly useful in real life, but graphs are\nat the foundation of many other geographic problems, such as finding directions\nbetween two locations. We will discover more of these applications later.\n\n::: column(width=240)\n\n    x-img(lightbox width=240 height=260 src=\"images/prague.jpg\")\n\n:::"
    },
    {
      "id": "handshakes-1",
      "section": "handshakes",
      "content": "## Handshakes and Dating\n\n::: column.grow\n\nYou have been invited to a wonderful birthday party with your friends. Including yourself and the\nhost, there are ${hnd}{hnd|5|3,15,1} people present.\n\nIn the evening, as the guests get ready to leave, everyone shakes hands with everyone else. How\nmany handshakes are there in total?\n\nWe can represent the handshakes using a graph: every person is [[a vertex|an edge]],\nand every handshake is [[an edge|a vertex]].\n\n{.reveal(when='blank-0 blank-1')} Now it is easy to count the number of edges in the graph. We find\nthat with ${hnd} people, there are ${hnd*(hnd-1)/2} handshakes.\n\n::: column.s-hide(width=240)\n\n    img.shifted(src=\"images/party.jpg\" width=240 height152)\n    svg.graph(style='width: 240px; height: 240px;')\n\n:::"
    },
    {
      "id": "handshakes-2",
      "content": "Rather than counting all the edges in large graphs, we could also try to find a\nsimple formula that tells us the result for _any_ number of guests.\n\nEach of the ${n}{n|5|2,8,1} people at the party shakes hands with ${n-1} others.\nThat makes ${n} × ${n-1} = ${n×(n-1)} handshakes in total. For _n_ people, the\nnumber of handshakes would be [[`n×(n–1)`|`n×(n+1)`|`n^2`]].\n\n    p.var(:html=\"handshakeTable(n)\")\n    x-gesture(target=\"#handshakes-2 x-var\" slide=\"100,0\")"
    },
    {
      "id": "handshakes-2a",
      "content": "Unfortunately this answer is not quite right. Notice how [the first two entries on the top\nrow](->.handshakes_tr:first-child_td:first-child,_.handshakes_tr:first-child_td:nth-child(2)) are\nactually the same, just flipped around.\n\nIn fact, we have counted every handshake [[twice|once|three times]], _{span.reveal(when=\"blank-0\")}\nonce for each of the two people involved. This means that the correct number of handshakes for\n${n}{n|5|2,25,1} guests is `(var(\"n\") × var(\"n-1\"))/2 = var(\"n*(n-1)/2\")`._"
    },
    {
      "id": "handshakes-3",
      "content": "The handshake graphs are special because every vertex is connected to every\nother vertex. Graphs with this property are called __complete graphs__. The\ncomplete graph with 4 vertices is often abbreviated as `K_4`, the complete graph\nwith 5 vertices is known as `K_5`, and so on.\n\nWe have just shown that a complete graph with `n` vertices, `K_n`, has\n`(n × (n-1))/2` edges.\n\n    .row\n      svg.graph(style=\"width: 90px; height: 90px\")\n      svg.graph(style=\"width: 90px; height: 90px\")\n      svg.graph(style=\"width: 90px; height: 90px\")\n      svg.graph(style=\"width: 90px; height: 90px\")"
    },
    {
      "id": "handshakes-4",
      "content": "figure: img(src=\"images/flags.jpg\" width=855 height=100)\n\nOn a different day, you are invited to a speed dating event for ${m}{m|5|2,8,1}\nboys and ${f}{f|4|2,8,1} girls. There are many small tables and every boy spends\n5 minutes with each of the girls. How many individual “dates” are there in total?\n\n::: column.grow\n\nIn this case, the corresponding graph consists of two separate sets of vertices. Every vertex is\nconnected to all the vertices in [[the opposite|its own]] set, but none of the vertices in\n[[its own|the opposite]] set. Graphs which have this layout are called __bipartite graphs__.\n\n::: column(width=300)\n\n    svg.graph(style=\"width: 300px; height: 140px;\")\n\n:::\n\n{.reveal(when=\"blank-0 blank-1\")} The bipartite graph with two sets of size _x_ and _y_ is often\nwritten as `K_\"x,y\"`. It has [[`x×y`|`x+y`|`2x–y`]] edges, _{span.reveal(when=\"blank-2\")} which\nmeans that in the above example there are ${m} × ${f} = ${m×f} dates._"
    },
    {
      "id": "utilities",
      "goals": "try-three-times",
      "section": "planar-graphs",
      "content": "## Planar Graphs\n\n::: column.grow\n\nHere is another puzzle that is related to graph theory.\n\nIn a small village there are three houses and three utility plants that produce water, electricity\nand gas. We have to connect each of the houses to each of the utility plants, but due to the layout\nof the village, the different pipes and cables are not allowed to cross.\n\n::: column(width=300)\n\n    x-img(width=300 height=200 src=\"images/power-plant.jpg\")\n\n:::\n\nTry to connect each of the houses to each of the utility companies below, without any of your lines\nintersecting:\n\n    .box.no-padding\n      include svg/utilities.svg\n      button.btn Clear"
    },
    {
      "id": "utilities-1",
      "content": "Just like the Königsberg bridges before, you quickly discover that this problem\nis also impossible. It seems that some graphs can be drawn without overlapping\nedges – these are called __planar graphs__ – but others cannot.\n\n::: column(width=200)\n\n    svg.graph(width=200 height=200 style=\"margin-bottom: .4em\")\n\n{.text-center} `K_3` is planar.\n\n::: column(width=200)\n\n    svg.graph#planar-2(width=200 height=200 style=\"margin-bottom: .4em\")\n\n{.text-center} `K_4` [[is planar|is not planar]].\n\n::: column(width=200)\n\n    svg.graph#planar-3(width=200 height=200 style=\"margin-bottom: .4em;\")\n\n{.text-center} `K_5` [[is not planar|is planar]].\n\n:::"
    },
    {
      "id": "utilities-2",
      "content": "The [complete graph](gloss:complete-graph) `K_5` is the smallest graph that is\nnot planar. Any other graph that contains `K_5` as a subgraph in some way is\nalso not planar. This includes `K_6`, `K_7`, and all larger complete graphs.\n\nThe graph in the three utilities puzzle is the [bipartite graph](gloss:bipartite-graph) `K_\"3,3\"`.\nIt turns out that any non-planar graph must either contain a `K_5` or a `K_\"3,3\"` (or a\n[subdivision](gloss:subdivision) of these two graphs) as a subgraph. This is called _Kuratowski’s\ntheorem_.\n\n    // TODO Add bio of Kazimierz Kuratowski"
    },
    {
      "id": "planarity",
      "goals": "planarity",
      "content": "::: .box.blue\n\n#### Planarity\n\n    x-solved\n    svg#planarity(viewBox=\"0 0 720 360\")\n\nThis is a planar graph, but the ${n}{n|7|5,20,1} vertices have been scrambled up. Rearrange the\nvertices so that none of the edges overlap.\n\n    p.btn-row: button.btn New Random Graph\n    // TODO Maybe mention that the restriction to straight line edges in the Planarity puzzle isn't\n    // a restriction that matters (Fáry's Theorem).\n\n:::"
    },
    {
      "id": "euler",
      "content": "### Euler’s Formula\n\nAll planar graphs divide the plane they are drawn on into a number of areas,\ncalled __faces__.\n\n::: column(width=200)\n\n    include svg/euler-2.svg\n\n{.text-center} [[6]] Vertices<br>\n[[5]] Faces<br>\n[[10]] Edges<br>\n_{span.euler-sum} 11 Vertices + Faces_\n\n::: column(width=200)\n\n    include svg/euler-1.svg\n\n{.text-center} [[8]] Vertices<br>\n[[7]] Faces<br>\n[[14]] Edges<br>\n_{span.euler-sum} 15 Vertices + Faces_\n\n::: column(width=200)\n\n    include svg/euler-3.svg\n\n{.text-center} [[12]] Vertices<br>\n[[13]] Faces<br>\n[[24]] Edges<br>\n_{span.euler-sum} 25 Vertices + Faces_\n\n:::"
    },
    {
      "id": "euler-1",
      "content": "When comparing these numbers, you will notice that the number of edges is always\n[[one less|bigger|the same]] than the number of faces plus the number of\nvertices. In other words, _{.b.m-blue}F_ + _{.b.m-green}V_ = _{.b.m-red}E_ + 1. This\nresult is called __Euler’s equation__ and is named after the same\n[mathematician](bio:euler) who solved the Königsberg Bridges problem.\n\nUnfortunately, there are infinitely many graphs, and we can’t check every one to\nsee if Euler’s equation works. Instead, we can try to find a simple\n[proof](gloss:proof) that works for any graph…"
    },
    {
      "id": "euler-2",
      "content": "::: x-slideshow\n\n    .stage(slot=\"stage\")\n      svg(viewBox=\"0 0 640 200\")\n        line.link(style=\"stroke-width: 3px; display: none\" x1=270 y1=30  x2=150 y2=100)\n        line.link(style=\"stroke-width: 3px; display: none\" x1=150 y1=100 x2=270 y2=170)\n        line.link(style=\"stroke-width: 3px; display: none\" x1=270 y1=170 x2=390 y2=100)\n        line.link(style=\"stroke-width: 3px\" x1=\"390\" y1=\"100\" x2=\"270\" y2=\"30\")\n        circle.node(cx=270 cy=30  r=7)\n        circle.node(cx=150 cy=100 r=7 style=\"display: none\")\n        circle.node(cx=270 cy=170 r=7 style=\"display: none\")\n        circle.node(cx=390 cy=100 r=7 style=\"display: none\")\n\n      .euler-table\n        table.grid.table-small\n          tr\n            td: strong.m-blue.i F\n            td: strong.m-green.i V\n            td: strong.m-red.i E\n          tr\n            td.xf 0\n            td.xv 1\n            td.xe 0\n        p.no-voice #[strong.m-blue.xf 0] + #[strong.m-green.xv 1] &nbsp;=&nbsp; #[strong.m-red.xe 0] + 1\n\nThe simplest graph consists of a single vertex. We can easily check that Euler’s equation works.\n\nLet us add a new vertex to our graph. We also have to add an edge, and Euler’s equation still works.\n\nIf we want to add a third vertex to the graph we have two possibilities. We could create a small\ntriangle: this adds one vertex, one face and two edges, so Euler’s equation still works.\n\nInstead we could simply extend the line by one: this adds one vertex and one edge, and Euler’s\nequation works.\n\nLet’s keep going: if we now create a quadrilateral we add one vertex, two edges and one face.\nEuler’s equation still works.\n\n:::"
    },
    {
      "id": "euler-3",
      "content": "Any (finite) graph can be constructed by starting with one vertex and adding\nmore vertices one by one. We have shown that, whichever way we add new vertices,\nEuler’s equation is valid. Therefore, it is valid for all graphs.\n\nThe process we have used is called __mathematical induction__. It is a very\nuseful technique for proving results in infinitely many cases, simply by\nstarting with the simplest case, and showing that the result holds at every\nstep when constructing more complex cases.\n\n    .svg-block: include svg/dominoes.svg"
    },
    {
      "id": "euler-4",
      "content": "Many planar graphs look very similar to the nets of [polyhedra](gloss:polyhedron),\nthree-dimensional shapes with [polygonal](gloss:polygon) faces. If we think of\npolyhedra as made of elastic bands, we can imagine stretching them out until\nthey become flat, planar graphs:\n\n::: column(width=300)\n\n    img.img-sequence(src=\"images/cube/cube0.png\" width=300 height=300)\n    x-slider(steps=31)\n\n::: column(width=300)\n\n    img.img-sequence(src=\"images/dodecahedron/dodeca0.png\" width=300 height=300)\n    x-slider(steps=31)\n\n:::"
    },
    {
      "id": "euler-5",
      "content": "This means that we can use Euler’s formula not only for planar graphs but\nalso for all polyhedra – with one small difference. When transforming the\npolyhedra into graphs, one of the faces disappears: the topmost face of the\npolyhedra becomes the “outside”; of the graphs.\n\nIn other words, if you count the number of __{.m-red}edges__, __{.m-blue}faces__ and\n__{.m-green}vertices__ of _any_ polyhedron, you will find that _{.b.m-blue}F_ +\n_{.b.m-green}V_ = _{.b.m-red}E_ + [[2]].\n\n::: column(width=200)\n\n    x-video(width=200 height=200 src=\"images/icosahedron.mp4\" hover loop)\n\n{.caption} __Icosahedron__<br>\n__{.m-blue}20__ Faces<br>\n__{.m-green}12__ Vertices<br>\n__{.m-red}30__ Edges\n\n::: column(width=200)\n\n    x-video(width=200 height=200 src=\"images/rhombi.mp4\" hover loop)\n\n{.caption} __Rhombicosidodecahedron__<br>\n__{.m-blue}62__ Faces<br>\n__{.m-green}60__ Vertices<br>\n__{.m-red}120__ Edges\n\n::: column(width=200)\n\n    x-video(width=200 height=200 src=\"images/football.mp4\" hover loop)\n\n{.caption} __Truncated Icosahedron__<br>\n__{.m-blue}32__ Faces (12 black, 20 white)<br>\n__{.m-green}60__ Vertices<br>\n__{.m-red}90__ Edges\n\n:::"
    },
    {
      "id": "maps",
      "section": "map-colouring",
      "content": "## Map Colouring\n\n::: column.grow\n\nWe have already used graph theory with certain maps. As we zoom out, individual\nroads and bridges disappear and instead we see the outline of entire countries.\n\nWhen colouring a map – or any other drawing consisting of distinct regions –\nadjacent countries cannot have the same colour. We might also want to use as few\ndifferent colours as possible.\n\nSome simple “maps”, like a chessboard, only need two colours (black and white),\nbut most complex maps need more.\n\n::: column(width=240 style=\"margin-top: -10px\")\n\n    x-img(src=\"images/globe.jpg\" width=240 height=320)\n\n:::"
    },
    {
      "id": "maps-1",
      "goals": "map-0 map-1 map-2 map-3",
      "title": "Colouring Maps",
      "content": "When colouring the map of US states, 50 colours are obviously enough, but far\nfewer are necessary. Try colouring the maps below with as few colours as\npossible:\n\n    .four-colour-icons\n      for i in [1, 2, 3, 4, 5, 6, 7]\n        .four-colour-icon(tabindex=0)\n\n    x-tabbox.four-colours.full-width\n      .tab\n        h3 United States #[span.check(when=\"map-0\")]\n        x-solved\n        .colour-count(style=\"margin-bottom: -32px\") #[span 0] colours used\n        include svg/colours-1.svg\n        button.btn.clear Clear\n        // Note that states or countries which only share a corner are allowed to have the same colour.\n        // Alaska and Hawaii are isolated from all of the other states and can have any colour.\n      .tab\n        h3 South America #[span.check(when=\"map-1\")]\n        x-solved\n        .colour-count #[span 0] colours used\n        include svg/colours-2.svg\n        button.btn.clear Clear\n      .tab\n        h3 Germany #[span.check(when=\"map-2\")]\n        x-solved\n        .colour-count #[span 0] colours used\n        include svg/colours-3.svg\n        button.btn.clear Clear\n      .tab\n        h3 England #[span.check(when=\"map-3\")]\n        x-solved\n        .colour-count #[span 0] colours used\n        include svg/colours-4.svg\n        button.btn.clear Clear"
    },
    {
      "id": "maps-2",
      "title": "The Four Colour Theorem",
      "content": "::: column.grow\n\nAll of these maps can be coloured with only four different colours, but it is\nnot hard to imagine that other, very complicated maps might need many more\ncolours. In fact, some maps need __at least__ four colours, whenever they\ncontain four countries all connected to each other.\n\n::: column(width=200)\n\n    img(src=\"images/four-colours.png\" width=200 height=120)\n\n:::\n\nLike before, we can convert a map with countries and borders into a planar\ngraph: every country becomes [[a vertex|an edge|a face]], and countries which\n[[share a border|have the same colour]] get connected by an edge:\n\n    .svg-block: include svg/colour-graph.svg\n\n{.reveal(when=\"blank-0 blank-1\")} Now we want to colour the vertices of a graph,\nand two vertices must have a different colour if they are connected by an edge."
    },
    {
      "id": "maps-3",
      "content": "::: column(width=240 parent=\"right\")\n\n    x-img(lightbox width=240 height=320 src=\"images/england-counties.jpg\")\n\n::: column.grow\n\nIn 1852, the botany student [Francis Guthrie](bio:guthrie) had to colour a map\nof counties in England. He observed that four colours seemed to suffice for any\nmap he tried, but he was not able to find a proof that worked for _all_ maps.\nThis turned out to be an extremely difficult problem, and became known as the\n__four colour theorem__.\n\nDuring the following 100 years, many mathematicians published “proofs” to the\nfour colour theorem, only for mistakes to be found later. Some of these invalid\nproofs were so convincing that it took more than 10 years to discover errors.\n\nFor a long time, mathematicians were unable to either prove that four colours\nare enough, or to find a map that needed more than four colours.\n\n:::"
    },
    {
      "id": "maps-4",
      "content": "Little progress was made on the four colour problem until 1976, when [Wolfgang\nHaken](bio:haken) and [Kenneth Appel](bio:appel) used a computer to finally\nsolve it. They reduced infinitely many possible maps to 1936 special cases,\nwhich were each checked by a computer taking over 1000 hours in total.\n\n    x-parallax.full-width(background=\"images/ibm-360.jpg\")"
    },
    {
      "id": "maps-5",
      "content": "The __four colour theorem__ is the first well-known mathematical theorem to be\nproven using a computer, something that has become much more common and less\ncontroversial since. Faster computers and a more efficient algorithm mean that\ntoday you can prove the four colour theorem on a laptop in just a few hours.\n\n    figure\n      x-img(src=\"images/suffice.jpg\" width=320 height=80 credit=\"http://www.math.illinois.edu/History/postmarks.pdf\")\n      p.caption Postmark for the Department of Mathematics at the University of<br/>Illinois Urbana-Champaign, where Haken and Appel worked."
    },
    {
      "id": "maps-6",
      "content": "::: column.grow\n\nThe four colour theorem only works for maps on a flat plane or a sphere, and\nwhere all countries consist of a single area.\n\nHowever, mathematicians have also looked at maps of _empires_, where countries\ncan consist of multiple disconnected components, and at maps on\ndifferently-shaped planets, such as a torus (doughnut shape). In these cases you\nmay need more than four colours, and the proofs become even more difficult.\n\n::: column(width=300)\n\n    x-video(width=300 height=220 src=\"images/torus.mp4\" hover loop)\n    p.caption This map on a torus requires seven colours.\n\n:::"
    },
    {
      "id": "salesman",
      "section": "travelling-salesman",
      "content": "## The Travelling Salesman Problem\n\n::: column.grow(parent=\"right\")\n\nLet us think, once more, about networks and maps. Imagine that a delivery\nservice has to visit ${tsn}{tsn|8|2,50,1} different cities to distribute\nparcels. We can think of these cities as the vertices in a graph. If all the\ncities are connected by roads, this is a [[complete graph|cycle|bipartite graph]],\nso there are `(var(\"tsn\") × (var(\"tsn\") – 1)) / 2 = var(\"tsn*(tsn-1)/2\")` edges in total.\n\nThe delivery truck has to visit all cities, in any order. In the Königsberg\nbridges problem we wanted to find paths which travel along _every edge_ exactly\nonce. Now we want to find paths which visit _every vertex_ exactly once. These\npaths are called __Hamiltonian cycles__.\n\n::: column(width=260)\n\n    x-img(src=\"images/truck.jpg\" width=260 height=280)\n\n:::"
    },
    {
      "id": "salesman-1",
      "content": "There are countless different possibilities for Hamiltonian cycles in complete\ngraphs. In fact, we can pick any vertex as starting vertex and then pick any of\nthe remaining cities in any order:\n\n    .row\n      .grow: p.todo Diagram coming soon…\n      .grow: p.todo Diagram Coming Soon…"
    },
    {
      "id": "salesman-2",
      "content": "In a graph with ${tsn1}{tsn1|4|2,10,1} cities, every Hamiltonian cycle must also\ncontain ${tsn1} cities. Now,\n\n    ul.var(:html=\"tsmString(tsn1)\")\n\nThis means that, in total, there are ${tsnPaths(tsn1)} possible paths. A\nshorthand for this product is ${tsn1}! or ${tsn1} __Factorial__.\n\nYou could imagine that it might not be possible to travel directly between two\ncities - without going via another city. In that case we no longer have a\ncomplete graph, and finding the number of Hamiltonian cycles, if they exist at\nall, becomes much more difficult."
    },
    {
      "id": "salesman-3",
      "content": "::: column.grow(parent=\"right\")\n\nSo far we have ignored the fact that some cities might be further apart than\nothers. In real life, however, this is a very important consideration: we don’t\njust want to find _any_ path but we want to find the shortest one. This is\ncalled the __Travelling Salesman Problem__. It has to be solved not only in\ntransportation and logistics, but also when positioning transistors on\nmicrochips, to make faster computers, or when analysing the structure of\n[DNA](gloss:dna).\n\nOne simple method would be to try all possible paths, finding the length of\neach, and then picking the shortest one. However we have just shown that, even\nwith just ${tsn2}{tsn2|10|2,20,1} cities there are ${tsn2}! = ${factorial(tsn2)}\npossible paths. Once you have hundreds or thousands of vertices, trying all\npossible paths becomes impossible, even using powerful computers.\n\n::: column(width=220)\n\n    x-img(lightbox src=\"images/microchip.jpg\" width=210 height=365)\n\n:::"
    },
    {
      "id": "salesman-4",
      "goals": "move",
      "content": "Unfortunately, there is no more efficient algorithm to solve the travelling\nsalesman problem. Instead, mathematicians and computer scientists have developed\nvarious algorithms that find _good_ solutions, even if they may not be the very\nbest one. These algorithms, which only give approximate solutions, are called\n__Heuristics__.\n\nTry rearranging the cities on this map, and watch how the shortest path between\nthem changes. You can remove cities by tapping them, and you can add cities by\nclicking anywhere on the map (up to 8):\n\n    figure: .tsm\n      svg(width=760 height=480 viewBox=\"0 0 760 480\")"
    },
    {
      "id": "salesman-5",
      "content": "::: column.grow\n\nThe __Greedy Algorithm__ (or Nearest Neighbour Algorithm) is very simple: you\nstart in a random city and consecutively move to the closest city you haven’t\nvisited before. Once you have visited all cities, you stop.\n\n::: column(width=300)\n\n{.todo} Animation coming soon…\n\n:::\n\nYou can show that, on average, paths found using the greedy algorithm are 25% longer than the shortest possible path."
    },
    {
      "id": "salesman-6",
      "content": "::: column.grow\n\nThe __2-Opt Algorithm__ starts with a random possible path. Then you repeatedly\npick two edges and swap them around if that would reduce the length of the path.\nYou stop when you can't reduce the length further by swapping any pairs of\nedges.\n\n::: column(width=300)\n\n{.todo} Animation coming soon…\n\n:::"
    },
    {
      "id": "ants",
      "content": "It turns out that, long before computers even existed, Nature had found a clever\nway to find optimal paths between different locations: in ant colonies.\n\n    x-parallax.full-width(background=\"images/ants.jpg\")\n\nAnts want to find the shortest possible routes between their nest and possible\nfood sources. They can communicate with each other through chemicals which they\nleave along their trail, and which other ants can follow."
    },
    {
      "id": "ants-1",
      "content": "::: column.grow\n\n* The ant colony sends out many scouts which initially travel in random\n  directions. Once they find food, they return, leaving behind a trail of\n  pheromone.\n* Other ants tend to follow a trail when they find one, which leads them to\n  food. On their return journey they deposit more pheromone, thus reinforcing\n  the trail.\n* Over time, pheromone evaporates. The longer a path is, the more time it takes\n  ants to travel along it, and so the pheromone has more time to evaporate.\n  Short paths, on the other hand, can get reinforced more quickly, so their\n  strength increases faster.\n\n::: column(width=240)\n\n{.todo} Diagram coming soon…\n\n:::"
    },
    {
      "id": "ants-2",
      "content": "::: column(width=220 parent=\"right\")\n\n    x-img(style=\"margin-top: 5px\" src=\"images/ant.jpg\" width=220 height=220)\n\n::: column.grow\n\nAnt Colony System (ACS) algorithms try to replicate this behaviour on computers,\nusing many “virtual” ants. They can quickly find very good solutions for the\ntravelling salesman problem.\n\nOne particularly useful property of ACS algorithms is that they can run\ncontinuously and adapt in real time to changes to the graph. These changes could\nbe caused by car accidents and road closures on street networks, or by traffic\nspikes to web servers on computer networks.\n\n:::"
    },
    {
      "id": "ants-3",
      "content": "::: column(width=140)\n\n    img(src=\"images/binary.jpg\" width=140 height=320)\n\n::: column.grow\n\nThe Travelling Salesman problem is [NP-hard](gloss:np), which means that it is\nvery difficult to be solved by computers (at least for large numbers of cities).\n\nFinding a fast and exact algorithm would have serious implications in the field\nof computer science: it would mean that there are fast algorithms for _all_\nNP-hard problems. It would also render most of Internet security useless, which\nrelies on the fact that certain problems are believed to be very difficult for\ncomputers.\n\nFinding a fast algorithm to solve the Travelling Salesman problem would also\nsolve one of the most famous open problems in mathematics and computer science,\nthe __P vs NP__ problem. It is one of the seven [Millennium Prize\nProblems](gloss:millennium-prize), each carrying a \\$1m prize.\n\n:::"
    },
    {
      "section": "scheduling",
      "sectionStatus": "dev",
      "content": "## Scheduling Problems\n\n{.todo} Coming Soon"
    },
    {
      "id": "applications",
      "section": "applications",
      "content": "## Graphs in Everyday Life\n\nWe have seen many different applications of graph theory in the previous chapters, although some of\nthem were a bit contrived. However, it turns out that graphs are at the very foundation of many\nobjects, concepts and processes in everyday life.\n\n::: column.grow\n\nThe Internet, for example, is a vast, virtual graph. Every vertex is an\nindividual webpage, and every edge means that there is a hyperlink between two\npages. Note that links only go one way, so this graph is\n[[directed|multi-line|conected]], and that this graph is _very, very, large_.\n\n    // * \"can be viewed as\" instead of \"is a vast, virtual graph\". \"Every\n    // vertex represens an individual webpage and every edge a hyperlink\n    // from one page to another\".\n\nSome websites, like Wikipedia or Facebook, have lots of incoming links, while\nmany smaller websites may have very few incoming links. This is the underlying\nconcept which Google uses to sort search results.\n\n::: column(width=240)\n\n    img(credit=\"© Various\" src=\"images/websites.png\" width=240 height=240)\n\n:::"
    },
    {
      "id": "applications-1",
      "content": "Websites with more incoming links tend to be of higher quality and should be\nshown at the top of the search results. For example, when searching for “London”,\nofficial tourist information sites are shown before small shops in London, or\nblogs of people who live in London. This simple idea from graph theory, the\n__Page Rank Algorithm__, made Google much better than other early\nsearch engines."
    },
    {
      "id": "applications-2",
      "content": "The Internet is the largest network ever created by mankind. This image shows a\nvery small proportion of all the servers connected to the Internet:\n\n    x-parallax.full-width(background=\"images/internet.jpg\")\n      .credit © LyonLabs, LLC and Barrett Lyon, 2014"
    },
    {
      "id": "applications-3",
      "content": "While websites and hyperlinks form a _virtual_ graph, there is also the\n_physical_ network of computers, servers, routers, phone lines and cables.\n\n::: column.grow(parent=\"right\")\n\nEvery time you make a phone call or load a website, network operators have to\nfind a way to connect sender and receiver, without exceeding the capacity of any\nindividual cable or connection. Graph theory and probability make it possible to\nguarantee a reliable service, for example by finding diversions when a\nparticular connection is busy.\n\n::: column(width=220)\n\n    x-img(lightbox src=\"images/phone.jpg\" width=220 height=166)\n\n:::"
    },
    {
      "id": "applications-4",
      "content": "Graphs also play an important role in transportation and navigation. All flight,\ntrain and subway networks form graphs, which can be used when creating efficient\nschedules. One of the most recognisable graphs is the London Underground map:\n\n    figure: x-img(lightbox src=\"images/tube-map.png\" width=720 height=480 credit=\"© Transport for London\")"
    },
    {
      "id": "applications-5",
      "content": "::: column.grow\n\nAll roads and motorways also form a large network, which is used by navigation\nservices like Google Maps when working out the shortest route between two given\npoints.\n\n::: column(width=60)\n\n    x-img(credit=\"© Google\" src=\"images/google-maps.jpg\" width=70 height=70)\n\n:::\n::: column(width=280)\n\n    x-img(lightbox src=\"images/congestion.jpg\" width=280 height=170)\n\n::: column.grow\n\nIn the future, __Intelligent Transportation Systems__ will reduce congestion and\naccidents by routing cars more efficiently, using location data collected from\nsmartphones and self-driving cars. This could save millions of hours lost on the\nroad every year, significantly reduce pollution, and allow emergency services to\ntravel faster.\n\n:::"
    },
    {
      "id": "applications-6",
      "content": "This image shows the network of commercial airline flights across northern Europe.\n\n    x-parallax.full-width(background=\"images/flights.jpg\")"
    },
    {
      "id": "applications-7",
      "content": "There are countless other graphs in science, engineering or everyday life:\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/molecules.jpg\" width=200 height=200)\n\n{.caption} The links between atoms in __molecules__ and crystal grids form a graph.\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/epidemic.jpg\" width=200 height=200)\n\n{.caption} The __spread of diseases__ and epidemics can be modelled using a network.\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/evolution.jpg\" width=200 height=200)\n\n{.caption} In Biology, the __evolutionary trees__ that show the ancestry of\nspecies form a graph.\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/network6.jpg\" width=200 height=200)\n\n{.caption} The different components of __electric circuits__ and computer chips\nform a network.\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/letters.jpg\" width=200 height=200)\n\n{.caption} The grammatical structure of __languages__ can be modelled using\ngraphs, for example to create translation algorithms.\n\n::: column(width=200)\n\n    x-img(lightbox src=\"images/finance.jpg\" width=200 height=200)\n\n{.caption} Graphs also have many applications in __probability__, __game\ntheory__ and __financial mathematics__.\n\n:::"
    },
    {
      "id": "social",
      "content": "### Social Networks\n\nFinally, let us think about one particularly good example of graphs which exist\nin everyday life: social media. Here, vertices represent [[people|friends|networks]]\nand edges represent friendships, likes, subscriptions or followers.\n\nWhen we draw social media graphs, we might see certain __clusters__ of mutual friends, who may have\ngone to the same school or live in the same city. We can also determine people’s __centrality__,\nwhich depends on how well-connected a vertex is, and which may be a measure of a person’s\npopularity on social media.\n\n    figure: x-img(lightbox src=\"images/social-network.png\" width=720 height=500)"
    },
    {
      "id": "social-1",
      "content": "::: column.grow\n\nIn 2014, Facebook had 1.4 billion active users and a total of more than 200\nbillion friendships. Half of all Facebook users have more than 200 friends, and\nsince most of our friends have a similar number of friends, we could easily have\ntens of thousands of _friends of friends_.\n\nAn exciting question would now be: if you pick any two random Facebook users,\nhow many “friendship edges” would you need to follow to get from one to the\nother? For example, the distance between friends is [[1]], the distance between\nfriends of friends is [[2]], and so on.\n\n::: column(width=200)\n\n    x-img(src=\"images/facebook-like.png\" width=200 height=200)\n\n:::"
    },
    {
      "id": "social-2",
      "content": "In 2016, Facebook conducted [a study](https://research.facebook.com/blog/three-and-a-half-degrees-of-separation/)\nto determine how its users are connected to each other. They found that, on average, you are\nconnected to _anyone else_ on Facebook through at most 3.57 other people. And this includes\ncelebrities, politicians or even royalty!\n\nIn other words, if you pick any one of the billions of Facebook users all around the world, they\nwill probably have a friend of a friend who knows a friend of one of your friends.  We say there are\n3.57 __degrees of separation__.\n\n    figure\n      x-img(lightbox src=\"images/facebook.jpg\" width=720 height=360 credit=\"© Facebook\")\n      p.caption Geographic visualisation of all Facebook friendships in 2010."
    },
    {
      "id": "social-3",
      "content": "::: column(width=200)\n\n    x-img(credit=\"© Metro-Goldwyn-Mayer\" src=\"images/six-degrees.jpg\" width=200 height=265 style=\"border: 1px solid #ccc\")\n\n::: column.grow\n\nIn 1929, when the Hungarian author [Frigyes Karinthy](bio:karinthy) first\nproposed the idea of “six degrees of Separation”, there was no Internet or\nsocial media, but the world had already started to become more interconnected.\n\nIn 1967, [Stanley Milgram](bio:milgram) conducted a first empirical experiment,\nwhere 296 participants living in Nebraska and Kansas were asked to deliver a\nletter to a particular person living in Boston, Massachusetts. They all had to\nchoose a friend to send the letter to, who then picked another friend. At every\nstep, the letter moved closer to Boston. Milgram found that there were, on\naverage, only 5.2 intermediate friends &#8211; 5.2 degrees of separation.\n\n:::\n\nToday, every one of us is part of countless invisible graphs, which underlie our\nsocial interactions, travel, Internet and technology, science, and so much more."
    }
  ],
  "title": "Graphs and Networks"
}