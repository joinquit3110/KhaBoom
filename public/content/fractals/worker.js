/* (c) Mathigon, generated by Mathigon Studio */
"use strict";
var StepFunctions = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // content/fractals/worker.ts
  var worker_exports = {};
  function computeMandelbrot([xMin, xMax, yMin, yMax, res]) {
    const run = (cx, cy) => {
      let x = 0;
      let y = 0;
      for (let i = 0; i < 127; ++i) {
        const xy = x * y;
        x = x * x - y * y + cx;
        y = 2 * xy + cy;
        if (x * x + y * y >= 3) return 0;
      }
      return 1;
    };
    const result = [];
    for (let x = xMin; x <= xMax; x += res) {
      const row = [];
      for (let y = yMin; y <= yMax; y += res) row.push(run(x, y));
      result.push(row);
    }
    return result;
  }
  function computeJulia([cx, cy, xMin, xMax, yMin, yMax, res]) {
    const run = (x, y) => {
      for (let i = 0; i < 127; ++i) {
        const xy = x * y;
        x = x * x - y * y + cx;
        y = 2 * xy + cy;
        if (x * x + y * y >= 3) return 0;
      }
      return 1;
    };
    const result = [];
    for (let x = xMin; x <= xMax; x += res) {
      const row = [];
      for (let y = yMin; y <= yMax; y += res) row.push(run(x, y));
      result.push(row);
    }
    return result;
  }
  onmessage = (e) => {
    const [type, ...options] = e.data;
    if (type === "julia") {
      postMessage(computeJulia(options));
    } else if (type === "mandelbrot") {
      postMessage(computeMandelbrot(options));
    }
  };
  return __toCommonJS(worker_exports);
})();