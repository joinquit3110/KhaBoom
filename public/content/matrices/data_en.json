{"id":"matrices","locale":"en","nextCourse":"non-euclidean-geometry","prevCourse":"logic","title":"Matrices","description":"Transformations, Matrix Arithmetic, Determinants, Matrix Inverses, Cramer’s Rule and Gaussian Elimination, Eigenvalues and Eigenvectors","color":"#5A49C9","level":"Advanced","icon":"/content/matrices/icon.png","hero":"\\content\\matrices\\hero.jpg","goals":75,"sections":[{"id":"transformations","title":"Transformations","locked":true,"url":"/course/matrices/transformations","steps":["rocket","step-1","step-2","two-points","linear-combination","step-5","step-6","step-7","matrices","identity","step-10","basic-transformations","play-with-me","gpu","translate","three-d","mathigon-matrix"],"goals":46,"duration":50},{"id":"arithmetic","title":"Matrix Arithmetic","locked":true,"url":"/course/matrices/arithmetic","steps":["multiplication","step-18","step-19","formal-definition","matrix-factorisation","multiply-transformations","step-23","transforms-calculator","matrix-addition","scalar-multiplication","arith-properties"],"goals":29,"duration":40},{"id":"determinants","title":"Determinants","locked":true,"url":"/course/matrices/determinants","steps":["determinants","examples","zero-det","det-formula","nonsquare"],"goals":0,"duration":5},{"id":"inverses","title":"Matrix Inverses","locked":true,"url":"/course/matrices/inverses","steps":["step-33"],"goals":0,"duration":5},{"id":"systems","title":"Cramer’s Rule and Gaussian Elimination","locked":true,"url":"/course/matrices/systems","steps":["step-34"],"goals":0,"duration":5},{"id":"eigenvalues","title":"Eigenvalues and Eigenvectors","locked":true,"url":"/course/matrices/eigenvalues","steps":["step-35"],"goals":0,"duration":5}],"steps":{"rocket":{"id":"rocket","title":"Rocket","html":"<x-step id=\"rocket\" goals=\"projectile\"><div class=\"row padded\"><div class=\"grow\"> <p>When we play video games with 3d graphics, what we are really looking at are millions of tiny triangles. Everything from the mountains and grass that make up the environment, to the goblins that guard the precious treasure, to the spaceship that you pilot through an asteroid belt, is made up of many small triangles. The computer in your video game console runs trillions of computations to figure out how each shape will be displayed on the screen.</p></div><div class=\"fit\"> <x-geopad width=\"400\" x-axis=\"-18,18,5\" y-axis=\"-18,18,5\" padding=\"5\"><svg><path class=\"fill green\" x=\"polygon(point(0,3),point(2,0),point(2,-2),point(0,-1),point(-2,-2),point(-2,0)).rotate(th)\"></path></svg></x-geopad></div></div> <p>What kind of computations is our computer performing? Before we try displaying intricate three-dimensional landscapes and characters, let's imagine we want to draw a 2d spaceship that we can rotate to shoot incoming asteroids.</p></x-step>","goals":["projectile"],"keywords":[]},"step-1":{"id":"step-1","title":"Step  ","html":"<x-step id=\"step-1\" goals=\"blank-0 blank-1\"><p>Here is our humble spaceship. Like the shapes displayed in video games, we can represent our spaceship as a collection of points, with lines connecting them. We can draw it on the xy coordinate plane, centered on the origin, with each point labelled as an (x, y) value.</p><div class=\"row padded\"><div style=\"width: 400px\"> <x-geopad width=\"400\" x-axis=\"-5,5,1\" y-axis=\"-5,5,1\" axes=\"axes\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green\" name=\"a\" x=\"point(0,3)\" label=\"A\" target=\"a\"></circle><circle class=\"green\" name=\"b\" x=\"point(2,0)\" label=\"B\"></circle><circle class=\"green\" name=\"c\" x=\"point(2,-2)\" label=\"C\"></circle><circle class=\"green\" name=\"d\" x=\"point(0,-1)\" label=\"D\"></circle><circle class=\"green\" name=\"e\" x=\"point(-2,-2)\" label=\"E\"></circle><circle class=\"green\" name=\"f\" x=\"point(-2,0)\" label=\"F\"></circle><path class=\"green\" x=\"segment(a,b)\"></path><path class=\"green\" x=\"segment(b,c)\"></path><path class=\"green\" x=\"segment(c,d)\"></path><path class=\"green\" x=\"segment(d,e)\"></path><path class=\"green\" x=\"segment(e,f)\"></path><path class=\"green\" x=\"segment(f,a)\"></path></svg></x-geopad></div></div> <p>Here the point <span class=\"step-target pill green\" tabindex=\"0\" data-to=\"a\"> A</span> has coordinates (<span class=\"nowrap\"><x-blank solution=\"0\" goal=\"blank-0\"></x-blank>,</span> <x-blank solution=\"3\" goal=\"blank-1\"></x-blank>).</p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-2":{"id":"step-2","title":"Step  ","html":"<x-step id=\"step-2\" goals=\"var-0 next-0\"><p>We would like to give our spaceship the ability to rotate in place, so the player can point it at incoming asteroids. This rotation is something we call a <span class=\"nowrap\"><x-gloss xid=\"transformation\">transformation</x-gloss>.</span> Let's notify the Rotation of the spaceship through angle θ as <span class=\"nowrap\"><span class=\"math\" data-voice=\"_R_ θ\"><msub><mi>R</mi><mtext>θ</mtext></msub></span>.</span></p><p class=\"text-center\"> <span class=\"math\" data-voice=\"_P_ 1 _P_ 2 _P_ 3 _P_ 4 _P_ 5 _P_ 6\"><mfenced open=\"{\" close=\"}\"><msub><mi>P</mi><mtext>1</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>2</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>3</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>4</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>5</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>6</mtext></msub></mfenced></span> --- <span class=\"math\" data-voice=\"_R_ θ\"><msub><mi>R</mi><mtext>θ</mtext></msub></span> ---&gt; <span class=\"math\" data-voice=\"_P_ 1 ’ _P_ 2 ’ _P_ 3 ’ _P_ 4 ’ _P_ 5 ’ _P_ 6 ’\"><mfenced open=\"{\" close=\"}\"><msub><mi>P</mi><mtext>1</mtext></msub><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>2</mtext></msub><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>3</mtext></msub><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>4</mtext></msub><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>5</mtext></msub><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><msub><mi>P</mi><mtext>6</mtext></msub><mo value=\"’\">’</mo></mfenced></span> {.fixme} Could be nice with hover points to graphic.</p><p>Each point <span class=\"math\" data-voice=\"_P_ n\"><msub><mi>P</mi><mtext>n</mtext></msub></span> has the transformation <span class=\"math\" data-voice=\"_R_ θ\"><msub><mi>R</mi><mtext>θ</mtext></msub></span> applied to it, which rotates the point around the origin to get point <span class=\"math\" data-voice=\"_P_ n ’\"><msub><mi>P</mi><mtext>n</mtext></msub><mo value=\"’\">’</mo></span> (pronounced \"P n prime\").</p><p>Here is a spaceship we can rotate by <x-var bind=\"phi|60|10,350,10\" goal=\"var-0\">${phi + 'º'}</x-var> around the origin.</p><div class=\"row padded\"><div style=\"width: 400px\"> <x-geopad width=\"400\" x-axis=\"-5,5,1\" y-axis=\"-5,5,1\" axes=\"axes\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green\" name=\"a\" x=\"point(0,3)\" label=\"A\" target=\"a\"></circle><circle class=\"green\" name=\"b\" x=\"point(2,0)\" label=\"B\"></circle><circle class=\"green\" name=\"c\" x=\"point(2,-2)\" label=\"C\"></circle><circle class=\"green\" name=\"d\" x=\"point(0,-1)\" label=\"D\"></circle><circle class=\"green\" name=\"e\" x=\"point(-2,-2)\" label=\"E\"></circle><circle class=\"green\" name=\"f\" x=\"point(-2,0)\" label=\"F\"></circle><circle class=\"blue\" name=\"ap\" x=\"a.rotate(phi/180*pi)\" label=\"A'\"></circle><circle class=\"blue\" name=\"bp\" x=\"b.rotate(phi/180*pi)\" label=\"B'\"></circle><circle class=\"blue\" name=\"cp\" x=\"c.rotate(phi/180*pi)\" label=\"C'\"></circle><circle class=\"blue\" name=\"dp\" x=\"d.rotate(phi/180*pi)\" label=\"D'\"></circle><circle class=\"blue\" name=\"ep\" x=\"e.rotate(phi/180*pi)\" label=\"E'\"></circle><circle class=\"blue\" name=\"fp\" x=\"f.rotate(phi/180*pi)\" label=\"F'\"></circle><path class=\"green\" x=\"segment(a,b)\"></path><path class=\"green\" x=\"segment(b,c)\"></path><path class=\"green\" x=\"segment(c,d)\"></path><path class=\"green\" x=\"segment(d,e)\"></path><path class=\"green\" x=\"segment(e,f)\"></path><path class=\"green\" x=\"segment(f,a)\"></path><path class=\"blue\" x=\"segment(ap,bp)\"></path><path class=\"blue\" x=\"segment(bp,cp)\"></path><path class=\"blue\" x=\"segment(cp,dp)\"></path><path class=\"blue\" x=\"segment(dp,ep)\"></path><path class=\"blue\" x=\"segment(ep,fp)\"></path><path class=\"blue\" x=\"segment(fp,ap)\"></path></svg></x-geopad></div></div> <p>Here are some things we can say about the shape of our spaceship as it rotates:</p><ul> <li>The spaceship must retain its shape.</li><li>The spaceship will have the same size.</li><li>It does not move up and down.</li></ul> <p>We would like a formula to convert any point <span class=\"math\" data-voice=\"_P_\"><mi>P</mi></span> into its rotated point <span class=\"nowrap\"><span class=\"math\" data-voice=\"_P_ ’\"><mi>P</mi><mo value=\"’\">’</mo></span>.</span></p><p>Let's start by calculating this formula for two different points.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["var-0","next-0"],"keywords":[]},"two-points":{"id":"two-points","title":"Two Points","html":"<x-step id=\"two-points\" goals=\"blank-0 blank-1 blank-2 blank-3 var-0 var-1\"><h2>Calculating the rotation of two points</h2><p>For our two points, let's pick <span class=\"step-target pill green\" tabindex=\"0\" data-to=\"a\"> A</span> = <span class=\"math\" data-voice=\"0 3\"><mfenced open=\"(\" close=\")\"><mn>0</mn><mo value=\",\" lspace=\"0\">,</mo><mn>3</mn></mfenced></span> and <span class=\"step-target pill green\" tabindex=\"0\" data-to=\"b\"> B</span> = <span class=\"nowrap\"><span class=\"math\" data-voice=\"2 0\"><mfenced open=\"(\" close=\")\"><mn>2</mn><mo value=\",\" lspace=\"0\">,</mo><mn>0</mn></mfenced></span>.</span> We can determine the formulas for their rotation <span class=\"step-target pill purple\" tabindex=\"0\" data-to=\"theta\"> θ</span> around the origin one at a time.</p><x-tabbox><div class=\"tab\"> <h3>(0,3)</h3><p>If we rotate the point <span class=\"step-target pill green\" tabindex=\"0\" data-to=\"a\">A</span> at (0,3) <x-var bind=\"t1|60|10,350,10\" goal=\"var-0\">${t1 + 'º'}</x-var> around the origin, it has a new <span class=\"math\" data-voice=\"_x_ _y_\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi></mfenced></span> value. We can call our rotated point <span class=\"step-target pill blue\" tabindex=\"0\" data-to=\"ap\">A'</span> (A prime), with coordinates <span class=\"math\" data-voice=\"_x_ ’ _y_ ’\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi><mo value=\"’\">’</mo></mfenced></span> (x prime and y prime).</p><div class=\"row padded\"><div style=\"width: 400px\"> <x-geopad width=\"400\" x-axis=\"-5,5,1\" y-axis=\"-5,5,1\" axes=\"axes\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green\" name=\"a\" x=\"point(0,3)\" label=\"A\" target=\"a\"></circle><circle class=\"blue\" name=\"ap\" x=\"a.rotate(t1/180*pi)\" label=\"A'\" target=\"ap tri1\"></circle><path class=\"green\" x=\"segment(point(0,0),a)\"></path><path class=\"blue\" x=\"segment(point(0,0),ap)\" target=\"tri1\"></path><path class=\"red\" x=\"segment(point(0,ap.y), point(ap.x, ap.y))\" target=\"xp tri1\" label=\"x'\"></path><path class=\"yellow\" x=\"segment(point(0,0), point(0, ap.y))\" target=\"yp tri1\" label=\"y'\"></path><path class=\"purple\" x=\"angle(ap,point(0,0),a)\" target=\"theta tri1\" round=\"round\" size=\"40\"></path></svg></x-geopad></div></div> <p>What is a formula to get the new coordinates for A’? We can call our new x value <span class=\"nowrap\"><span class=\"step-target pill red\" tabindex=\"0\" data-to=\"xp\">x'</span>,</span> and our new y value <span class=\"nowrap\"><span class=\"step-target pill yellow\" tabindex=\"0\" data-to=\"yp\">y'</span>.</span> Both <strong>x'</strong> and <strong>y'</strong> will be dependent on the length of <strong>A</strong>, which is 3.</p><p>These points form a <span class=\"nowrap\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"tri1\">right triangle</span>,</span> so we can draw upon our knowledge of trigonometry to find the formulas for <strong>x'</strong> and <strong>y'</strong>.</p><p class=\"fixme\"> This might be confusing for theta &gt; 90º</p><p>Our <span class=\"step-target pill red\" tabindex=\"0\" data-to=\"xp\">x'</span> value is the opposite of the known angle, so we can use the formula for <x-gloss xid=\"sin\">sine</x-gloss> to determine that:</p><p><span class=\"math\" data-voice=\"_x_ ’ equals 3 times\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><mn>3</mn><mo value=\"·\">·</mo></span><x-blank-mc goal=\"blank-0\"><button class=\"choice\">-sin(θ)</button><button class=\"choice\">sin(θ)</button><button class=\"choice\">cos(θ)</button></x-blank-mc></p><p>Our <span class=\"step-target pill yellow\" tabindex=\"0\" data-to=\"yp\">y'</span> value is the adjacent side of a right triangle, so we can use the formula for <x-gloss xid=\"cos\">cosine</x-gloss> to determine that:</p><p><span class=\"math\" data-voice=\"_y_ ’ equals 3 times\"><mi>y</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><mn>3</mn><mo value=\"·\">·</mo></span><x-blank-mc goal=\"blank-1\"><button class=\"choice\">cos(θ)</button><button class=\"choice\">sin(θ)</button></x-blank-mc></p></div><div class=\"tab\"> <h3>(2,0)</h3><p>Let's look at another point. If we rotate the point <span class=\"step-target pill green\" tabindex=\"0\" data-to=\"b\">B</span> at (2,0) <x-var bind=\"t2|60|10,350,10\" goal=\"var-1\">${t2 + 'º'}</x-var> around the origin, it has a new <span class=\"math\" data-voice=\"_x_ _y_\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi></mfenced></span> We can call our rotated point <span class=\"step-target pill blue\" tabindex=\"0\" data-to=\"bp\">B'</span> (B prime), with coordinates <span class=\"math\" data-voice=\"_x_ ’ _y_ ’\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi><mo value=\"’\">’</mo></mfenced></span> (x prime and y prime).</p><div class=\"row padded\"><div style=\"width: 400px\"> <x-geopad width=\"400\" x-axis=\"-5,5,1\" y-axis=\"-5,5,1\" axes=\"axes\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green\" name=\"b\" x=\"point(2,0)\" label=\"B\" target=\"b\"></circle><circle class=\"blue\" name=\"bp\" x=\"b.rotate(t2/180*pi)\" label=\"B'\" target=\"bp tri2\"></circle><path class=\"green\" x=\"segment(point(0,0),b)\"></path><path class=\"blue\" x=\"segment(point(0,0),bp)\" target=\"tri2\"></path><path class=\"red\" x=\"segment(point(0,0), point(bp.x, 0))\" label=\"x'\" target=\"xp tri2\"></path><path class=\"yellow\" x=\"segment(point(bp.x, 0), point(bp.x, bp.y))\" label=\"y'\" target=\"yp tri2\"></path><path class=\"purple\" x=\"angle(bp,point(0,0),b)\" target=\"tri2\" round=\"round\" size=\"40\"></path></svg></x-geopad></div></div> <p>What is a formula to get the new coordinates for <span class=\"nowrap\"><span class=\"step-target pill blue\" tabindex=\"0\" data-to=\"bp\">B’</span>?</span> We can call our new x value <span class=\"nowrap\"><span class=\"step-target pill red\" tabindex=\"0\" data-to=\"xp\">x'</span>,</span> and our new y value <span class=\"nowrap\"><span class=\"step-target pill yellow\" tabindex=\"0\" data-to=\"yp\">y'</span>.</span> Both <strong>x'</strong> and <strong>y'</strong> will be dependent on the length of <strong>B</strong>, which is 2.</p><p>These points form a <span class=\"nowrap\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"tri2\">right triangle</span>,</span> so we can draw upon our knowledge of trigonometry to find the formulas for <strong>x'</strong> and <strong>y'</strong>.</p><p class=\"fixme\"> This might be confusing for theta &gt; 90º</p><p>Our <span class=\"step-target pill red\" tabindex=\"0\" data-to=\"xp\">x'</span> value is the adjacent side of the known angle, so we can use the formula for <x-gloss xid=\"cos\">cosine</x-gloss> to determine that:</p><p><span class=\"math\" data-voice=\"_x_ ’ equals 2 times\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><mn>2</mn><mo value=\"·\">·</mo></span><x-blank-mc goal=\"blank-2\"><button class=\"choice\">cos(θ)</button><button class=\"choice\">sin(θ)</button></x-blank-mc></p><p>Our <span class=\"step-target pill yellow\" tabindex=\"0\" data-to=\"yp\">y'</span> value is the opposite side of the known angle, so we can use the formula for <x-gloss xid=\"sin\">sine</x-gloss> to determine that:</p><p><span class=\"math\" data-voice=\"_y_ ’ equals 2 times\"><mi>y</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><mn>2</mn><mo value=\"·\">·</mo></span><x-blank-mc goal=\"blank-3\"><button class=\"choice\">sin(θ)</button><button class=\"choice\">cos(θ)</button></x-blank-mc></p></div></x-tabbox> </x-step>","goals":["blank-0","blank-1","blank-2","blank-3","var-0","var-1"],"keywords":[]},"linear-combination":{"id":"linear-combination","title":"Linear Combination","html":"<x-step id=\"linear-combination\" goals=\"next-0\"><div class=\"row padded\"><div> <p>We now have equations for the <span class=\"math\" data-voice=\"_x_ ’ _y_ ’\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi><mo value=\"’\">’</mo></mfenced></span> coordinates of the two points <span class=\"math\" data-voice=\"_A_ ’\"><mi>A</mi><mo value=\"’\">’</mo></span> and <span class=\"nowrap\"><span class=\"math\" data-voice=\"_B_ ’\"><mi>B</mi><mo value=\"’\">’</mo></span>.</span> We still have four more rotated points to calculate (<span class=\"nowrap\"><span class=\"math\" data-voice=\"_C_ ’\"><mi>C</mi><mo value=\"’\">’</mo></span>,</span> etc), but is there a shortcut where we can use what we already have?</p></div><div> <table><tbody><tr><td>Name</td><td>xy</td><td>Rotated</td><td>Rxy</td></tr><tr><td>A</td><td>(0, 2)</td><td>A'</td><td>(-2sin(θ), 2cos(θ))</td></tr><tr><td>B</td><td>(3, 0)</td><td>B'</td><td>3cos(θ), 3sin(θ))</td></tr><tr><td>C</td><td>2,-2</td><td>C'</td><td></td></tr><tr><td>D</td><td>0,-1</td><td>D'</td><td></td></tr><tr><td>E</td><td>-2,-2</td><td>E'</td><td></td></tr><tr><td>F</td><td>-2,0</td><td>F'</td><td></td></tr></tbody></table></div></div> <p class=\"fixme\"> Table needs to look a lot nicer.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"step-5":{"id":"step-5","title":"Step  ","html":"<x-step id=\"step-5\" goals=\"blank-0 blank-1\"><p>Remember from our last course on <a href=\"link/to/course\" target=\"_blank\">vectors</a> that any vector can be treated as a <x-gloss xid=\"linear-combination\">linear combination</x-gloss> of the two unit vectors <uv><strong>i</strong></uv> and <uv><strong>j</strong></uv>.</p><p>We can use the formulas we calculated for rotations of <strong>A</strong> and <strong>B</strong> to find the rotation for any other point! <strong>A</strong> lies along the y-axis so it is just a scaled version of the unit vector <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">j</button><button class=\"choice\">i</button></x-blank-mc>,</span> and <strong>B</strong> lies upon the x-axis so it is just a scaled version of the unit vector <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">i</button><button class=\"choice\">j</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-6":{"id":"step-6","title":"Step  ","html":"<x-step id=\"step-6\" goals=\"\"><p>When we divide the lengths of A and B from the respective coordinates in A' and B', we can get the formulas for the rotations of the unit vectors.</p><p class=\"fixme\"> What kind of notation should we use? Unit Vectors? Points?</p><p><span class=\"math\" data-voice=\"1 0\"><mfenced open=\"(\" close=\")\"><mn>1</mn><mo value=\",\" lspace=\"0\">,</mo><mn>0</mn></mfenced></span> becomes <span class=\"math\" data-voice=\"sinθ minus cosθ\"><mfenced open=\"(\" close=\")\"><mi>sinθ</mi><mo value=\",\" lspace=\"0\">,</mo><mo value=\"−\">−</mo><mi>cosθ</mi></mfenced></span> and <span class=\"math\" data-voice=\"0 1\"><mfenced open=\"(\" close=\")\"><mn>0</mn><mo value=\",\" lspace=\"0\">,</mo><mn>1</mn></mfenced></span> becomes <span class=\"nowrap\"><span class=\"math\" data-voice=\"cosθ sinθ\"><mfenced open=\"(\" close=\")\"><mi>cosθ</mi><mo value=\",\" lspace=\"0\">,</mo><mi>sinθ</mi></mfenced></span>.</span></p></x-step>","goals":[],"keywords":[]},"step-7":{"id":"step-7","title":"Step  ","html":"<x-step id=\"step-7\" goals=\"next-0\"><p>We can then write the equation for <strong>any</strong> rotated point by writing it as a linear combination of the unit vectors.</p><p>for <span class=\"nowrap\"><span class=\"math\" data-voice=\"_x_ ’\"><mi>x</mi><mo value=\"’\">’</mo></span>.</span>..</p><p class=\"text-center\"> <span class=\"math\" data-voice=\"_x_ ’ equals _x_ times cosθ minus _y_ times sinθ\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><span class=\"pill teal\"><mi>x</mi></span><mo value=\"·\">·</mo><mi>cosθ</mi><mo value=\"−\">−</mo><span class=\"pill purple\"><mi>y</mi></span><mo value=\"·\">·</mo><mi>sinθ</mi></span></p><p>for <span class=\"nowrap\"><span class=\"math\" data-voice=\"_y_ ’\"><mi>y</mi><mo value=\"’\">’</mo></span>.</span>..</p><p class=\"text-center\"> <span class=\"math\" data-voice=\"_y_ ’ equals _x_ times sinθ plus _y_ times cosθ\"><mi>y</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><span class=\"pill teal\"><mi>x</mi></span><mo value=\"·\">·</mo><mi>sinθ</mi><mo value=\"+\">+</mo><span class=\"pill purple\"><mi>y</mi></span><mo value=\"·\">·</mo><mi>cosθ</mi></span></p><p>We can rewrite this as a new vector.</p><p class=\"text-center\"> <x-math data-voice=\"_x_ ’ _y_ ’\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi><mo value=\"’\">’</mo></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi><mo value=\"’\">’</mo></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ times cosθ minus _y_ times sinθ _x_ times sinθ plus _y_ times cosθ\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><span class=\"pill step-target teal\" data-to=\"x\" tabindex=\"0\"><mi>x</mi></span><mo value=\"·\">·</mo><mi>cosθ</mi><mo value=\"−\">−</mo><span class=\"pill purple\"><mi>y</mi></span><mo value=\"·\">·</mo><mi>sinθ</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><span class=\"pill teal\"><mi>x</mi></span><mo value=\"·\">·</mo><mi>sinθ</mi><mo value=\"+\">+</mo><span class=\"pill purple\"><mi>y</mi></span><mo value=\"·\">·</mo><mi>cosθ</mi></mfenced></mfenced></mfenced></x-math></p><p>Notice that both x' and y' are dependent on <span class=\"step-target pill teal\" tabindex=\"0\" data-to=\"x\">x</span> and <span class=\"step-target pill purple\" tabindex=\"0\" data-to=\"y\">y.</span></p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"matrices":{"id":"matrices","title":"Matrices","html":"<x-step id=\"matrices\" goals=\"next-0\"><h3>Matrices</h3><p>Mathematicians came up with a very powerful concept called a <span class=\"nowrap\"><x-gloss xid=\"matrix\">matrix</x-gloss>,</span> that can help us write this in a new way. A matrix is like a spreadsheet table, with cells each containing their own numbers.</p><p>This matrix has 2 rows and 2 columns so it is a 2x2 matrix, but they can be any size.</p><p class=\"text-center\"><x-math data-voice=\"cosθ of minus sinθ sinθ cosθ\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>cosθ</mi><mfenced><mo value=\"−\">−</mo><mi>sinθ</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mi>sinθ</mi><mi>cosθ</mi></mfenced></mfenced></x-math></p><p><strong>We can rewrite our calculations for the coordinates <span class=\"math\" data-voice=\"_x_ ’\"><mi>x</mi><mo value=\"’\">’</mo></span> and <span class=\"math\" data-voice=\"_y_ ’\"><mi>y</mi><mo value=\"’\">’</mo></span> in the following way:</strong></p><p class=\"text-center\"><x-math data-voice=\"_x_ ’ _y_ ’\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi><mo value=\"’\">’</mo></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi><mo value=\"’\">’</mo></mfenced></mfenced></x-math> = <x-math data-voice=\"cosθ of minus sinθ sinθ cosθ\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>cosθ</mi><mfenced><mo value=\"−\">−</mo><mi>sinθ</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mi>sinθ</mi><mi>cosθ</mi></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><span class=\"pill teal\"><mi>x</mi></span></mfenced><mfenced open=\"[\" close=\"]\"><span class=\"pill purple\"><mi>y</mi></span></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ times cosθ minus _y_ times sinθ _x_ times sinθ plus _y_ times cosθ\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><span class=\"pill step-target teal\" data-to=\"x\" tabindex=\"0\"><mi>x</mi></span><mo value=\"·\">·</mo><mi>cosθ</mi><mo value=\"−\">−</mo><span class=\"pill purple\"><mi>y</mi></span><mo value=\"·\">·</mo><mi>sinθ</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><span class=\"pill teal\"><mi>x</mi></span><mo value=\"·\">·</mo><mi>sinθ</mi><mo value=\"+\">+</mo><span class=\"pill purple\"><mi>y</mi></span><mo value=\"·\">·</mo><mi>cosθ</mi></mfenced></mfenced></mfenced></x-math></p><p>This is a <span class=\"nowrap\"><x-gloss xid=\"matrix-multiplication\">matrix multiplication</x-gloss>,</span> wherein we multiply a matrix times a vector <span class=\"math\" data-voice=\"_x_ _y_\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi></mfenced></span> to get a new vector <span class=\"nowrap\"><span class=\"math\" data-voice=\"_x_ ’ _y_ ’\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\",\" lspace=\"0\">,</mo><mi>y</mi><mo value=\"’\">’</mo></mfenced></span>.</span> <span class=\"step-target pill\" tabindex=\"0\" data-to=\"rotation-matrix\">This matrix</span> is the transformation <span class=\"math\" data-voice=\"_R_ θ\"><msub><mi>R</mi><mtext>θ</mtext></msub></span> that we have been looking for! When we change the values within this matrix, we can change the transformation.</p><p class=\"fixme\"> Here is another representation:</p><div class=\"row padded\"><div style=\"width: 100px\"> <table class=\"vector\"><tbody><tr><td target=\"feature pref-A-1\"><b>x'</b></td></tr><tr><td target=\"feature pref-A-2\"><b>y'</b></td></tr></tbody></table></div><div style=\"width: 20px\"> <div class=\"op\">=</div></div><div style=\"width: 200px\"> <table class=\"matrix\"><tbody><tr><td target=\"feature pref-A-1\"><b>cosθ</b></td><td target=\"feature pref-A-2\"><b>-sinθ</b></td></tr><tr><td class=\"name\" target=\"pref-A-1 pref-A-2\"><b class=\"m-green\">sinθ</b></td><td class=\"cell\" target=\"pref-A-1\">cosθ</td></tr></tbody></table></div><div style=\"width: 20px\"> <div class=\"op\">x</div></div><div style=\"width: 100px\"> <table class=\"vector\"><tbody><tr><td target=\"feature pref-A-1\"><b>x</b></td></tr><tr><td target=\"feature pref-A-2\"><b>y</b></td></tr></tbody></table></div><div style=\"width: 20px\"> <div class=\"op\">=</div></div><div style=\"width: 400px\"> <table class=\"vector\"><tbody><tr><td><div target=\"x\">cosθ * x</div><div class=\"op\">+</div><div target=\"y\">-sinθ * y</div></td></tr><tr><td><div target=\"x\">sinθ * x</div><div class=\"op\">+</div><div target=\"y\">cosθ * y</div></td></tr></tbody></table></div></div> <p class=\"fixme\"> Activity where student can drag slider to adjust θ and the matrix values are updated (up to two decimal points).</p><p><span class=\"step-target pill\" tabindex=\"0\" data-to=\"x\">Hover x</span> and <span class=\"step-target pill\" tabindex=\"0\" data-to=\"y\">Hover y</span></p><p class=\"todo\"> Stronger Connection between matrices and what it means to be a \"transformation\"</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"identity":{"id":"identity","title":"Identity","html":"<x-step id=\"identity\" goals=\"blank-0\"><h3>Identity Matrix</h3><p>What if for our matrix, we wrote this instead?</p><p class=\"text-center\"> <x-math data-voice=\"1 0 0 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>1</mn></mfenced></mfenced></x-math></p><p>What happens when we apply this transformation to the vector <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math>?</p><p class=\"text-center\"> <x-math data-voice=\"1 0 0 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>1</mn></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"1 times _x_ plus 0 times _y_ 0 times _x_ plus 1 times _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><mn>1</mn><mo value=\"·\">·</mo><mi>x</mi><mo value=\"+\">+</mo><mn>0</mn><mo value=\"·\">·</mo><mi>y</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><mn>0</mn><mo value=\"·\">·</mo><mi>x</mi><mo value=\"+\">+</mo><mn>1</mn><mo value=\"·\">·</mo><mi>y</mi></mfenced></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math></p><p class=\"fixme\"> The student should fill in these values on their own.</p><p>This transformation <x-blank-mc goal=\"blank-0\"><button class=\"choice\">has no effect on</button><button class=\"choice\">reverses</button><button class=\"choice\">negates</button></x-blank-mc> the vector <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math>.</p></x-step>","goals":["blank-0"],"keywords":[]},"step-10":{"id":"step-10","title":"Step  ","html":"<x-step id=\"step-10\" goals=\"next-0\"><p class=\"text-center\"><span class=\"math\" data-voice=\"_x_ ’ equals _x_\"><mi>x</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><mi>x</mi></span> and <span class=\"math\" data-voice=\"_y_ ’ equals _y_\"><mi>y</mi><mo value=\"’\">’</mo><mo value=\"=\">=</mo><mi>y</mi></span></p><p>For any vector, the result of the transforation will be the same. This is called the <span class=\"nowrap\"><x-gloss xid=\"identity-matrix\">identity matrix</x-gloss>,</span> because its product with any 2x1 vector is that identical 2x1 vector. This is much like <span class=\"math\" data-voice=\"1\"><mn>1</mn></span> is the identity function for integer multiplication (<span class=\"math\" data-voice=\"1 _x_ _n_ equals _n_\"><mn>1</mn><mi>x</mi><mi>n</mi><mo value=\"=\">=</mo><mi>n</mi></span>) and <span class=\"math\" data-voice=\"0\"><mn>0</mn></span> is the identity function for addition (<span class=\"math\" data-voice=\"0 plus _n_ equals _n_\"><mn>0</mn><mo value=\"+\">+</mo><mi>n</mi><mo value=\"=\">=</mo><mi>n</mi></span>).</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"basic-transformations":{"id":"basic-transformations","title":"Basic Transformations","html":"<x-step id=\"basic-transformations\" goals=\"blank-0 blank-1 var-0 var-1 var-2 var-3 var-4 var-5\"><p>We have already seen how we can multiply a vector by a 2x2 matrix to rotate that vector about the origin, and we have seen how the identity matrix leaves the vector unchanged. What other transformations exist?</p><x-tabbox><div class=\"tab\"> <h3>Scale</h3><p>What if we adjust the top-left and bottom-right numbers of our transformation matrix?</p><p></p><p></p><p></p><p></p><p></p><p></p><table><tbody><tr><td><x-var bind=\"xscale|1.0|-2.0,2.0,0.1\" goal=\"var-0\">${xscale}</x-var></td><td>0</td></tr><tr><td>0</td><td><x-var bind=\"yscale|1.0|-2.0,2.0,0.1\" goal=\"var-1\">${yscale}</x-var></td></tr></tbody></table> <svg width=\"220\" height=\"220\"><g class=\"grid\"><line x1=\"10\" x2=\"10\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"30\" x2=\"30\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"50\" x2=\"50\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"70\" x2=\"70\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"90\" x2=\"90\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"110\" x2=\"110\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"130\" x2=\"130\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"150\" x2=\"150\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"170\" x2=\"170\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"190\" x2=\"190\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"210\" x2=\"210\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"10\" y2=\"10\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"30\" y2=\"30\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"50\" y2=\"50\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"70\" y2=\"70\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"90\" y2=\"90\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"110\" y2=\"110\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"0\" x2=\"220\" y1=\"130\" y2=\"130\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"150\" y2=\"150\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"170\" y2=\"170\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"190\" y2=\"190\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"210\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line></g><g class=\"var scale\" :html=\"polygonTransform(xscale, 0, 0, yscale)\"></g></svg><p></p><p>Changing the <span class=\"step-target pill\" tabindex=\"0\" data-to=\"ma\">top-left</span> value scales x' along the x-axis.</p><p>Changing the <span class=\"step-target pill\" tabindex=\"0\" data-to=\"md\">bottom-right</span> value scales y' along the y-axis.</p><p class=\"text-center\"> <x-math data-voice=\"_a_ 0 0 _d_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>a</mi><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mi>d</mi></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"_a_ times _x_ plus 0 times _y_ 0 times _x_ plus _d_ times _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>a</mi><mo value=\"·\">·</mo><mi>x</mi><mo value=\"+\">+</mo><mn>0</mn><mo value=\"·\">·</mo><mi>y</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mo value=\"·\">·</mo><mi>x</mi><mo value=\"+\">+</mo><mi>d</mi><mo value=\"·\">·</mo><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"ax dy\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>ax</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>dy</mi></mfenced></mfenced></x-math></p><p class=\"fixme\"> formatting and input.</p><p class=\"fixme\"> Add some code that lets us snap to x-big, x-shrink, x-reverse, y-big, y-shrink, y-reverse, etc.</p></div><div class=\"tab\"> <h3>Reflections</h3><p>What happens when we make the top-left and bottom-right values negative or positive?</p><p>Adjust the matrix to see how it changes in the coordinates.</p><p></p><p></p><p></p><p></p><p></p><p></p><table><tbody><tr><td><x-var bind=\"xreflect|1.0|-1,1,2\" goal=\"var-2\">${xreflect}</x-var></td><td>0</td></tr><tr><td>0</td><td><x-var bind=\"yreflect|1.0|-1,1,2\" goal=\"var-3\">${yreflect}</x-var></td></tr></tbody></table> <svg width=\"220\" height=\"220\"><g class=\"grid\"><line x1=\"10\" x2=\"10\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"30\" x2=\"30\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"50\" x2=\"50\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"70\" x2=\"70\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"90\" x2=\"90\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"110\" x2=\"110\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"130\" x2=\"130\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"150\" x2=\"150\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"170\" x2=\"170\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"190\" x2=\"190\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"210\" x2=\"210\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"10\" y2=\"10\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"30\" y2=\"30\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"50\" y2=\"50\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"70\" y2=\"70\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"90\" y2=\"90\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"110\" y2=\"110\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"0\" x2=\"220\" y1=\"130\" y2=\"130\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"150\" y2=\"150\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"170\" y2=\"170\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"190\" y2=\"190\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"210\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line></g><g class=\"var scale\" :html=\"polygonTransform(xreflect, 0, 0, yreflect)\"></g></svg><p></p><p>Flipping the sign of the <span class=\"step-target pill\" tabindex=\"0\" data-to=\"ma\">top-left</span> value reflects the transformation across the <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">x-axis</button><button class=\"choice\">y-axis</button></x-blank-mc>,</span> and flipping the sign of the <span class=\"step-target pill\" tabindex=\"0\" data-to=\"ma\">bottom-right</span> value reflects the transformation across the <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">y-axis</button><button class=\"choice\">x-axis</button></x-blank-mc>.</span></p><p class=\"text-center\"> <x-math data-voice=\"_a_ 0 0 _d_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>a</mi><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mi>d</mi></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"_a_ times _x_ plus 0 times _y_ 0 times _x_ plus _d_ times _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>a</mi><mo value=\"·\">·</mo><mi>x</mi><mo value=\"+\">+</mo><mn>0</mn><mo value=\"·\">·</mo><mi>y</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mo value=\"·\">·</mo><mi>x</mi><mo value=\"+\">+</mo><mi>d</mi><mo value=\"·\">·</mo><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"ax dy\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>ax</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>dy</mi></mfenced></mfenced></x-math></p><p class=\"fixme\"> formatting and input.</p></div><div class=\"tab\"> <h3>Shear</h3><p>What if we adjust the values in the <span class=\"step-target pill\" tabindex=\"0\" data-to=\"mb\">top-right</span> and <span class=\"step-target pill\" tabindex=\"0\" data-to=\"mc\">bottom-left</span> corners of the matrix?</p><p>Adjust the matrices to see how they change the transformations.</p><div class=\"row padded\"><div style=\"width: 220px\"> <p class=\"caption\"> A shear in the x direction.</p><svg width=\"220\" height=\"220\"><g class=\"grid\"><line x1=\"10\" x2=\"10\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"30\" x2=\"30\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"50\" x2=\"50\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"70\" x2=\"70\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"90\" x2=\"90\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"110\" x2=\"110\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"130\" x2=\"130\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"150\" x2=\"150\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"170\" x2=\"170\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"190\" x2=\"190\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"210\" x2=\"210\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"10\" y2=\"10\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"30\" y2=\"30\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"50\" y2=\"50\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"70\" y2=\"70\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"90\" y2=\"90\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"110\" y2=\"110\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"0\" x2=\"220\" y1=\"130\" y2=\"130\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"150\" y2=\"150\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"170\" y2=\"170\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"190\" y2=\"190\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"210\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line></g><g class=\"var shear\" :html=\"polygonTransform(1, xshear, 0, 1)\"></g></svg><p></p><p></p><p></p><p></p><p></p><p></p><table><tbody><tr><td>1</td><td><x-var bind=\"xshear|0.0|-2.0,2.0,0.1\" goal=\"var-4\">${xshear}</x-var></td></tr><tr><td>0</td><td>1</td></tr></tbody></table> <p></p><p><x-math data-voice=\"1 _b_ 0 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mi>b</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>1</mn></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ plus by _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\"+\">+</mo><mi>by</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math></p><p class=\"fixme\"> formatting and inputs</p></div><div style=\"width: 220px\"> <p class=\"caption\"> A shear in the y direction.</p><svg width=\"220\" height=\"220\"><g class=\"grid\"><line x1=\"10\" x2=\"10\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"30\" x2=\"30\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"50\" x2=\"50\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"70\" x2=\"70\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"90\" x2=\"90\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"110\" x2=\"110\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"130\" x2=\"130\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"150\" x2=\"150\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"170\" x2=\"170\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"190\" x2=\"190\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"210\" x2=\"210\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"10\" y2=\"10\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"30\" y2=\"30\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"50\" y2=\"50\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"70\" y2=\"70\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"90\" y2=\"90\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"110\" y2=\"110\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"0\" x2=\"220\" y1=\"130\" y2=\"130\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"150\" y2=\"150\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"170\" y2=\"170\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"190\" y2=\"190\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"210\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line></g><g class=\"var shear\" :html=\"polygonTransform(1, 0, yshear, 1)\"></g></svg><p></p><p></p><p></p><p></p><p></p><p></p><table><tbody><tr><td>1</td><td>0</td></tr><tr><td><x-var bind=\"yshear|0.0|-2.0,2.0,0.1\" goal=\"var-5\">${yshear}</x-var></td><td>1</td></tr></tbody></table> <p></p><p><x-math data-voice=\"1 0 _c_ 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mi>c</mi><mn>1</mn></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ cx plus _y_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>cx</mi><mo value=\"+\">+</mo><mi>y</mi></mfenced></mfenced></x-math></p><p class=\"fixme\"> formatting and inputs</p></div></div> <p>Now add some buttons and code that make it snap to a set of matrix values.</p><p>These types of transformations are called <span class=\"nowrap\"><x-gloss xid=\"shear\">shear transformations</x-gloss>,</span> because they shear the coordinate system in a perpindicular proportion (?phrasing?).</p></div><div class=\"tab\"> <h3>Other</h3><p>Of course, matrices can have any values in them, and thus can transform in many ways. Play with the values here and see how the transformation is still some combination of the basic transformations.</p><p class=\"todo\"> Free reign to do whatever they want. Or just keep this separate, as shown below.</p></div></x-tabbox> </x-step>","goals":["blank-0","blank-1","var-0","var-1","var-2","var-3","var-4","var-5"],"keywords":[]},"play-with-me":{"id":"play-with-me","title":"Play With Me","html":"<x-step id=\"play-with-me\" goals=\"next-0\"><p>Try adjusting the values in the matrix and see what kind of transformations you can make!</p><x-geopad width=\"400\" x-axis=\"-8,8,1\" y-axis=\"-8,8,1\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green move\" name=\"ipoint\" x=\"point(1,0)\" target=\"i\"></circle><circle class=\"blue move\" name=\"jpoint\" x=\"point(0,1)\" target=\"j\"></circle><circle name=\"origin\" x=\"point(0,0)\"></circle><path class=\"fabric\" x=\"line(point(-16*jpoint.x, -16*jpoint.y), point(ipoint.x + -16*jpoint.x, ipoint.y + -16*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-16*ipoint.x, -16*ipoint.y), point(-16*ipoint.x + jpoint.x, -16*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-15*jpoint.x, -15*jpoint.y), point(ipoint.x + -15*jpoint.x, ipoint.y + -15*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-15*ipoint.x, -15*ipoint.y), point(-15*ipoint.x + jpoint.x, -15*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-14*jpoint.x, -14*jpoint.y), point(ipoint.x + -14*jpoint.x, ipoint.y + -14*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-14*ipoint.x, -14*ipoint.y), point(-14*ipoint.x + jpoint.x, -14*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-13*jpoint.x, -13*jpoint.y), point(ipoint.x + -13*jpoint.x, ipoint.y + -13*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-13*ipoint.x, -13*ipoint.y), point(-13*ipoint.x + jpoint.x, -13*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-12*jpoint.x, -12*jpoint.y), point(ipoint.x + -12*jpoint.x, ipoint.y + -12*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-12*ipoint.x, -12*ipoint.y), point(-12*ipoint.x + jpoint.x, -12*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-11*jpoint.x, -11*jpoint.y), point(ipoint.x + -11*jpoint.x, ipoint.y + -11*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-11*ipoint.x, -11*ipoint.y), point(-11*ipoint.x + jpoint.x, -11*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-10*jpoint.x, -10*jpoint.y), point(ipoint.x + -10*jpoint.x, ipoint.y + -10*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-10*ipoint.x, -10*ipoint.y), point(-10*ipoint.x + jpoint.x, -10*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-9*jpoint.x, -9*jpoint.y), point(ipoint.x + -9*jpoint.x, ipoint.y + -9*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-9*ipoint.x, -9*ipoint.y), point(-9*ipoint.x + jpoint.x, -9*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-8*jpoint.x, -8*jpoint.y), point(ipoint.x + -8*jpoint.x, ipoint.y + -8*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-8*ipoint.x, -8*ipoint.y), point(-8*ipoint.x + jpoint.x, -8*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-7*jpoint.x, -7*jpoint.y), point(ipoint.x + -7*jpoint.x, ipoint.y + -7*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-7*ipoint.x, -7*ipoint.y), point(-7*ipoint.x + jpoint.x, -7*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-6*jpoint.x, -6*jpoint.y), point(ipoint.x + -6*jpoint.x, ipoint.y + -6*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-6*ipoint.x, -6*ipoint.y), point(-6*ipoint.x + jpoint.x, -6*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-5*jpoint.x, -5*jpoint.y), point(ipoint.x + -5*jpoint.x, ipoint.y + -5*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-5*ipoint.x, -5*ipoint.y), point(-5*ipoint.x + jpoint.x, -5*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-4*jpoint.x, -4*jpoint.y), point(ipoint.x + -4*jpoint.x, ipoint.y + -4*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-4*ipoint.x, -4*ipoint.y), point(-4*ipoint.x + jpoint.x, -4*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-3*jpoint.x, -3*jpoint.y), point(ipoint.x + -3*jpoint.x, ipoint.y + -3*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-3*ipoint.x, -3*ipoint.y), point(-3*ipoint.x + jpoint.x, -3*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-2*jpoint.x, -2*jpoint.y), point(ipoint.x + -2*jpoint.x, ipoint.y + -2*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-2*ipoint.x, -2*ipoint.y), point(-2*ipoint.x + jpoint.x, -2*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-1*jpoint.x, -1*jpoint.y), point(ipoint.x + -1*jpoint.x, ipoint.y + -1*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-1*ipoint.x, -1*ipoint.y), point(-1*ipoint.x + jpoint.x, -1*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(0*jpoint.x, 0*jpoint.y), point(ipoint.x + 0*jpoint.x, ipoint.y + 0*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(0*ipoint.x, 0*ipoint.y), point(0*ipoint.x + jpoint.x, 0*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(1*jpoint.x, 1*jpoint.y), point(ipoint.x + 1*jpoint.x, ipoint.y + 1*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(1*ipoint.x, 1*ipoint.y), point(1*ipoint.x + jpoint.x, 1*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(2*jpoint.x, 2*jpoint.y), point(ipoint.x + 2*jpoint.x, ipoint.y + 2*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(2*ipoint.x, 2*ipoint.y), point(2*ipoint.x + jpoint.x, 2*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(3*jpoint.x, 3*jpoint.y), point(ipoint.x + 3*jpoint.x, ipoint.y + 3*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(3*ipoint.x, 3*ipoint.y), point(3*ipoint.x + jpoint.x, 3*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(4*jpoint.x, 4*jpoint.y), point(ipoint.x + 4*jpoint.x, ipoint.y + 4*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(4*ipoint.x, 4*ipoint.y), point(4*ipoint.x + jpoint.x, 4*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(5*jpoint.x, 5*jpoint.y), point(ipoint.x + 5*jpoint.x, ipoint.y + 5*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(5*ipoint.x, 5*ipoint.y), point(5*ipoint.x + jpoint.x, 5*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(6*jpoint.x, 6*jpoint.y), point(ipoint.x + 6*jpoint.x, ipoint.y + 6*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(6*ipoint.x, 6*ipoint.y), point(6*ipoint.x + jpoint.x, 6*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(7*jpoint.x, 7*jpoint.y), point(ipoint.x + 7*jpoint.x, ipoint.y + 7*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(7*ipoint.x, 7*ipoint.y), point(7*ipoint.x + jpoint.x, 7*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(8*jpoint.x, 8*jpoint.y), point(ipoint.x + 8*jpoint.x, ipoint.y + 8*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(8*ipoint.x, 8*ipoint.y), point(8*ipoint.x + jpoint.x, 8*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(9*jpoint.x, 9*jpoint.y), point(ipoint.x + 9*jpoint.x, ipoint.y + 9*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(9*ipoint.x, 9*ipoint.y), point(9*ipoint.x + jpoint.x, 9*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(10*jpoint.x, 10*jpoint.y), point(ipoint.x + 10*jpoint.x, ipoint.y + 10*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(10*ipoint.x, 10*ipoint.y), point(10*ipoint.x + jpoint.x, 10*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(11*jpoint.x, 11*jpoint.y), point(ipoint.x + 11*jpoint.x, ipoint.y + 11*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(11*ipoint.x, 11*ipoint.y), point(11*ipoint.x + jpoint.x, 11*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(12*jpoint.x, 12*jpoint.y), point(ipoint.x + 12*jpoint.x, ipoint.y + 12*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(12*ipoint.x, 12*ipoint.y), point(12*ipoint.x + jpoint.x, 12*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(13*jpoint.x, 13*jpoint.y), point(ipoint.x + 13*jpoint.x, ipoint.y + 13*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(13*ipoint.x, 13*ipoint.y), point(13*ipoint.x + jpoint.x, 13*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(14*jpoint.x, 14*jpoint.y), point(ipoint.x + 14*jpoint.x, ipoint.y + 14*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(14*ipoint.x, 14*ipoint.y), point(14*ipoint.x + jpoint.x, 14*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(15*jpoint.x, 15*jpoint.y), point(ipoint.x + 15*jpoint.x, ipoint.y + 15*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(15*ipoint.x, 15*ipoint.y), point(15*ipoint.x + jpoint.x, 15*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(16*jpoint.x, 16*jpoint.y), point(ipoint.x + 16*jpoint.x, ipoint.y + 16*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(16*ipoint.x, 16*ipoint.y), point(16*ipoint.x + jpoint.x, 16*ipoint.y + jpoint.y))\"></path><path class=\"fill gray\" x=\"polygon(point(-0.25*ipoint.x+-4*jpoint.x,-0.25*ipoint.y+-4*jpoint.y),point(0.25*ipoint.x+-4*jpoint.x,0.25*ipoint.y+-4*jpoint.y),point(0.25*ipoint.x+7*jpoint.x,0.25*ipoint.y+7*jpoint.y),point(-0.25*ipoint.x+7*jpoint.x,-0.25*ipoint.y+7*jpoint.y))\" label-class=\"gray\"></path><path class=\"fill red\" x=\"polygon(point(0.25*ipoint.x+-2.5*jpoint.x,0.25*ipoint.y+-2.5*jpoint.y),point(6.5*ipoint.x+-2.5*jpoint.x,6.5*ipoint.y+-2.5*jpoint.y),point(0.25*ipoint.x+7*jpoint.x,0.25*ipoint.y+7*jpoint.y))\" label-class=\"red\"></path><path class=\"fill purple\" x=\"polygon(point(-0.25*ipoint.x+-1.5*jpoint.x,-0.25*ipoint.y+-1.5*jpoint.y),point(-4.25*ipoint.x+-1.5*jpoint.x,-4.25*ipoint.y+-1.5*jpoint.y),point(-0.25*ipoint.x+7*jpoint.x,-0.25*ipoint.y+7*jpoint.y))\" label-class=\"purple\"></path><path class=\"fill orange\" x=\"polygon(point(0*ipoint.x+5*jpoint.x,0*ipoint.y+5*jpoint.y),point(0*ipoint.x+7.5*jpoint.x,0*ipoint.y+7.5*jpoint.y),point(-3.75*ipoint.x+6.25*jpoint.x,-3.75*ipoint.y+6.25*jpoint.y))\" label-class=\"orange\"></path><path class=\"fill green\" x=\"polygon(point(7*ipoint.x+-4*jpoint.x,7*ipoint.y+-4*jpoint.y),point(5*ipoint.x+-6*jpoint.x,5*ipoint.y+-6*jpoint.y),point(-5*ipoint.x+-6*jpoint.x,-5*ipoint.y+-6*jpoint.y),point(-7*ipoint.x+-4*jpoint.x,-7*ipoint.y+-4*jpoint.y))\" label-class=\"green\"></path><circle class=\"green\" name=\"bgn0\" x=\"point(7*ipoint.x+-4*jpoint.x,7*ipoint.y+-4*jpoint.y)\"></circle><circle class=\"green\" name=\"bgn1\" x=\"point(5*ipoint.x+-6*jpoint.x,5*ipoint.y+-6*jpoint.y)\"></circle><circle class=\"green\" name=\"bgn2\" x=\"point(-5*ipoint.x+-6*jpoint.x,-5*ipoint.y+-6*jpoint.y)\"></circle><circle class=\"green\" name=\"bgn3\" x=\"point(-7*ipoint.x+-4*jpoint.x,-7*ipoint.y+-4*jpoint.y)\"></circle><path class=\"green\" x=\"segment(point(0,0),ipoint)\" label=\"i\" target=\"i\"></path><path class=\"blue\" x=\"segment(point(0,0),jpoint)\" label=\"j\" target=\"j\"></path></svg></x-geopad><p>Here we display the <span class=\"step-target pill\" tabindex=\"0\" data-to=\"i\">i</span> and <span class=\"step-target pill\" tabindex=\"0\" data-to=\"j\">j</span> unit vectors. Inside the matrix we have i = (<span class=\"var\">${ipoint.x}</span>, <span class=\"var\">${ipoint.y}</span>) and j = (<span class=\"var\">${jpoint.x}</span>, <span class=\"var\">${jpoint.y}</span>)</p><p>Choose one of these buttons to snap to different transformations.</p><div class=\"button\">IDENTITY</div><div class=\"button\">SHEAR</div><div class=\"button\">SCALE</div><div class=\"button\">ROTATE</div><div class=\"button\">LINE</div><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"gpu":{"id":"gpu","title":"Gpu","html":"<x-step id=\"gpu\" goals=\"next-0\"><p class=\"todo\"> How does this relate to video games?</p><p>Video games can manipulate and millions of shapes per second with use of a <strong>Graphical Processing Unit</strong> (GPU). GPUs are specially designed to perform many matrix multiplications at once.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"translate":{"id":"translate","title":"Translate","html":"<x-step id=\"translate\" goals=\"next-0\"><p>You may have noticed we have not discussed one type of transformation. We cannot move our shapes through space! To transform our shapes so they are centered anywhere but the origin, we need a special kind of matrix called a <strong>Translation Matrix</strong>.</p><p class=\"text-center\"> <x-math data-voice=\"1 0 dx 0 1 dy 0 0 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mn>0</mn><mi>dx</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>1</mn><mi>dy</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>0</mn><mn>1</mn></mfenced></mfenced></x-math></p><p>We add an extra row and column to our 2x2 matrix, and we add an extra row to our vector (which will not change).</p><p>The factor <span class=\"step-target pill\" tabindex=\"0\" data-to=\"dx\">dx</span> will be multiplied by <span class=\"step-target pill\" tabindex=\"0\" data-to=\"bottom1\">1</span> and added to the final <span class=\"step-target pill\" tabindex=\"0\" data-to=\"xprime\">x'</span> value. The factor <span class=\"step-target pill\" tabindex=\"0\" data-to=\"dy\">dy</span> will be multiplied by <span class=\"step-target pill\" tabindex=\"0\" data-to=\"bottom1\">1</span> and added to the final <span class=\"step-target pill\" tabindex=\"0\" data-to=\"xprime\">y'</span> value.</p><p class=\"text-center\"> <x-math data-voice=\"1 0 dx 0 1 dy 0 0 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mn>0</mn><mi>dx</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>1</mn><mi>dy</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>0</mn><mn>1</mn></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_ 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced><mfenced open=\"[\" close=\"]\"><mn>1</mn></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ plus dx _y_ plus dy 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><mi>x</mi><mo value=\"+\">+</mo><mi>dx</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mfenced open=\"(\" close=\")\"><mi>y</mi><mo value=\"+\">+</mo><mi>dy</mi></mfenced></mfenced><mfenced open=\"[\" close=\"]\"><mn>1</mn></mfenced></mfenced></x-math></p><p class=\"fixme\"> Focus effects.</p><p class=\"todo\"> Possibly an interactive like ncase?</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"three-d":{"id":"three-d","title":"Three D","html":"<x-step id=\"three-d\" goals=\"next-0\"><p>Matrices do not have to represent transformations in 2 dimensions. They can also exist in 3 or higher dimensions.</p><p>This is the identity matrix for three dimensions</p><p class=\"text-center\"> <x-math data-voice=\"1 0 0 0 1 0 0 0 1\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mn>1</mn><mn>0</mn><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>1</mn><mn>0</mn></mfenced><mfenced open=\"[\" close=\"]\"><mn>0</mn><mn>0</mn><mn>1</mn></mfenced></mfenced></x-math> x <x-math data-voice=\"_x_ _y_ _z_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>z</mi></mfenced></mfenced></x-math> = <x-math data-voice=\"_x_ _y_ _z_\"><mfenced open=\"[\" close=\"]\"><mfenced open=\"[\" close=\"]\"><mi>x</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>y</mi></mfenced><mfenced open=\"[\" close=\"]\"><mi>z</mi></mfenced></mfenced></x-math></p><p class=\"todo\"> An interaction with a 3d transformation.</p><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"mathigon-matrix":{"id":"mathigon-matrix","title":"Mathigon Matrix","html":"<x-step id=\"mathigon-matrix\" goals=\"var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9 var-10 var-11 var-12 var-13 var-14 var-15\"><p>Let's mess around with the Mathigon Logo!</p><svg width=\"220\" height=\"220\"><g class=\"grid\"><line x1=\"10\" x2=\"10\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"30\" x2=\"30\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"50\" x2=\"50\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"70\" x2=\"70\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"90\" x2=\"90\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"110\" x2=\"110\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"130\" x2=\"130\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"150\" x2=\"150\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"170\" x2=\"170\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"190\" x2=\"190\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"210\" x2=\"210\" y1=\"0\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"10\" y2=\"10\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"30\" y2=\"30\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"50\" y2=\"50\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"70\" y2=\"70\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"90\" y2=\"90\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"110\" y2=\"110\" stroke=\"#e6e6e6\" stroke-width=\"4\"></line><line x1=\"0\" x2=\"220\" y1=\"130\" y2=\"130\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"150\" y2=\"150\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"170\" y2=\"170\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"190\" y2=\"190\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line><line x1=\"0\" x2=\"220\" y1=\"210\" y2=\"210\" stroke=\"#e6e6e6\" stroke-width=\"2\"></line></g><g class=\"var mathigon red\" :html=\"polygonTransform(m1a, m1b, m1c, m1d, 'red')\"></g><g class=\"var mathigon green\" :html=\"polygonTransform(m2a, m2b, m2c, m2d, 'green')\"></g><g class=\"var mathigon yellow\" :html=\"polygonTransform(m3a, m3b, m3c, m3d, 'yellow')\"></g><g class=\"var mathigon blue\" :html=\"polygonTransform(m4a, m4b, m4c, m4d, 'blue')\"></g></svg><p></p><p></p><table> <tbody><tr> <td> <table> <tbody><tr><td><x-var bind=\"m1a|1|-2.0,2.0,0.1\" goal=\"var-0\">${m1a}</x-var></td><td><x-var bind=\"m1b|0.0|-2.0,2.0,0.1\" goal=\"var-1\">${m1b}</x-var></td></tr> <tr><td><x-var bind=\"m1c|0.0|-2.0,2.0,0.1\" goal=\"var-2\">${m1c}</x-var></td><td><x-var bind=\"m1d|1|-2.0,2.0,0.1\" goal=\"var-3\">${m1d}</x-var></td></tr> </tbody></table> </td> <td> <table class=\"green\"> <tbody><tr><td><x-var bind=\"m2a|1|-2.0,2.0,0.1\" goal=\"var-4\">${m2a}</x-var></td><td><x-var bind=\"m2b|0.0|-2.0,2.0,0.1\" goal=\"var-5\">${m2b}</x-var></td></tr> <tr><td><x-var bind=\"m2c|0.0|-2.0,2.0,0.1\" goal=\"var-6\">${m2c}</x-var></td><td><x-var bind=\"m2d|1|-2.0,2.0,0.1\" goal=\"var-7\">${m2d}</x-var></td></tr> </tbody></table> </td> </tr> <tr> <td> <table class=\"yellow\"> <tbody><tr><td><x-var bind=\"m3a|1|-2.0,2.0,0.1\" goal=\"var-8\">${m3a}</x-var></td><td><x-var bind=\"m3b|0.0|-2.0,2.0,0.1\" goal=\"var-9\">${m3b}</x-var></td></tr> <tr><td><x-var bind=\"m3c|0.0|-2.0,2.0,0.1\" goal=\"var-10\">${m3c}</x-var></td><td><x-var bind=\"m3d|1|-2.0,2.0,0.1\" goal=\"var-11\">${m3d}</x-var></td></tr> </tbody></table> </td> <td> <table class=\"blue\"> <tbody><tr><td><x-var bind=\"m4a|1|-2.0,2.0,0.1\" goal=\"var-12\">${m4a}</x-var></td><td><x-var bind=\"m4b|0.0|-2.0,2.0,0.1\" goal=\"var-13\">${m4b}</x-var></td></tr> <tr><td><x-var bind=\"m4c|0.0|-2.0,2.0,0.1\" goal=\"var-14\">${m4c}</x-var></td><td><x-var bind=\"m4d|1|-2.0,2.0,0.1\" goal=\"var-15\">${m4d}</x-var></td></tr> </tbody></table> </td> </tr></tbody></table> <p></p><p class=\"todo\"> Possible Activities: switch Orange and Green, reflect/scale the whole thing, make shapes.</p></x-step>","goals":["var-0","var-1","var-2","var-3","var-4","var-5","var-6","var-7","var-8","var-9","var-10","var-11","var-12","var-13","var-14","var-15"],"keywords":[]},"multiplication":{"id":"multiplication","title":"Multiplication","html":"<x-step id=\"multiplication\" goals=\"blank-0 blank-1\"><h2>Matrix Multiplication</h2><p>We learned in the last chapter that matrices can represent linear transformations. However, there are many other things that matrices can represent! Also, matrices do not always have to be <span class=\"nowrap\"><x-gloss xid=\"square-matrix\">square matrices</x-gloss>,</span> but can have many different dimensional values. Let's explore this with a hypothetical scenario.</p><p>Four friends are in a new city and they're looking for a restaurant to eat at together. What are some features they might look for in a restaurant?</p><ul> <li>Outdoor seating</li><li>Vegetarian food</li><li>Low price</li><li>Spicy food</li><li>Kid's menu</li><li>Good wine selection</li></ul> <p>Each friend has preferences for how important these things are, which we can quantify with a value 0 (not important) to 4 (very important). If we create a table with friends on the left-most column and restaurant features across the top row, we can fill in the cells of the table with each friend's preference for that feature.</p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-frn-fea.png\" alt=\"\"></figure><p>What we have built here is a 4 by 2 matrix. We have four rows to represent the four <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">friends</button><button class=\"choice\">features</button><button class=\"choice\">restaurants</button></x-blank-mc>,</span> and two columns to represent the two <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">features</button><button class=\"choice\">friends</button><button class=\"choice\">restaurants</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-18":{"id":"step-18","title":"Step  ","html":"<x-step id=\"step-18\" goals=\"blank-0 blank-1\"><p>The friends have found three restaurants within walking distance, and they have pulled up the websites for each. Lucky for them, each restaurants' website has listed the quality of the features that the friends have quantified: availability of outdoor seating, and vegetarian options.</p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-fea-res.png\" alt=\"\"></figure><p>This is a 2 by 3 matrix. There are two rows to represent the two <x-blank-mc goal=\"blank-0\"><button class=\"choice\">features</button><button class=\"choice\">restaurants</button></x-blank-mc> and three rows, one to represent each <span class=\"nowrap\"><x-blank-mc goal=\"blank-1\"><button class=\"choice\">restaurant</button><button class=\"choice\">feature</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"step-19":{"id":"step-19","title":"Step  ","html":"<x-step id=\"step-19\" goals=\"blank-0 blank-1 blank-2 blank-3 blank-4 blank-5 blank-6 blank-7 blank-8 blank-9 blank-10\"><p class=\"fixme\"> Begin side-by-side column display.</p><p>What we would like to do is somehow synthesize these two tables of information so we can get a sense of how much each person might like each restaurant. We can use a procedure called <x-gloss xid=\"matrix-multiplication\">matrix multiplication</x-gloss> to do this. The result will be a <em>new</em> table with the friends as <x-blank solution=\"rows\" goal=\"blank-0\"></x-blank> and the restaurants as <span class=\"nowrap\"><x-blank solution=\"columns\" goal=\"blank-1\"></x-blank>.</span></p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-frn-res-empty.png\" alt=\"\"></figure><p>How should we fill out this table? The value of each cell should represent how much each person might like each restaurant.</p><p>For example, the first cell will represent how much Alice might like <span class=\"nowrap\"><x-blank-mc goal=\"blank-2\"><button class=\"choice\">Gauss Grill</button><button class=\"choice\">Laplace Lounge</button></x-blank-mc>.</span></p><figure><img src=\"/content/matrices/images/proto-2/mult-alice-gauss.png\" alt=\"\"></figure><p>Alice has a preference of 1 for Outdoor Seating, and Gauss Grill has a value of 3 for Outdoor Seating, and we multiply these to get <span class=\"nowrap\"><x-blank solution=\"3\" goal=\"blank-3\"></x-blank>.</span></p><p>Alice has a preference of 4 for Vegetarian food, but Gauss Grill only has a value of 1 for Vegetarian food, and we mutiply these to get <span class=\"nowrap\"><x-blank solution=\"4\" goal=\"blank-4\"></x-blank>.</span></p><p>We sum together all the products to get <span class=\"nowrap\"><x-blank solution=\"7\" goal=\"blank-5\"></x-blank>,</span> which we can write in the first cell.</p><figure><img src=\"/content/matrices/images/proto-2/mult-bob-laplace.png\" alt=\"\"></figure><p>How much might Bob like Laplace Lounge? <x-blank solution=\"3\" goal=\"blank-6\"></x-blank><em><x-blank solution=\"1\" goal=\"blank-7\"></x-blank> + <x-blank solution=\"0\" goal=\"blank-8\"></x-blank></em><x-blank solution=\"4\" goal=\"blank-9\"></x-blank> = <span class=\"nowrap\"><x-blank solution=\"3\" goal=\"blank-10\"></x-blank>.</span></p><p>When we finish our process, we get a matrix of 4 rows and 3 columns. This makes sense! We had 4 people and 3 restaurants, so we will end up with a row for each person and a column for each restaurant.</p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-frn-res-full.png\" alt=\"\"></figure><p>We can then sum the values in each column to figure out which restaurant is most popular (this is left as an exercise for the reader).</p><p class=\"fixme\"> End side-by-side column display.</p><p>What we have just done is <span class=\"nowrap\"><x-gloss xid=\"matrix-multiplication\">matrix multiplication</x-gloss>.</span></p><p class=\"fixme\"> Align these.</p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-frn-fea.png\" width=\"100\" alt=\"\"></figure><div>x</div><figure><img src=\"/content/matrices/images/proto-2/matrix-1-fea-res.png\" width=\"200\" alt=\"\"></figure><div>=</div><figure><img src=\"/content/matrices/images/proto-2/matrix-1-frn-res-full.png\" width=\"200\" alt=\"\"></figure></x-step>","goals":["blank-0","blank-1","blank-2","blank-3","blank-4","blank-5","blank-6","blank-7","blank-8","blank-9","blank-10"],"keywords":[]},"formal-definition":{"id":"formal-definition","title":"Formal Definition","html":"<x-step id=\"formal-definition\" goals=\"blank-0 blank-1\"><h3>Formal definition of Matrix Multiplication</h3><p>The formal defintion for matrix multiplication is as follows:</p><p class=\"text-center\"> Given matrix <span class=\"math\" data-voice=\"_A_\"><mi>A</mi></span> with dimensions <span class=\"math\" data-voice=\"_r_ A _c_ A\"><mfenced open=\"[\" close=\"]\"><msub><mi>r</mi><mtext>A</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>c</mi><mtext>A</mtext></msub></mfenced></span> and matrix <span class=\"math\" data-voice=\"_B_\"><mi>B</mi></span> with dimensions <span class=\"math\" data-voice=\"_r_ B _c_ B\"><mfenced open=\"[\" close=\"]\"><msub><mi>r</mi><mtext>B</mtext></msub><mo value=\",\" lspace=\"0\">,</mo><msub><mi>c</mi><mtext>B</mtext></msub></mfenced></span></p><p class=\"text-center\"> The value of the cell <span class=\"math\" data-voice=\"_x_ ij\"><msub><mi>x</mi><mtext>ij</mtext></msub></span> in <span class=\"math\" data-voice=\"_A_ times _B_\"><mi>A</mi><mo value=\"×\">×</mo><mi>B</mi></span> is:</p><p class=\"text-center\"> <span class=\"math\" data-voice=\"_a_ i1 _b_ 1j\"><msub><mi>a</mi><mtext>i1</mtext></msub><msub><mi>b</mi><mtext>1j</mtext></msub></span> + ... <span class=\"math\" data-voice=\"_a_ iN _b_ Nj\"><msub><mi>a</mi><mtext>iN</mtext></msub><msub><mi>b</mi><mtext>Nj</mtext></msub></span></p><p class=\"text-center\"> where <span class=\"nowrap\"><span class=\"math\" data-voice=\"_N_ equals _c_ A equals _r_ B\"><mi>N</mi><mo value=\"=\">=</mo><msub><mi>c</mi><mtext>A</mtext></msub><mo value=\"=\">=</mo><msub><mi>r</mi><mtext>B</mtext></msub></span>.</span></p><p>Notice that, for this algorithm to work, the number of <x-blank solution=\"columns\" goal=\"blank-0\"></x-blank> in the first matrix has to be equal to the number of <x-blank solution=\"rows\" goal=\"blank-1\"></x-blank> in the second matrix.</p><p>For example, if in our restaurant example, each friend had a preference level for spicy food, our preference matrix would be <span class=\"nowrap\"><span class=\"math\" data-voice=\"4 x3\"><mn>4</mn><mi>x3</mi></span>.</span></p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-extra.png\" width=\"200\" alt=\"\"></figure><p>We are now attempting to multiply a <span class=\"math\" data-voice=\"4 x3\"><mn>4</mn><mi>x3</mi></span> matrix by a <span class=\"math\" data-voice=\"2 x3\"><mn>2</mn><mi>x3</mi></span> matrix, but we don't have any information about which restaurants have spicy food! So we <strong>cannot</strong> multiply the two matrices.</p><figure><img src=\"/content/matrices/images/proto-2/matrix-1-extra-mult.png\" width=\"200\" alt=\"\"></figure><p class=\"fixme\"> Could end section with a simple checkmark multiple choice, for which multiplications are possible.</p></x-step>","goals":["blank-0","blank-1"],"keywords":[]},"matrix-factorisation":{"id":"matrix-factorisation","title":"Matrix Factorisation","html":"<x-step id=\"matrix-factorisation\" goals=\"next-0\"><h3>Matrix Factorisation</h3><p>This type of matrix is used in all sorts of online recommender systems. Movies can be categorized by their genres like Comedy, Action, Romance, or Horror. Songs can be categorized into genres with ever-increasing specificity like Rock, Classical, Pop, Rap, Electro-Funk, Indie Folk, or Norwegian Black Metal. When you watch a movie on Netflix, or listen to a song on Spotify, there's likely a very large matrix somewhere, remembering your taste!</p><p>However, this process is slightly different from what we did above. The company running the streaming service <em>doesn't know</em> what its users' tastes are. It does know what movies they have watched, and whether they liked them or not. From this information they attempt to figure out each user's possible genre preferences using a process called <strong>matrix factorisation</strong>. Much like in <span class=\"nowrap\"><x-gloss xid=\"factorisation\">integer factorisation</x-gloss>,</span> where an integer can be written as a product of prime numbers, matrix factorisation is about working backwards from an incomplete product matrix to find possible preference matrices. This algorithm is much more complex than integer factorisation, so we need complex machine leaerning algorithms to perform it.</p><figure><img src=\"/content/matrices/images/proto-2/factorisation.png\" alt=\"\"></figure><p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"multiply-transformations":{"id":"multiply-transformations","title":"Multiply Transformations","html":"<x-step id=\"multiply-transformations\" goals=\"blank-0\"><h2>Multiplying Linear Transformations</h2><p>We have now learned two different ways to think about matrix multiplication. In the first chapter we learned that multiplying a 2x2 matrix by a 2x1 vector, can be thought of as a linear transformation. And we just learned to the detailed rules for how to multiply matrices of any size, like a preference matrix. Let's go back to thinking about matrices as linear transformations.</p><p>Recall the 2x2 matrix representing the rotation of 90º about the origin. Let's call it <span class=\"nowrap\"><span class=\"math\" data-voice=\"_R_ 90\"><msub><mi>R</mi><mtext>90</mtext></msub></span>.</span></p><img src=\"/content/matrices/images/proto-2/rotate-90-m.png\" width=\"100\" alt=\"\"><div class=\"cube\" i=\"[0,1]\" j=\"[-1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(-1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 90º</div></div><p>What if we multiply this matrix by the 2x2 matrix for rotation of 180º, <span class=\"nowrap\"><span class=\"math\" data-voice=\"_R_ 180\"><msub><mi>R</mi><mtext>180</mtext></msub></span>?</span></p><img src=\"/content/matrices/images/proto-2/rotate-180-m.png\" alt=\"\"><div class=\"cube\" i=\"[-1,0]\" j=\"[0,-1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(-1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,-1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 180º</div></div><p>The resulting matrix is this:</p><img src=\"/content/matrices/images/proto-2/rotate-270-m.png\" alt=\"\"><div class=\"cube\" i=\"[0,-1]\" j=\"[1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,-1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 270º</div></div><p>This matrix is the linear transformation for a <span class=\"nowrap\"><x-blank-mc goal=\"blank-0\"><button class=\"choice\">rotation of 270º</button><button class=\"choice\">identity matrix</button><button class=\"choice\">rotation of 90º</button></x-blank-mc>.</span></p></x-step>","goals":["blank-0"],"keywords":[]},"step-23":{"id":"step-23","title":"Step  ","html":"<x-step id=\"step-23\" goals=\"next-0\"><p>That's right,</p><p><span class=\"math\" data-voice=\"_R_ 90\"><msub><mi>R</mi><mtext>90</mtext></msub></span> x <span class=\"math\" data-voice=\"_R_ 180\"><msub><mi>R</mi><mtext>180</mtext></msub></span> = <span class=\"math\" data-voice=\"_R_ 270\"><msub><mi>R</mi><mtext>270</mtext></msub></span></p><p>In this case, multiplying two rotation matrices give us a <em>new</em> rotation matrix with an angle equal to the sum of the first two angles. A more general way to say this is that when we multiplied two transformation matrices, the resulting transformation matrix has the effect applying BOTH of the original two matrices in succession.</p><p>This works for all rotation values:</p><ul> <li><span class=\"math\" data-voice=\"_R_ 90\"><msub><mi>R</mi><mtext>90</mtext></msub></span> x <span class=\"math\" data-voice=\"_R_ 90\"><msub><mi>R</mi><mtext>90</mtext></msub></span> = <span class=\"math\" data-voice=\"_R_ 80\"><msub><mi>R</mi><mtext>80</mtext></msub></span></li><li><span class=\"math\" data-voice=\"_R_ 180\"><msub><mi>R</mi><mtext>180</mtext></msub></span> x <span class=\"math\" data-voice=\"_R_ 180\"><msub><mi>R</mi><mtext>180</mtext></msub></span> = <span class=\"math\" data-voice=\"_R_ 360\"><msub><mi>R</mi><mtext>360</mtext></msub></span> = <span class=\"math\" data-voice=\"_I_\"><mi>I</mi></span></li></ul> <p><button class=\"next-step\">Continue</button></p></x-step>","goals":["next-0"],"keywords":[]},"transforms-calculator":{"id":"transforms-calculator","title":"Transforms Calculator","html":"<x-step id=\"transforms-calculator\" goals=\"calculate\"><p>What about other types of transformations?</p><p class=\"fixme\"> Perhaps let them draw points (like a spaceship), and then the points are transformed by each transformation? {.fixme} Should be displayed horizontally, with their matrices across the bottom.</p><div class=\"calculator\"><div class=\"display\"><div class=\"mat\"><x-geopad width=\"150\" x-axis=\"-3,3,1\" y-axis=\"-3,3,1\" grid=\"grid\" padding=\"5\"><svg></svg></x-geopad></div><div class=\"mat operator\">x</div><div class=\"mat\"><x-geopad width=\"150\" x-axis=\"-3,3,1\" y-axis=\"-3,3,1\" grid=\"grid\" padding=\"5\"><svg></svg></x-geopad></div><div class=\"mat operator\">=</div><div class=\"mat\"><x-geopad width=\"150\" x-axis=\"-3,3,1\" y-axis=\"-3,3,1\" grid=\"grid\" padding=\"5\"><svg></svg></x-geopad></div><div class=\"button clear\">CLEAR</div><div class=\"button calc\">CALCULATE</div></div><div class=\"cubes\"><div class=\"cube\" i=\"[1,0]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Identity</div></div><div class=\"cube\" i=\"[0,1]\" j=\"[-1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(-1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 90º</div></div><div class=\"cube\" i=\"[-1,0]\" j=\"[0,-1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(-1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,-1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 180º</div></div><div class=\"cube\" i=\"[0,-1]\" j=\"[1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,-1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 270º</div></div><div class=\"cube\" i=\"[-1,0]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(-1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect x=0</div></div><div class=\"cube\" i=\"[0,1]\" j=\"[1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect y=x</div></div><div class=\"cube\" i=\"[1,0]\" j=\"[0,-1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,-1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect y=0</div></div><div class=\"cube\" i=\"[0,-1]\" j=\"[-1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,-1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(-1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect y=-x</div></div><div class=\"cube\" i=\"[1,1]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Shear x 1</div></div><div class=\"cube\" i=\"[1,-1]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,-1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Shear x -1</div></div><div class=\"cube\" i=\"[1,0]\" j=\"[1,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(1,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Shear y 1</div></div><div class=\"cube\" i=\"[1,0]\" j=\"[-1,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(-1,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Shear y -1</div></div><div class=\"cube\" i=\"[2,0]\" j=\"[0,2]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(2,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,2))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Scale by 2</div></div><div class=\"cube\" i=\"[0.5,0]\" j=\"[0,0.5]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0.5,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,0.5))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Scale by 1/2</div></div><div class=\"cube\" i=\"[2,0]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(2,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Scale x by 2</div></div><div class=\"cube\" i=\"[1,0]\" j=\"[0,0.5]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,0.5))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Scale y by 1/2</div></div></div></div></x-step>","goals":["calculate"],"keywords":[]},"matrix-addition":{"id":"matrix-addition","title":"Matrix Addition","html":"<x-step id=\"matrix-addition\" goals=\"blank-0 blank-1 blank-2 blank-3\"><h2>Matrix Addition</h2><p>Matrices can also be added. Matrix addition does not happen very often, but it is very simple to learn.</p><p>We write matrix arithmetic just as you might expect:</p><p><span class=\"math\" data-voice=\"_A_ plus _B_\"><mi>A</mi><mo value=\"+\">+</mo><mi>B</mi></span></p><ul> <li>Two matrices can be added only if they have the same dimensions.</li><li>The resulting matrix will be the same dimension as the matrices added.</li><li>Each value in location (i,j) of the resulting matrix will be the sum of the values at (i,j) in the other two matrices.</li></ul> <p>Add these two matrices!</p><p></p><div class=\"addition\"> <table class=\"add\"> <tbody><tr> <td target=\"a\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"a\">1</span></td> <td target=\"b\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"b\">2</span></td> </tr> <tr> <td target=\"c\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"c\">3</span></td> <td target=\"d\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"d\">4</span></td> </tr> </tbody></table><p></p><p> </p><div class=\"add\">+</div><p></p><p> <table class=\"add\"> <tbody><tr> <td target=\"a\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"a\">9</span></td> <td target=\"b\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"b\">8</span></td> </tr> <tr> <td target=\"c\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"c\">7</span></td> <td target=\"d\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"d\">6</span></td> </tr> </tbody></table></p><p> </p><div class=\"add\">=</div><p></p><p> <table class=\"add\"> <tbody><tr> <td target=\"a\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"a\"><x-blank solution=\"10\" goal=\"blank-0\"></x-blank></strong> </td> <td target=\"b\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"b\"><x-blank solution=\"10\" goal=\"blank-1\"></x-blank></strong> </td> </tr> <tr> <td target=\"c\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"c\"><x-blank solution=\"10\" goal=\"blank-2\"></x-blank></strong> </td> <td target=\"d\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"d\"><x-blank solution=\"10\" goal=\"blank-3\"></x-blank></strong> </td> </tr> </tbody></table></p></div> <p>Great.</p><p>This code could be a lot simpler! And why is this not going below the tables?</p></x-step>","goals":["blank-0","blank-1","blank-2","blank-3"],"keywords":[]},"scalar-multiplication":{"id":"scalar-multiplication","title":"Scalar Multiplication","html":"<x-step id=\"scalar-multiplication\" goals=\"blank-0 blank-1 blank-2 blank-3\"><h2>Scalar Multiplication</h2><p>Another operation we can perform with a matrix is <strong>scalar multiplication</strong>. A <strong>scalar</strong> is what we call a real number in matrix and vector arithmetic.</p><p>We write scalar multiplication as</p><p><span class=\"math\" data-voice=\"sA\"><mi>sA</mi></span></p><p>Scalar multiplication is as simple as multiplying every cell in a matrix <span class=\"math\" data-voice=\"_A_\"><mi>A</mi></span> times a scalar <span class=\"nowrap\"><span class=\"math\" data-voice=\"_s_\"><mi>s</mi></span>.</span></p><p></p><div class=\"scalar\"> <div class=\"scm s\">2</div><p></p><p> <table class=\"scm\"> <tbody><tr> <td target=\"a\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"a\">3</span></td> <td target=\"b\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"b\">1</span></td> </tr> <tr> <td target=\"c\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"c\">-4</span></td> <td target=\"d\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"d\">0</span></td> </tr> </tbody></table></p><p> </p><div class=\"scm\">=</div><p></p><p> <table class=\"scm\"> <tbody><tr> <td target=\"a\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"a\"><x-blank solution=\"6\" goal=\"blank-0\"></x-blank></strong> </td> <td target=\"b\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"b\"><x-blank solution=\"2\" goal=\"blank-1\"></x-blank></strong> </td> </tr> <tr> <td target=\"c\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"c\"><x-blank solution=\"-8\" goal=\"blank-2\"></x-blank></strong> </td> <td target=\"d\"> <strong class=\"pill step-target\" tabindex=\"0\" data-to=\"d\"><x-blank solution=\"0\" goal=\"blank-3\"></x-blank></strong> </td> </tr> </tbody></table></p></div> <p>Note that while it is possible to add two matrices, and to multiply a matrix by a scalar, the operation of adding a scalar to a matrix is <strong>not defined</strong>.</p></x-step>","goals":["blank-0","blank-1","blank-2","blank-3"],"keywords":[]},"arith-properties":{"id":"arith-properties","title":"Arith Properties","html":"<x-step id=\"arith-properties\" goals=\"\"><h2>Properties of Matrix Arithmetic</h2><p>Recall operators like addition and multiplication, and how it's useful to think about their properties. Commutative, distributive, and associative properties.</p><x-tabbox><div class=\"tab\"> <h3>Associative</h3><p>Is matrix multiplication <span class=\"nowrap\"><x-gloss xid=\"associative\">associative</x-gloss>?</span>. If it is, then the equation below will be true.</p><p><span class=\"math\" data-voice=\"Ax of BxC equals AxB xC\"><mi>Ax</mi><mfenced><mi>BxC</mi></mfenced><mo value=\"=\">=</mo><mfenced open=\"(\" close=\")\"><mi>AxB</mi></mfenced><mi>xC</mi></span></p><p>A good first question to ask is: will the dimensions of the matrices allow this?</p><p>If <span class=\"math\" data-voice=\"Ax of BxC\"><mi>Ax</mi><mfenced><mi>BxC</mi></mfenced></span> is possible, then</p><p><span class=\"math\" data-voice=\"columns B equals rows C\"><msub><mi>columns</mi><mtext>B</mtext></msub><mo value=\"=\">=</mo><msub><mi>rows</mi><mtext>C</mtext></msub></span></p><p><span class=\"math\" data-voice=\"BxC\"><mi>BxC</mi></span> will have <span class=\"math\" data-voice=\"rows B\"><msub><mi>rows</mi><mtext>B</mtext></msub></span> number of rows, and will be equal to <span class=\"nowrap\"><span class=\"math\" data-voice=\"columns A\"><msub><mi>columns</mi><mtext>A</mtext></msub></span>.</span> This means that when attempting <span class=\"nowrap\"><span class=\"math\" data-voice=\"AxB xC\"><mfenced open=\"(\" close=\")\"><mi>AxB</mi></mfenced><mi>xC</mi></span>,</span> we know we can perform <span class=\"nowrap\"><span class=\"math\" data-voice=\"AxB\"><mi>AxB</mi></span>.</span> <span class=\"math\" data-voice=\"AxB\"><mi>AxB</mi></span> will then have <span class=\"math\" data-voice=\"columns B\"><msub><mi>columns</mi><mtext>B</mtext></msub></span> columns, so we can multiply it by C.</p><p>We know we can perform this multiplication based on the dimensions, but will we get the same result? Recall from our section on multiplication that it can be thought of as successive linear transformations.</p><p>It turns out that as long as we keep the ordering of the matrices, we will get the same result. Whether we do BxC first or AxB first, it does not matter.</p><p>Matrix multiplication <strong>is associative</strong>.</p></div><div class=\"tab\"> <h3>Commutative</h3><p>Is matrix multiplication <span class=\"nowrap\"><x-gloss xid=\"commutative\">commutative</x-gloss>?</span>. If it is, then the equation below will be true.</p><p><span class=\"math\" data-voice=\"AxB equals BxA\"><mi>AxB</mi><mo value=\"=\">=</mo><mi>BxA</mi></span></p><p>Recall that when we multiply two matrices, the number of columns of the first must match the number of rows of the second. This means that if we can multiply <span class=\"nowrap\"><span class=\"math\" data-voice=\"AxB\"><mi>AxB</mi></span>,</span> <span class=\"nowrap\"><span class=\"math\" data-voice=\"columns A equals rows B\"><msub><mi>columns</mi><mtext>A</mtext></msub><mo value=\"=\">=</mo><msub><mi>rows</mi><mtext>B</mtext></msub></span>,</span> but it is not necessarily true that <span class=\"nowrap\"><span class=\"math\" data-voice=\"rows A equals columns B\"><msub><mi>rows</mi><mtext>A</mtext></msub><mo value=\"=\">=</mo><msub><mi>columns</mi><mtext>B</mtext></msub></span>.</span> Therefore, it does not follow that we can multiply <span class=\"nowrap\"><span class=\"math\" data-voice=\"BxA\"><mi>BxA</mi></span>,</span> and matrix multiplication <strong>is not commutative</strong>.</p><p>What if both matrices are square matrices? We can then perform both <span class=\"math\" data-voice=\"AxB\"><mi>AxB</mi></span> and <span class=\"nowrap\"><span class=\"math\" data-voice=\"BxA\"><mi>BxA</mi></span>,</span> however we do not know if they will be equal.</p><p>If we think of the matrices as transformations, we can imagine scenarios wherein applying two different transformations will be different depending on which direction you multiply them.</p><p>If we perform a 90º Rotation, and then a reflection across the x-axis, the final transformation will look like this:</p><div class=\"cubes\"><div class=\"cube\" i=\"[0,1]\" j=\"[-1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(-1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 90º</div></div><div class=\"cube op\">x</div><div class=\"cube\" i=\"[-1,0]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(-1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect x=0</div></div><div class=\"cube op\">=</div><div class=\"cube\" i=\"[0,1]\" j=\"[1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect y=x</div></div></div><p>However, if we reverse the order of the transformations, the final transformation will look like this.</p><div class=\"cubes\"><div class=\"cube\" i=\"[-1,0]\" j=\"[0,1]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(-1,0))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(0,1))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect x=0</div></div><div class=\"cube op\">x</div><div class=\"cube\" i=\"[0,1]\" j=\"[-1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(-1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Rotate 90º</div></div><div class=\"cube op\">=</div><div class=\"cube\" i=\"[0,-1]\" j=\"[1,0]\"><x-geopad width=\"100\" x-axis=\"-2,2,1\" y-axis=\"-2,2,1\" grid=\"grid\" padding=\"5\"><svg><path class=\"red\" x=\"segment(point(0,0),point(0,-1))\" label=\"i\"></path><path class=\"green\" x=\"segment(point(0,0),point(1,0))\" label=\"j\"></path></svg></x-geopad><div class=\"caption\">Reflect y=-x</div></div></div><p>There are many more examples of how matrix multiplication does not meet the commutative property, and we encourage you to experiment!</p></div><div class=\"tab\"> <h3>Distributive</h3><p>Is matrix multiplication <x-gloss xid=\"distributive\">distributive</x-gloss> over matrix addition?. If it is, then the equation below will be true.</p><p><span class=\"math\" data-voice=\"Ax of _B_ plus _C_ equals AxB plus AxC\"><mi>Ax</mi><mfenced><mi>B</mi><mo value=\"+\">+</mo><mi>C</mi></mfenced><mo value=\"=\">=</mo><mi>AxB</mi><mo value=\"+\">+</mo><mi>AxC</mi></span></p><p class=\"todo\"> Could demonstrate this by adding basis vectors and applying transformations to them. Or could somehow leave it as an exercise for the reader.</p></div></x-tabbox> </x-step>","goals":[],"keywords":[]},"determinants":{"id":"determinants","title":"Determinants","html":"<x-step id=\"determinants\" goals=\"\"><p>Watch the area change.</p><x-geopad width=\"400\" x-axis=\"-4,4,1\" y-axis=\"-4,4,1\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green move\" name=\"ipoint\" x=\"point(1,0)\" target=\"i\"></circle><circle class=\"blue move\" name=\"jpoint\" x=\"point(0,1)\" target=\"j\"></circle><circle name=\"origin\" x=\"point(0,0)\"></circle><path class=\"fabric\" x=\"line(point(-8*jpoint.x, -8*jpoint.y), point(ipoint.x + -8*jpoint.x, ipoint.y + -8*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-8*ipoint.x, -8*ipoint.y), point(-8*ipoint.x + jpoint.x, -8*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-7*jpoint.x, -7*jpoint.y), point(ipoint.x + -7*jpoint.x, ipoint.y + -7*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-7*ipoint.x, -7*ipoint.y), point(-7*ipoint.x + jpoint.x, -7*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-6*jpoint.x, -6*jpoint.y), point(ipoint.x + -6*jpoint.x, ipoint.y + -6*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-6*ipoint.x, -6*ipoint.y), point(-6*ipoint.x + jpoint.x, -6*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-5*jpoint.x, -5*jpoint.y), point(ipoint.x + -5*jpoint.x, ipoint.y + -5*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-5*ipoint.x, -5*ipoint.y), point(-5*ipoint.x + jpoint.x, -5*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-4*jpoint.x, -4*jpoint.y), point(ipoint.x + -4*jpoint.x, ipoint.y + -4*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-4*ipoint.x, -4*ipoint.y), point(-4*ipoint.x + jpoint.x, -4*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-3*jpoint.x, -3*jpoint.y), point(ipoint.x + -3*jpoint.x, ipoint.y + -3*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-3*ipoint.x, -3*ipoint.y), point(-3*ipoint.x + jpoint.x, -3*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-2*jpoint.x, -2*jpoint.y), point(ipoint.x + -2*jpoint.x, ipoint.y + -2*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-2*ipoint.x, -2*ipoint.y), point(-2*ipoint.x + jpoint.x, -2*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-1*jpoint.x, -1*jpoint.y), point(ipoint.x + -1*jpoint.x, ipoint.y + -1*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-1*ipoint.x, -1*ipoint.y), point(-1*ipoint.x + jpoint.x, -1*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(0*jpoint.x, 0*jpoint.y), point(ipoint.x + 0*jpoint.x, ipoint.y + 0*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(0*ipoint.x, 0*ipoint.y), point(0*ipoint.x + jpoint.x, 0*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(1*jpoint.x, 1*jpoint.y), point(ipoint.x + 1*jpoint.x, ipoint.y + 1*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(1*ipoint.x, 1*ipoint.y), point(1*ipoint.x + jpoint.x, 1*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(2*jpoint.x, 2*jpoint.y), point(ipoint.x + 2*jpoint.x, ipoint.y + 2*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(2*ipoint.x, 2*ipoint.y), point(2*ipoint.x + jpoint.x, 2*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(3*jpoint.x, 3*jpoint.y), point(ipoint.x + 3*jpoint.x, ipoint.y + 3*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(3*ipoint.x, 3*ipoint.y), point(3*ipoint.x + jpoint.x, 3*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(4*jpoint.x, 4*jpoint.y), point(ipoint.x + 4*jpoint.x, ipoint.y + 4*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(4*ipoint.x, 4*ipoint.y), point(4*ipoint.x + jpoint.x, 4*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(5*jpoint.x, 5*jpoint.y), point(ipoint.x + 5*jpoint.x, ipoint.y + 5*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(5*ipoint.x, 5*ipoint.y), point(5*ipoint.x + jpoint.x, 5*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(6*jpoint.x, 6*jpoint.y), point(ipoint.x + 6*jpoint.x, ipoint.y + 6*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(6*ipoint.x, 6*ipoint.y), point(6*ipoint.x + jpoint.x, 6*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(7*jpoint.x, 7*jpoint.y), point(ipoint.x + 7*jpoint.x, ipoint.y + 7*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(7*ipoint.x, 7*ipoint.y), point(7*ipoint.x + jpoint.x, 7*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(8*jpoint.x, 8*jpoint.y), point(ipoint.x + 8*jpoint.x, ipoint.y + 8*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(8*ipoint.x, 8*ipoint.y), point(8*ipoint.x + jpoint.x, 8*ipoint.y + jpoint.y))\"></path><path class=\"fill light purple\" x=\"polygon(point(0*ipoint.x+0*jpoint.x,0*ipoint.y+0*jpoint.y),point(1*ipoint.x+0*jpoint.x,1*ipoint.y+0*jpoint.y),point(1*ipoint.x+1*jpoint.x,1*ipoint.y+1*jpoint.y),point(0*ipoint.x+1*jpoint.x,0*ipoint.y+1*jpoint.y))\" label-class=\"purple\"></path><path class=\"green\" x=\"segment(point(0,0),ipoint)\" label=\"i\" target=\"i\"></path><path class=\"blue\" x=\"segment(point(0,0),jpoint)\" label=\"j\" target=\"j\"></path></svg></x-geopad><p>Inside the matrix we have i = (<span class=\"var\">${ipoint.x}</span>, <span class=\"var\">${ipoint.y}</span>) and j = (<span class=\"var\">${jpoint.x}</span>, <span class=\"var\">${jpoint.y}</span>)</p><p>The deterimant is <span class=\"var\">${determinant}</span></p><p>Choose one of these buttons.</p><div class=\"button\">IDENTITY</div><div class=\"button\">SHEAR</div><div class=\"button\">SCALE</div><div class=\"button\">ROTATE</div><div class=\"button\">LINE</div></x-step>","goals":[],"keywords":[]},"examples":{"id":"examples","title":"Examples","html":"<x-step id=\"examples\" goals=\"\"><p class=\"todo\"> Demonstrate how basic transformations effect the determinant {.todo} Demonstrate possible values: less than 1, greater than 1, negative, zero</p></x-step>","goals":[],"keywords":[]},"zero-det":{"id":"zero-det","title":"Zero Det","html":"<x-step id=\"zero-det\" goals=\"\"><p class=\"todo\"> Matrices can have a determinant of zero. What does this mean?</p></x-step>","goals":[],"keywords":[]},"det-formula":{"id":"det-formula","title":"Det Formula","html":"<x-step id=\"det-formula\" goals=\"\"><p>The formula for the determinant of a 2x2 matrix is:</p><p><span class=\"math\" data-voice=\"ad minus bc\"><mi>ad</mi><mo value=\"−\">−</mo><mi>bc</mi></span></p><p>matrix:</p><p><span class=\"nowrap\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"a\">a</span>,</span> <span class=\"step-target pill\" tabindex=\"0\" data-to=\"b\">b</span></p><p><span class=\"nowrap\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"c\">c</span>,</span> <span class=\"step-target pill\" tabindex=\"0\" data-to=\"d\">d</span></p><p>The area <span class=\"step-target pill\" tabindex=\"0\" data-to=\"determinant\">determinant</span> is equal to the area <span class=\"step-target pill\" tabindex=\"0\" data-to=\"ad\">ad</span> minus the area <span class=\"nowrap\"><span class=\"step-target pill\" tabindex=\"0\" data-to=\"bc\">bc</span>.</span></p><p>Let's see why this is true geometrically.</p><x-geopad width=\"400\" x-axis=\"-1.5,1.5,1\" y-axis=\"-1.5,1.5,1\" grid=\"grid\" padding=\"5\"><svg><circle class=\"green move\" name=\"ipoint\" x=\"point(1,0)\" target=\"i\"></circle><circle class=\"blue move\" name=\"jpoint\" x=\"point(0,1)\" target=\"j\"></circle><circle name=\"origin\" x=\"point(0,0)\"></circle><path class=\"fabric\" x=\"line(point(-3*jpoint.x, -3*jpoint.y), point(ipoint.x + -3*jpoint.x, ipoint.y + -3*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-3*ipoint.x, -3*ipoint.y), point(-3*ipoint.x + jpoint.x, -3*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-2*jpoint.x, -2*jpoint.y), point(ipoint.x + -2*jpoint.x, ipoint.y + -2*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-2*ipoint.x, -2*ipoint.y), point(-2*ipoint.x + jpoint.x, -2*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-1*jpoint.x, -1*jpoint.y), point(ipoint.x + -1*jpoint.x, ipoint.y + -1*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(-1*ipoint.x, -1*ipoint.y), point(-1*ipoint.x + jpoint.x, -1*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(0*jpoint.x, 0*jpoint.y), point(ipoint.x + 0*jpoint.x, ipoint.y + 0*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(0*ipoint.x, 0*ipoint.y), point(0*ipoint.x + jpoint.x, 0*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(1*jpoint.x, 1*jpoint.y), point(ipoint.x + 1*jpoint.x, ipoint.y + 1*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(1*ipoint.x, 1*ipoint.y), point(1*ipoint.x + jpoint.x, 1*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(2*jpoint.x, 2*jpoint.y), point(ipoint.x + 2*jpoint.x, ipoint.y + 2*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(2*ipoint.x, 2*ipoint.y), point(2*ipoint.x + jpoint.x, 2*ipoint.y + jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(3*jpoint.x, 3*jpoint.y), point(ipoint.x + 3*jpoint.x, ipoint.y + 3*jpoint.y))\"></path><path class=\"fabric\" x=\"line(point(3*ipoint.x, 3*ipoint.y), point(3*ipoint.x + jpoint.x, 3*ipoint.y + jpoint.y))\"></path><path class=\"fill light purple\" x=\"polygon(point(0*ipoint.x+0*jpoint.x,0*ipoint.y+0*jpoint.y),point(1*ipoint.x+0*jpoint.x,1*ipoint.y+0*jpoint.y),point(1*ipoint.x+1*jpoint.x,1*ipoint.y+1*jpoint.y),point(0*ipoint.x+1*jpoint.x,0*ipoint.y+1*jpoint.y))\" label-class=\"purple\" target=\"determinant\"></path><path class=\"green\" x=\"segment(point(0,0),ipoint)\" label=\"i\" target=\"i\"></path><path class=\"blue\" x=\"segment(point(0,0),jpoint)\" label=\"j\" target=\"j\"></path><path class=\"red\" x=\"segment(point(0,0), point(ipoint.x,0))\" label=\"a\" target=\"a\"></path><path class=\"red\" x=\"segment(point(0,0), point(0,jpoint.y))\" label=\"d\" target=\"d\"></path><path class=\"red\" x=\"segment(point(0,0), point(0,ipoint.y))\" label=\"c\" target=\"c\"></path><path class=\"red\" x=\"segment(point(0,0), point(jpoint.x,0))\" label=\"b\" target=\"b\"></path><path class=\"fill light teal\" x=\"polygon(point(0,0),point(ipoint.x,0),point(ipoint.x,jpoint.y),point(0,jpoint.y))\" target=\"ad\"></path><path class=\"fill light lime\" x=\"polygon(point(0,0),point(jpoint.x,0),point(jpoint.x,ipoint.y),point(0,ipoint.y))\" target=\"bc\"></path></svg></x-geopad><p class=\"fixme\"> The shapes are blocking each other when targeted.</p><p class=\"fixme\"> Could do an animation that shows how the triangles fit together, like in Pythagoras.</p></x-step>","goals":[],"keywords":[]},"nonsquare":{"id":"nonsquare","title":"Nonsquare","html":"<x-step id=\"nonsquare\" goals=\"\"><p class=\"todo\"> Determinants only exist for square matrices.</p></x-step>","goals":[],"keywords":[]},"step-33":{"id":"step-33","title":"Step  ","html":"<x-step id=\"step-33\" goals=\"\"><p class=\"todo\"> COMING SOON</p></x-step>","goals":[],"keywords":[]},"step-34":{"id":"step-34","title":"Step  ","html":"<x-step id=\"step-34\" goals=\"\"><p class=\"todo\"> COMING SOON</p></x-step>","goals":[],"keywords":[]},"step-35":{"id":"step-35","title":"Step  ","html":"<x-step id=\"step-35\" goals=\"\"><p class=\"todo\"> COMING SOON</p></x-step>","goals":[],"keywords":[]}},"availableLocales":["en"],"biosJSON":"{}","glossJSON":"{\"transformation\":{\"title\":\"Transformation\",\"text\":\"<p>A <strong>transformation</strong> converts one geometric shape into another. There are many different types of transformations, like <em>reflections</em> or <em>dilations</em>.</p>\",\"link\":\"/course/transformations/rigid#transformations\"},\"sin\":{\"title\":\"Sine\",\"text\":\"<p><strong>Sine</strong> is a trigonometric function written as <span class=\\\"nowrap\\\"><span class=\\\"math\\\" data-voice=\\\"sin theta\\\"><mi mathvariant=\\\"normal\\\">sin</mi><mfenced><mi>θ</mi></mfenced></span>.</span> In a right angled triangle, it is the ratio of the opposite side and the hypotenuse.</p>\",\"link\":\"/course/triangles/trigonometry#trig-functions\"},\"cos\":{\"title\":\"Cosine\",\"text\":\"<p><strong>Cosine</strong> is a trigonometric function written as <span class=\\\"nowrap\\\"><span class=\\\"math\\\" data-voice=\\\"cos theta\\\"><mi mathvariant=\\\"normal\\\">cos</mi><mfenced><mi>θ</mi></mfenced></span>.</span> In a right angled triangle, it is the ratio of the adjacent side and the hypotenuse.</p>\",\"link\":\"/course/triangles/trigonometry#trig-functions\"},\"matrix\":{\"title\":\"Matrix\",\"text\":\"<p>A <strong>matrix</strong> is a rectangular array of numbers arranged in rows and columns.</p>\"},\"square-matrix\":{\"title\":\"Square matrix\",\"text\":\"<p>A <strong>square matrix</strong> is a matrix that has the same number of rows and columns.</p>\"},\"factorisation\":{\"title\":\"Prime Factorisation\",\"text\":\"<p>The <strong>prime factorisation</strong> of a number is a way to write it as a product of prime numbers. For example, the prime factorisation of 12 is <span class=\\\"nowrap\\\"><span class=\\\"math\\\" data-voice=\\\"12 equals 2 times 2 times 3\\\"><mn>12</mn><mo value=\\\"=\\\">=</mo><mn>2</mn><mo value=\\\"×\\\">×</mo><mn>2</mn><mo value=\\\"×\\\">×</mo><mn>3</mn></span>,</span> because both 2 and 3 are prime.</p>\",\"link\":\"/course/divisibility/primes\"},\"associative\":{\"title\":\"Associativity\",\"text\":\"<p>An operation • is <strong>associative</strong> if <span class=\\\"nowrap\\\"><span class=\\\"math\\\" data-voice=\\\"_a_ • _b_ • _c_ equals _a_ • _b_ • _c_\\\"><mi>a</mi><mo value=\\\"•\\\">•</mo><mfenced open=\\\"(\\\" close=\\\")\\\"><mi>b</mi><mo value=\\\"•\\\">•</mo><mi>c</mi></mfenced><mo value=\\\"=\\\">=</mo><mfenced open=\\\"(\\\" close=\\\")\\\"><mi>a</mi><mo value=\\\"•\\\">•</mo><mi>b</mi></mfenced><mo value=\\\"•\\\">•</mo><mi>c</mi></span>.</span> For example, both addition (+) and multiplication (×) of numbers is associative.</p>\"},\"commutative\":{\"title\":\"Commutative Property\",\"text\":\"<p>An operation • is <strong>commutative</strong> if <span class=\\\"nowrap\\\"><span class=\\\"math\\\" data-voice=\\\"_a_ • _b_ equals _b_ • _a_\\\"><mi>a</mi><mo value=\\\"•\\\">•</mo><mi>b</mi><mo value=\\\"=\\\">=</mo><mi>b</mi><mo value=\\\"•\\\">•</mo><mi>a</mi></span>.</span> For example, both addition (+) and multiplication (×) of numbers is commutative.</p>\"},\"distributive\":{\"title\":\"Distributive Property\",\"text\":\"<p>An operation • is <strong>distributive</strong> over another operation * if <span class=\\\"nowrap\\\"><span class=\\\"math\\\" data-voice=\\\"_a_ • _b_ times _c_ equals _a_ • _b_ times _a_ • _c_\\\"><mi>a</mi><mo value=\\\"•\\\">•</mo><mfenced open=\\\"(\\\" close=\\\")\\\"><mi>b</mi><mo value=\\\"·\\\">·</mo><mi>c</mi></mfenced><mo value=\\\"=\\\">=</mo><mi>a</mi><mo value=\\\"•\\\">•</mo><mi>b</mi><mo value=\\\"·\\\">·</mo><mi>a</mi><mo value=\\\"•\\\">•</mo><mi>c</mi></span>.</span> For example, multiplication (×) of numbers is distributive over addition (+).</p>\"}}","hintsJSON":"{\"welcome\":\"<p>Welcome to Mathigon! I’m Archie, your personal tutor. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/graduation-cap.png\\\" alt=\\\"graduation-cap\\\"></p>\",\"account\":\"<p>You can <x-target class=\\\"step-target pill\\\" to=\\\"#login-btn\\\">create a free account</x-target> to save your progress.</p>\",\"tutorial1\":\"<p>Our content is divided into small steps. You have to complete the activities to reveal what’s next.</p>\",\"tutorial2\":\"<p>We will save all your progress, so you can come back later and continue right where you left off.</p>\",\"correct\":[\"<p>Well done <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Great Work! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/relieved-face.png\\\" alt=\\\"relieved-face\\\"></p>\",\"<p>Awesome <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Brilliant <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thumbs-up.png\\\" alt=\\\"thumbs-up\\\"></p>\",\"<p>Excellent! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/ok-hand.png\\\" alt=\\\"ok-hand\\\"></p>\",\"<p>Cool <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-sunglasses.png\\\" alt=\\\"smiling-face-with-sunglasses\\\"></p>\",\"<p>Nice! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/victory-hand.png\\\" alt=\\\"victory-hand\\\"></p>\",\"<p>Way to go! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face-with-smiling-eyes.png\\\" alt=\\\"smiling-face-with-smiling-eyes\\\"></p>\",\"<p>Sweet <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\",\"<p>Impressive! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/trophy.png\\\" alt=\\\"trophy\\\"></p>\",\"<p>Outstanding <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/grinning-face.png\\\" alt=\\\"grinning-face\\\"></p>\",\"<p>Superb! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/star.png\\\" alt=\\\"star\\\"></p>\",\"<p>Wonderful! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/smiling-face.png\\\" alt=\\\"smiling-face\\\"></p>\"],\"incorrect\":[\"<p>That’s not quite right <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/frowning-face.png\\\" alt=\\\"frowning-face\\\"></p>\",\"<p>Are you sure about that? <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/thinking-face.png\\\" alt=\\\"thinking-face\\\"></p>\",\"<p>That doesn’t look right. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/hushed-face.png\\\" alt=\\\"hushed-face\\\"></p>\",\"<p>Try again! <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/confused-face.png\\\" alt=\\\"confused-face\\\"></p>\"],\"welcomeMorning\":\"<p>Good morning!</p>\",\"welcomeAfternoon\":\"<p>Good afternoon!</p>\",\"welcomeEvening\":\"<p>Good evening!</p>\",\"welcomeMorningNamed\":\"<p>Good morning, $name!</p>\",\"welcomeAfternoonNamed\":\"<p>Good afternoon, $name!</p>\",\"welcomeEveningNamed\":\"<p>Good evening, $name!</p>\",\"serverError\":\"<p>Sorry, I can’t help at the moment. Check your internet connection or try again later. <img class=\\\"emoji\\\" width=\\\"20\\\" height=\\\"20\\\" src=\\\"https://static.mathigon.org/emoji/confused-face.png\\\" alt=\\\"confused-face\\\"></p>\"}"}