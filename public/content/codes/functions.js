/* (c) Mathigon, generated by Mathigon Studio */
"use strict";
var StepFunctions = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError = (msg) => {
    throw TypeError(msg);
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i = decorators.length - 1, decorator; i >= 0; i--)
      if (decorator = decorators[i])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result) __defProp(target, key, result);
    return result;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var __await = function(promise, isYieldStar) {
    this[0] = promise;
    this[1] = isYieldStar;
  };
  var __yieldStar = (value) => {
    var obj = value[__knownSymbol("asyncIterator")], isAwait = false, method, it = {};
    if (obj == null) {
      obj = value[__knownSymbol("iterator")]();
      method = (k) => it[k] = (x) => obj[k](x);
    } else {
      obj = obj.call(value);
      method = (k) => it[k] = (v) => {
        if (isAwait) {
          isAwait = false;
          if (k === "throw") throw v;
          return v;
        }
        isAwait = true;
        return {
          done: false,
          value: new __await(new Promise((resolve) => {
            var x = obj[k](v);
            if (!(x instanceof Object)) __typeError("Object expected");
            resolve(x);
          }), 1)
        };
      };
    }
    return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
      throw x;
    }, "return" in obj && method("return"), it;
  };

  // content/codes/functions.ts
  var functions_exports = {};
  __export(functions_exports, {
    barcodeDrawing: () => barcodeDrawing,
    binarySimulation: () => binarySimulation,
    binaryTable: () => binaryTable,
    bracket: () => bracket,
    dec2bin: () => dec2bin,
    finger32: () => finger32,
    finger5: () => finger5,
    flashlight: () => flashlight,
    hammingDecode: () => hammingDecode,
    hammingEncode: () => hammingEncode,
    intro: () => intro,
    morseApplications: () => morseApplications,
    morseEncoding: () => morseEncoding,
    radio: () => radio,
    resolution: () => resolution,
    satellite: () => satellite,
    telegraph: () => telegraph,
    transistor: () => transistor
  });

  // node_modules/@mathigon/core/dist/index.esm.js
  function uid(n = 10) {
    return Math.random().toString(36).substr(2, n);
  }
  function isOneOf(x, ...values) {
    return values.includes(x);
  }
  var defaultMerge = (a, b) => a.concat(b);
  function deepExtend(obj1, obj2, arrayMergeFn = defaultMerge) {
    for (const i of Object.keys(obj2)) {
      if (i in obj1 && Array.isArray(obj1[i]) && Array.isArray(obj2[i])) {
        obj1[i] = arrayMergeFn(obj1[i], obj2[i]);
      } else if (i in obj1 && obj1[i] instanceof Object && obj2[i] instanceof Object) {
        deepExtend(obj1[i], obj2[i]);
      } else {
        obj1[i] = obj2[i];
      }
    }
  }
  function delay(fn, t = 0) {
    if (t) {
      return +setTimeout(fn, t);
    } else {
      fn();
      return 0;
    }
  }
  function wait(t) {
    return new Promise((resolve) => setTimeout(resolve, t));
  }
  function defer() {
    let resolve = () => void 0;
    let reject = () => void 0;
    const promise = new Promise((_resolve, _reject) => {
      resolve = _resolve;
      reject = _reject;
    });
    promise.catch((error) => error);
    return { promise, resolve, reject };
  }
  var CacheError = class extends Error {
    constructor(data) {
      super("[Cache Error]");
      this.data = data;
    }
  };
  function cache(fn) {
    const cached = /* @__PURE__ */ new Map();
    return function(...args) {
      const argString = args.join("--");
      if (!cached.has(argString)) {
        try {
          cached.set(argString, fn(...args));
        } catch (e) {
          cached.set(argString, new CacheError(e));
        }
      }
      const value = cached.get(argString);
      if (value instanceof CacheError) throw value.data;
      return value;
    };
  }
  function throttle(fn, t = 0, forceDelay = false) {
    let delay2 = false;
    let repeat2 = false;
    return (...args) => {
      if (delay2) {
        repeat2 = true;
      } else {
        if (forceDelay) {
          repeat2 = true;
        } else {
          fn(...args);
        }
        delay2 = true;
        setTimeout(() => {
          if (repeat2) fn(...args);
          delay2 = repeat2 = false;
        }, t);
      }
    };
  }
  function reviver(allowed) {
    return function(key, value) {
      if (!key || Array.isArray(this) || allowed.includes(key)) return value;
    };
  }
  function safeToJSON(str, fallback, allowedKeys) {
    if (!str) return fallback;
    try {
      return JSON.parse(str, allowedKeys ? reviver(allowedKeys) : void 0) || fallback;
    } catch (e) {
      return fallback;
    }
  }
  function repeat(value, n) {
    return new Array(n).fill(value);
  }
  function repeat2D(value, x, y) {
    const result = [];
    for (let i = 0; i < x; ++i) {
      result.push(repeat(value, y));
    }
    return result;
  }
  function tabulate(fn, n) {
    const result = [];
    for (let i = 0; i < n; ++i) {
      result.push(fn(i));
    }
    return result;
  }
  function tabulate2D(fn, x, y) {
    const result = [];
    for (let i = 0; i < x; ++i) {
      const row = [];
      for (let j = 0; j < y; ++j) {
        row.push(fn(i, j));
      }
      result.push(row);
    }
    return result;
  }
  function list(a, b, step = 1) {
    const arr = [];
    if (b === void 0 && a >= 0) {
      for (let i = 0; i < a; i += step) arr.push(i);
    } else if (b === void 0) {
      for (let i = 0; i > a; i -= step) arr.push(i);
    } else if (a <= b) {
      for (let i = a; i <= b; i += step) arr.push(i);
    } else {
      for (let i = a; i >= b; i -= step) arr.push(i);
    }
    return arr;
  }
  function last(array, i = 0) {
    return array[array.length - 1 - i];
  }
  function total(array) {
    return array.reduce((t, v) => t + v, 0);
  }
  function loop(array) {
    let i = 0;
    return () => array[i++ % array.length];
  }
  function unique(array) {
    return array.filter((a, i) => array.indexOf(a) === i);
  }
  function flatten(array) {
    return array.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);
  }
  function chunk(array, n) {
    const chunks = [];
    for (let i = 0; i < array.length; i += n) {
      chunks.push(array.slice(i, i + n));
    }
    return chunks;
  }
  function words(str, divider = /\s+/) {
    if (!str) return [];
    return str.trim().split(divider);
  }
  function toCamelCase(str) {
    return str.toLowerCase().replace(/^-/, "").replace(/-(.)/g, (_, g) => g.toUpperCase());
  }
  var EventTarget = class {
    constructor() {
      this.events = /* @__PURE__ */ new Map();
    }
    /** Adds an event listener for one or more events. */
    on(events, fn) {
      for (const e of words(events)) {
        if (!this.events.has(e)) this.events.set(e, []);
        this.events.get(e).push(fn);
      }
    }
    /** Adds a one-time event listener to one or more events. */
    one(events, fn) {
      const callback = (e) => {
        this.off(events, callback);
        fn(e);
      };
      this.on(events, callback);
    }
    /** Removes an event listener from one or more events. */
    off(events, fn) {
      for (const e of words(events)) {
        if (this.events.has(e)) {
          this.events.set(e, this.events.get(e).filter((x) => x !== fn));
        }
      }
    }
    /** Triggers one or more events, and executes all bound event listeners. */
    trigger(events, arg) {
      for (const e of words(events)) {
        if (this.events.has(e)) {
          for (const callback of this.events.get(e)) {
            callback(arg);
          }
        }
      }
    }
  };

  // node_modules/@mathigon/fermat/dist/index.esm.js
  var __defProp2 = Object.defineProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var PRECISION = 1e-6;
  function nearlyEquals(a, b, t = PRECISION) {
    if (isNaN(a) || isNaN(b)) return false;
    return Math.abs(a - b) < t;
  }
  function isBetween(value, a, b, t = PRECISION) {
    if (a > b) [a, b] = [b, a];
    return value > a + t && value < b - t;
  }
  function roundTo(n, increment = 1) {
    return Math.round(n / increment) * increment;
  }
  function clamp(x, min = -Infinity, max = Infinity) {
    return Math.min(max, Math.max(min, x));
  }
  function lerp(a, b, t = 0.5) {
    return a + (b - a) * t;
  }
  function square(x) {
    return x * x;
  }
  function mod(a, m) {
    return (a % m + m) % m;
  }
  function subsets(array, length = 0) {
    const copy = array.slice(0);
    const results = subsetsHelper(copy);
    return length ? results.filter((x) => x.length === length) : results;
  }
  function subsetsHelper(array) {
    if (array.length === 1) return [[], array];
    const last2 = array.pop();
    const subsets2 = subsetsHelper(array);
    const result = [];
    for (const s of subsets2) {
      result.push(s, [...s, last2]);
    }
    return result;
  }
  var matrix_exports = {};
  __export2(matrix_exports, {
    determinant: () => determinant,
    fill: () => fill,
    identity: () => identity,
    inverse: () => inverse,
    product: () => product,
    reflection: () => reflection,
    rotation: () => rotation,
    scalarProduct: () => scalarProduct,
    shear: () => shear,
    sum: () => sum,
    transpose: () => transpose
  });
  function fill(value, x, y) {
    return repeat2D(value, x, y);
  }
  function identity(n = 2) {
    const x = fill(0, n, n);
    for (let i = 0; i < n; ++i) x[i][i] = 1;
    return x;
  }
  function rotation(angle) {
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);
    return [[cos, -sin], [sin, cos]];
  }
  function shear(lambda) {
    return [[1, lambda], [0, 1]];
  }
  function reflection(angle) {
    const sin = Math.sin(2 * angle);
    const cos = Math.cos(2 * angle);
    return [[cos, sin], [sin, -cos]];
  }
  function sum(...matrices) {
    const [M1, ...rest] = matrices;
    const M2 = rest.length > 1 ? sum(...rest) : rest[0];
    if (M1.length !== M2.length || M1[0].length !== M2[0].length) {
      throw new Error("Matrix sizes don\u2019t match");
    }
    const S = [];
    for (let i = 0; i < M1.length; ++i) {
      const row = [];
      for (let j = 0; j < M1[i].length; ++j) {
        row.push(M1[i][j] + M2[i][j]);
      }
      S.push(row);
    }
    return S;
  }
  function scalarProduct(M, v) {
    return M.map((row) => row.map((x) => x * v));
  }
  function product(...matrices) {
    const [M1, ...rest] = matrices;
    const M2 = rest.length > 1 ? product(...rest) : rest[0];
    if (M1[0].length !== M2.length) {
      throw new Error("Matrix sizes don\u2019t match.");
    }
    const P2 = [];
    for (let i = 0; i < M1.length; ++i) {
      const row = [];
      for (let j = 0; j < M2[0].length; ++j) {
        let value = 0;
        for (let k = 0; k < M2.length; ++k) {
          value += M1[i][k] * M2[k][j];
        }
        row.push(value);
      }
      P2.push(row);
    }
    return P2;
  }
  function transpose(M) {
    const T = [];
    for (let j = 0; j < M[0].length; ++j) {
      const row = [];
      for (let i = 0; i < M.length; ++i) {
        row.push(M[i][j]);
      }
      T.push(row);
    }
    return T;
  }
  function determinant(M) {
    if (M.length !== M[0].length) throw new Error("Not a square matrix.");
    const n = M.length;
    if (n === 1) return M[0][0];
    if (n === 2) return M[0][0] * M[1][1] - M[0][1] * M[1][0];
    let det = 0;
    for (let j = 0; j < n; ++j) {
      let diagLeft = M[0][j];
      let diagRight = M[0][j];
      for (let i = 1; i < n; ++i) {
        diagRight *= M[i][(j + i) % n];
        diagLeft *= M[i][(j - i + n) % n];
      }
      det += diagRight - diagLeft;
    }
    return det;
  }
  function inverse(M) {
    const n = M.length;
    if (n !== M[0].length) throw new Error("Not a square matrix.");
    const I = identity(n);
    const C = tabulate2D((x, y) => M[x][y], n, n);
    for (let i = 0; i < n; ++i) {
      let e = C[i][i];
      if (nearlyEquals(e, 0)) {
        for (let ii = i + 1; ii < n; ++ii) {
          if (C[ii][i] !== 0) {
            for (let j = 0; j < n; ++j) {
              [C[ii][j], C[i][j]] = [C[i][j], C[ii][j]];
              [I[ii][j], I[i][j]] = [I[i][j], I[ii][j]];
            }
            break;
          }
        }
        e = C[i][i];
        if (nearlyEquals(e, 0)) throw new Error("Matrix not invertible.");
      }
      for (let j = 0; j < n; ++j) {
        C[i][j] = C[i][j] / e;
        I[i][j] = I[i][j] / e;
      }
      for (let ii = 0; ii < n; ++ii) {
        if (ii === i) continue;
        const f = C[ii][i];
        for (let j = 0; j < n; ++j) {
          C[ii][j] -= f * C[i][j];
          I[ii][j] -= f * I[i][j];
        }
      }
    }
    return I;
  }
  var random_exports = {};
  __export2(random_exports, {
    bernoulli: () => bernoulli,
    binomial: () => binomial2,
    cauchy: () => cauchy,
    chiCDF: () => chiCDF,
    exponential: () => exponential,
    find: () => find,
    geometric: () => geometric,
    integer: () => integer,
    integrate: () => integrate,
    normal: () => normal,
    normalPDF: () => normalPDF,
    poisson: () => poisson,
    shuffle: () => shuffle,
    smart: () => smart,
    uniform: () => uniform,
    weighted: () => weighted
  });
  function shuffle(a) {
    a = a.slice(0);
    for (let i = a.length - 1; i > 0; --i) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  }
  function integer(a, b) {
    const start = b === void 0 ? 0 : a;
    const length = b === void 0 ? a : b - a + 1;
    return start + Math.floor(length * Math.random());
  }
  function weighted(weights) {
    const x = Math.random() * total(weights);
    let cum = 0;
    return weights.findIndex((w) => (cum += w) >= x);
  }
  function find(items) {
    return items[Math.floor(items.length * Math.random())];
  }
  var SMART_RANDOM_CACHE = /* @__PURE__ */ new Map();
  function smart(n, id) {
    if (!id) id = uid();
    if (!SMART_RANDOM_CACHE.has(id)) SMART_RANDOM_CACHE.set(id, repeat(1, n));
    const cache2 = SMART_RANDOM_CACHE.get(id);
    const x = weighted(cache2.map((x2) => x2 * x2));
    cache2[x] -= 1;
    if (cache2[x] <= 0) SMART_RANDOM_CACHE.set(id, cache2.map((x2) => x2 + 1));
    return x;
  }
  function bernoulli(p = 0.5) {
    return Math.random() < p ? 1 : 0;
  }
  function binomial2(n = 1, p = 0.5) {
    let t = 0;
    for (let i = 0; i < n; ++i) t += bernoulli(p);
    return t;
  }
  function poisson(l = 1) {
    if (l <= 0) return 0;
    const L = Math.exp(-l);
    let p = 1;
    let k = 0;
    for (; p > L; ++k) p *= Math.random();
    return k - 1;
  }
  function uniform(a = 0, b = 1) {
    return a + (b - a) * Math.random();
  }
  function normal(m = 0, v = 1) {
    const u1 = Math.random();
    const u2 = Math.random();
    const rand = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
    return rand * Math.sqrt(v) + m;
  }
  function exponential(l = 1) {
    return l <= 0 ? 0 : -Math.log(Math.random()) / l;
  }
  function geometric(p = 0.5) {
    if (p <= 0 || p > 1) return void 0;
    return Math.floor(Math.log(Math.random()) / Math.log(1 - p));
  }
  function cauchy() {
    let rr;
    let v1;
    let v2;
    do {
      v1 = 2 * Math.random() - 1;
      v2 = 2 * Math.random() - 1;
      rr = v1 * v1 + v2 * v2;
    } while (rr >= 1);
    return v1 / v2;
  }
  function normalPDF(x, m = 1, v = 0) {
    return Math.exp(-((x - m) ** 2) / (2 * v)) / Math.sqrt(2 * Math.PI * v);
  }
  var G = 7;
  var P = [
    0.9999999999998099,
    676.5203681218851,
    -1259.1392167224028,
    771.3234287776531,
    -176.6150291621406,
    12.507343278686905,
    -0.13857109526572012,
    9984369578019572e-21,
    15056327351493116e-23
  ];
  function gamma(z) {
    if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));
    z -= 1;
    let x = P[0];
    for (let i = 1; i < G + 2; i++) x += P[i] / (z + i);
    const t = z + G + 0.5;
    return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;
  }
  function integrate(fn, xMin, xMax, dx = 1) {
    let result = 0;
    for (let x = xMin; x < xMax; x += dx) {
      result += fn(x) * dx || 0;
    }
    return result;
  }
  function chiCDF(chi, deg) {
    const int = integrate((t) => Math.pow(t, (deg - 2) / 2) * Math.exp(-t / 2), 0, chi);
    return 1 - int / Math.pow(2, deg / 2) / gamma(deg / 2);
  }
  var regression_exports = {};
  __export2(regression_exports, {
    bestPolynomial: () => bestPolynomial,
    coefficient: () => coefficient,
    exponential: () => exponential2,
    linear: () => linear,
    logarithmic: () => logarithmic,
    polynomial: () => polynomial2,
    power: () => power
  });
  function evaluatePolynomial(regression, x) {
    let xs = 1;
    let t = regression[0];
    for (let i = 1; i < regression.length; ++i) {
      xs *= x;
      t += xs * regression[i];
    }
    return t;
  }
  function linear(data, throughOrigin = false) {
    let sX = 0;
    let sY = 0;
    let sXX = 0;
    let sXY = 0;
    const len = data.length;
    for (let n = 0; n < len; n++) {
      sX += data[n][0];
      sY += data[n][1];
      sXX += data[n][0] * data[n][0];
      sXY += data[n][0] * data[n][1];
    }
    if (throughOrigin) {
      const gradient2 = sXY / sXX;
      return [0, gradient2];
    }
    const gradient = (len * sXY - sX * sY) / (len * sXX - sX * sX);
    const intercept = sY / len - gradient * sX / len;
    return [intercept, gradient];
  }
  function exponential2(data) {
    const sum2 = [0, 0, 0, 0, 0, 0];
    for (const d of data) {
      sum2[0] += d[0];
      sum2[1] += d[1];
      sum2[2] += d[0] * d[0] * d[1];
      sum2[3] += d[1] * Math.log(d[1]);
      sum2[4] += d[0] * d[1] * Math.log(d[1]);
      sum2[5] += d[0] * d[1];
    }
    const denominator = sum2[1] * sum2[2] - sum2[5] * sum2[5];
    const a = Math.exp((sum2[2] * sum2[3] - sum2[5] * sum2[4]) / denominator);
    const b = (sum2[1] * sum2[4] - sum2[5] * sum2[3]) / denominator;
    return [a, b];
  }
  function logarithmic(data) {
    const sum2 = [0, 0, 0, 0];
    const len = data.length;
    for (const d of data) {
      sum2[0] += Math.log(d[0]);
      sum2[1] += d[1] * Math.log(d[0]);
      sum2[2] += d[1];
      sum2[3] += Math.pow(Math.log(d[0]), 2);
    }
    const b = (len * sum2[1] - sum2[2] * sum2[0]) / (len * sum2[3] - sum2[0] * sum2[0]);
    const a = (sum2[2] - b * sum2[0]) / len;
    return [a, b];
  }
  function power(data) {
    const sum2 = [0, 0, 0, 0];
    const len = data.length;
    for (const d of data) {
      sum2[0] += Math.log(d[0]);
      sum2[1] += Math.log(d[1]) * Math.log(d[0]);
      sum2[2] += Math.log(d[1]);
      sum2[3] += Math.pow(Math.log(d[0]), 2);
    }
    const b = (len * sum2[1] - sum2[2] * sum2[0]) / (len * sum2[3] - sum2[0] * sum2[0]);
    const a = Math.exp((sum2[2] - b * sum2[0]) / len);
    return [a, b];
  }
  function polynomial2(data, order = 2) {
    const X = data.map((d) => list(order + 1).map((p) => Math.pow(d[0], p)));
    const XT = transpose(X);
    const y = data.map((d) => [d[1]]);
    const XTX = product(XT, X);
    const inv = inverse(XTX);
    const r = product(inv, XT, y);
    return r.map((x) => x[0]);
  }
  function coefficient(data, fn) {
    const total4 = data.reduce((sum2, d) => sum2 + d[1], 0);
    const mean2 = total4 / data.length;
    const ssyy = data.reduce((sum2, d) => sum2 + (d[1] - mean2) ** 2, 0);
    const sse = data.reduce((sum2, d) => sum2 + (d[1] - fn(d[0])) ** 2, 0);
    return 1 - sse / ssyy;
  }
  function bestPolynomial(data, threshold = 0.85, maxOrder = 8) {
    if (data.length <= 1) return void 0;
    for (let i = 1; i < maxOrder; ++i) {
      const reg = polynomial2(data, i);
      const fn = (x) => evaluatePolynomial(reg, x);
      const coeff = coefficient(data, fn);
      if (coeff >= threshold) return { order: i, coefficients: reg, fn };
    }
    return void 0;
  }

  // node_modules/@mathigon/euclid/dist/index.esm.js
  var TWO_PI = 2 * Math.PI;
  function rad(p, c) {
    const a = Math.atan2(p.y - (c ? c.y : 0), p.x - (c ? c.x : 0));
    return mod(a, TWO_PI);
  }
  function findClosest(p, items) {
    let q = void 0;
    let d = Infinity;
    let index = -1;
    for (const [i, e] of items.entries()) {
      const q1 = e.project(p);
      const d1 = Point.distance(p, q1);
      if (d1 < d) {
        q = q1;
        d = d1;
        index = i;
      }
    }
    return q ? [q, index] : void 0;
  }
  var Point = class _Point {
    constructor(x = 0, y = 0) {
      this.x = x;
      this.y = y;
      this.type = "point";
    }
    get unitVector() {
      if (nearlyEquals(this.length, 0)) return new _Point(1, 0);
      return this.scale(1 / this.length);
    }
    get length() {
      return Math.sqrt(this.x ** 2 + this.y ** 2);
    }
    get inverse() {
      return new _Point(-this.x, -this.y);
    }
    get flip() {
      return new _Point(this.y, this.x);
    }
    get perpendicular() {
      return new _Point(-this.y, this.x);
    }
    get array() {
      return [this.x, this.y];
    }
    /** Finds the perpendicular distance between this point and a line. */
    distanceFromLine(l) {
      return _Point.distance(this, l.project(this));
    }
    /** Clamps this point to specific bounds. */
    clamp(bounds, padding = 0) {
      const x = clamp(this.x, bounds.xMin + padding, bounds.xMax - padding);
      const y = clamp(this.y, bounds.yMin + padding, bounds.yMax - padding);
      return new _Point(x, y);
    }
    changeCoordinates(originCoords, targetCoords) {
      const x = targetCoords.xMin + (this.x - originCoords.xMin) / originCoords.dx * targetCoords.dx;
      const y = targetCoords.yMin + (this.y - originCoords.yMin) / originCoords.dy * targetCoords.dy;
      return new _Point(x, y);
    }
    add(p) {
      return _Point.sum(this, p);
    }
    subtract(p) {
      return _Point.difference(this, p);
    }
    round(inc = 1) {
      return new _Point(roundTo(this.x, inc), roundTo(this.y, inc));
    }
    floor() {
      return new _Point(Math.floor(this.x), Math.floor(this.y));
    }
    mod(x, y = x) {
      return new _Point(this.x % x, this.y % y);
    }
    angle(c = ORIGIN) {
      return rad(this, c);
    }
    // Snap to the x or y values of another point
    snap(p, tolerance = 5) {
      if (nearlyEquals(this.x, p.x, tolerance)) return new _Point(p.x, this.y);
      if (nearlyEquals(this.y, p.y, tolerance)) return new _Point(this.x, p.y);
      return this;
    }
    /** Calculates the average of multiple points. */
    static average(...points) {
      const x = total(points.map((p) => p.x)) / points.length;
      const y = total(points.map((p) => p.y)) / points.length;
      return new _Point(x, y);
    }
    /** Calculates the dot product of two points p1 and p2. */
    static dot(p1, p2) {
      return p1.x * p2.x + p1.y * p2.y;
    }
    static sum(p1, p2) {
      return new _Point(p1.x + p2.x, p1.y + p2.y);
    }
    static difference(p1, p2) {
      return new _Point(p1.x - p2.x, p1.y - p2.y);
    }
    /** Returns the Euclidean distance between two points p1 and p2. */
    static distance(p1, p2) {
      return Math.sqrt(square(p1.x - p2.x) + square(p1.y - p2.y));
    }
    /** Returns the Manhattan distance between two points p1 and p2. */
    static manhattan(p1, p2) {
      return Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y);
    }
    /** Interpolates two points p1 and p2 by a factor of t. */
    static interpolate(p1, p2, t = 0.5) {
      return new _Point(lerp(p1.x, p2.x, t), lerp(p1.y, p2.y, t));
    }
    /** Interpolates a list of multiple points. */
    static interpolateList(points, t = 0.5) {
      const n = points.length - 1;
      const a = Math.floor(clamp(t, 0, 1) * n);
      return _Point.interpolate(points[a], points[a + 1], n * t - a);
    }
    /** Creates a point from polar coordinates. */
    static fromPolar(angle, r = 1) {
      return new _Point(r * Math.cos(angle), r * Math.sin(angle));
    }
    static random(b) {
      const x = random_exports.uniform(b.xMin, b.xMax);
      const y = random_exports.uniform(b.yMin, b.yMax);
      return new _Point(x, y);
    }
    static equals(p1, p2, precision) {
      return nearlyEquals(p1.x, p2.x, precision) && nearlyEquals(p1.y, p2.y, precision);
    }
    /** Check if p1, p2 and p3 lie on a straight line. */
    static colinear(p1, p2, p3, tolerance) {
      const dx1 = p1.x - p2.x;
      const dy1 = p1.y - p2.y;
      const dx2 = p2.x - p3.x;
      const dy2 = p2.y - p3.y;
      return nearlyEquals(dx1 * dy2, dx2 * dy1, tolerance);
    }
    // ---------------------------------------------------------------------------
    /** Transforms this point using a 2x3 matrix m. */
    transform(m) {
      const x = m[0][0] * this.x + m[0][1] * this.y + m[0][2];
      const y = m[1][0] * this.x + m[1][1] * this.y + m[1][2];
      return new _Point(x, y);
    }
    /** Rotates this point by a given angle (in radians) around point `c`. */
    rotate(angle, c = ORIGIN) {
      if (nearlyEquals(angle, 0)) return this;
      const x0 = this.x - c.x;
      const y0 = this.y - c.y;
      const cos = Math.cos(angle);
      const sin = Math.sin(angle);
      const x = x0 * cos - y0 * sin + c.x;
      const y = x0 * sin + y0 * cos + c.y;
      return new _Point(x, y);
    }
    /** Reflects this point across a line l. */
    reflect(l) {
      const v = l.p2.x - l.p1.x;
      const w = l.p2.y - l.p1.y;
      const x0 = this.x - l.p1.x;
      const y0 = this.y - l.p1.y;
      const mu = (v * y0 - w * x0) / (v * v + w * w);
      const x = this.x + 2 * mu * w;
      const y = this.y - 2 * mu * v;
      return new _Point(x, y);
    }
    scale(sx, sy = sx) {
      return new _Point(this.x * sx, this.y * sy);
    }
    shift(x, y = x) {
      return new _Point(this.x + x, this.y + y);
    }
    translate(p) {
      return this.shift(p.x, p.y);
    }
    equals(other, precision) {
      return _Point.equals(this, other, precision);
    }
    toString() {
      return `point(${this.x},${this.y})`;
    }
  };
  var ORIGIN = new Point(0, 0);
  function isPolygonLike(shape) {
    return ["polygon", "polyline", "rectangle", "triangle"].includes(shape.type);
  }
  function isPolygon(shape) {
    return ["polygon", "triangle"].includes(shape.type);
  }
  function isPolyline(shape) {
    return shape.type === "polyline";
  }
  function isRectangle(shape) {
    return shape.type === "rectangle";
  }
  function isLineLike(shape) {
    return ["line", "ray", "segment"].includes(shape.type);
  }
  function isLine(shape) {
    return shape.type === "line";
  }
  function isRay(shape) {
    return shape.type === "ray";
  }
  function isSegment(shape) {
    return shape.type === "segment";
  }
  function isCircle(shape) {
    return shape.type === "circle";
  }
  function isEllipse(shape) {
    return shape.type === "ellipse";
  }
  function isArc(shape) {
    return shape.type === "arc";
  }
  function isSector(shape) {
    return shape.type === "sector";
  }
  function isAngle(shape) {
    return shape.type === "angle";
  }
  var Line = class _Line {
    constructor(p1, p2) {
      this.p1 = p1;
      this.p2 = p2;
      this.type = "line";
    }
    /* The distance between the two points defining this line. */
    get length() {
      return Point.distance(this.p1, this.p2);
    }
    /* The squared distance between the two points defining this line. */
    get lengthSquared() {
      return (this.p1.x - this.p2.x) ** 2 + (this.p1.y - this.p2.y) ** 2;
    }
    /** The midpoint of this line. */
    get midpoint() {
      return Point.average(this.p1, this.p2);
    }
    /** The slope of this line. */
    get slope() {
      return (this.p2.y - this.p1.y) / (this.p2.x - this.p1.x);
    }
    /** The y-axis intercept of this line. */
    get intercept() {
      return this.p1.y - this.slope * this.p1.x;
    }
    /** The angle formed between this line and the x-axis. */
    get angle() {
      return rad(this.p2, this.p1);
    }
    /** The point representing a unit vector along this line. */
    get unitVector() {
      return this.p2.subtract(this.p1).unitVector;
    }
    /** The point representing the perpendicular vector of this line. */
    get perpendicularVector() {
      return new Point(this.p2.y - this.p1.y, this.p1.x - this.p2.x).unitVector;
    }
    /** Finds the line parallel to this one, going through point p. */
    parallel(p) {
      return new _Line(p, p.add(this.p2).subtract(this.p1));
    }
    /** Finds the line perpendicular to this one, going through point p. */
    perpendicular(p) {
      const q = this.line.project(p);
      if (Point.equals(p, q)) return new _Line(q, q.add(this.perpendicularVector.scale(this.length / 2)));
      return new _Line(q, p);
    }
    /** The perpendicular bisector of this line. */
    get perpendicularBisector() {
      return this.perpendicular(this.midpoint);
    }
    /** Squared distance between a point and a line. */
    distanceSquared(p) {
      const proj = this.project(p);
      return (p.x - proj.x) ** 2 + (p.y - proj.y) ** 2;
    }
    get line() {
      return this.type === "line" ? this : new _Line(this.p1, this.p2);
    }
    get ray() {
      return isRay(this) ? this : new Ray(this.p1, this.p2);
    }
    get segment() {
      return isSegment(this) ? this : new Segment(this.p1, this.p2);
    }
    // ---------------------------------------------------------------------------
    /** Signed distance along the line (opposite of .at()). */
    offset(p) {
      const a = Point.difference(this.p2, this.p1);
      const b = Point.difference(p, this.p1);
      return Point.dot(a, b) / this.lengthSquared;
    }
    /** Projects a point `p` onto this line. */
    project(p) {
      return this.at(this.offset(p));
    }
    /** Returns which side of this line a point p is on (or 0 on the line). */
    side(p, tolerance) {
      const a = Point.difference(this.p2, this.p1);
      const b = Point.difference(p, this.p1);
      const d = b.x * a.y - b.y * a.x;
      return nearlyEquals(d, 0, tolerance) ? 0 : Math.sign(d);
    }
    /** Checks if a point p lies on this line. */
    contains(p, tolerance) {
      return this.side(p, tolerance) === 0;
    }
    /** Gets the point at a specific offset along the line (opposite of .offset()). */
    at(t) {
      return Point.interpolate(this.p1, this.p2, t);
    }
    // ---------------------------------------------------------------------------
    transform(m) {
      return new this.constructor(this.p1.transform(m), this.p2.transform(m));
    }
    /** Rotates this line by a given angle (in radians), optionally around point `c`. */
    rotate(a, c = ORIGIN) {
      if (nearlyEquals(a, 0)) return this;
      return new this.constructor(this.p1.rotate(a, c), this.p2.rotate(a, c));
    }
    reflect(l) {
      return new this.constructor(this.p1.reflect(l), this.p2.reflect(l));
    }
    scale(sx, sy = sx) {
      return new this.constructor(this.p1.scale(sx, sy), this.p2.scale(sx, sy));
    }
    shift(x, y = x) {
      return new this.constructor(this.p1.shift(x, y), this.p2.shift(x, y));
    }
    translate(p) {
      return this.shift(p.x, p.y);
    }
    equals(other, tolerance) {
      return this.contains(other.p1, tolerance) && this.contains(other.p2, tolerance);
    }
    toString() {
      return `line(${this.p1},${this.p2})`;
    }
  };
  var Ray = class extends Line {
    constructor() {
      super(...arguments);
      this.type = "ray";
    }
    equals(other, tolerance) {
      if (other.type !== "ray") return false;
      if (!this.p1.equals(other.p1, tolerance)) return false;
      if (this.p2.equals(other.p2, tolerance)) return true;
      return other.contains(this.p2, tolerance) || this.contains(other.p2, tolerance);
    }
    contains(p, tolerance) {
      if (!super.contains(p, tolerance)) return false;
      const offset = this.offset(p);
      return nearlyEquals(offset, 0, tolerance) || offset > 0;
    }
    toString() {
      return `ray(${this.p1},${this.p2})`;
    }
  };
  var Segment = class _Segment extends Line {
    constructor() {
      super(...arguments);
      this.type = "segment";
    }
    contains(p, tolerance) {
      if (!super.contains(p, tolerance)) return false;
      if (this.p1.equals(p, tolerance) || this.p2.equals(p, tolerance)) return true;
      if (nearlyEquals(this.p1.x, this.p2.x, tolerance)) {
        return isBetween(p.y, this.p1.y, this.p2.y);
      } else {
        return isBetween(p.x, this.p1.x, this.p2.x);
      }
    }
    project(p) {
      const a = Point.difference(this.p2, this.p1);
      const b = Point.difference(p, this.p1);
      const q = clamp(Point.dot(a, b) / this.lengthSquared, 0, 1);
      return this.p1.add(a.scale(q));
    }
    /** Contracts (or expands) a line by a specific ratio. */
    contract(x) {
      return new _Segment(this.at(x), this.at(1 - x));
    }
    equals(other, tolerance, oriented = false) {
      if (other.type !== "segment") return false;
      return this.p1.equals(other.p1, tolerance) && this.p2.equals(other.p2, tolerance) || !oriented && this.p1.equals(other.p2, tolerance) && this.p2.equals(other.p1, tolerance);
    }
    toString() {
      return `segment(${this.p1},${this.p2})`;
    }
  };
  function liesOnSegment(s, p) {
    if (nearlyEquals(s.p1.x, s.p2.x)) return isBetween(p.y, s.p1.y, s.p2.y);
    return isBetween(p.x, s.p1.x, s.p2.x);
  }
  function liesOnRay(r, p) {
    if (nearlyEquals(r.p1.x, r.p2.x)) return (p.y - r.p1.y) / (r.p2.y - r.p1.y) > 0;
    return (p.x - r.p1.x) / (r.p2.x - r.p1.x) > 0;
  }
  function liesOnArc(a, p) {
    return isBetween(a.offset(p), 0, 1);
  }
  function lineLineIntersection(l1, l2) {
    const d1x = l1.p1.x - l1.p2.x;
    const d1y = l1.p1.y - l1.p2.y;
    const d2x = l2.p1.x - l2.p2.x;
    const d2y = l2.p1.y - l2.p2.y;
    const d = d1x * d2y - d1y * d2x;
    if (nearlyEquals(d, 0)) return [];
    const q1 = l1.p1.x * l1.p2.y - l1.p1.y * l1.p2.x;
    const q2 = l2.p1.x * l2.p2.y - l2.p1.y * l2.p2.x;
    const x = q1 * d2x - d1x * q2;
    const y = q1 * d2y - d1y * q2;
    return [new Point(x / d, y / d)];
  }
  function circleCircleIntersection(c1, c2) {
    const d = Point.distance(c1.c, c2.c);
    if (d > c1.r + c2.r) return [];
    if (d < Math.abs(c1.r - c2.r)) return [];
    if (nearlyEquals(d, 0) && nearlyEquals(c1.r, c2.r)) return [];
    if (nearlyEquals(d, c1.r + c2.r)) return [new Line(c1.c, c2.c).midpoint];
    const a = (square(c1.r) - square(c2.r) + square(d)) / (2 * d);
    const b = Math.sqrt(square(c1.r) - square(a));
    const px = (c2.c.x - c1.c.x) * a / d + (c2.c.y - c1.c.y) * b / d + c1.c.x;
    const py = (c2.c.y - c1.c.y) * a / d - (c2.c.x - c1.c.x) * b / d + c1.c.y;
    const qx = (c2.c.x - c1.c.x) * a / d - (c2.c.y - c1.c.y) * b / d + c1.c.x;
    const qy = (c2.c.y - c1.c.y) * a / d + (c2.c.x - c1.c.x) * b / d + c1.c.y;
    return [new Point(px, py), new Point(qx, qy)];
  }
  function lineCircleIntersection(l, c) {
    const dx = l.p2.x - l.p1.x;
    const dy = l.p2.y - l.p1.y;
    const dr2 = square(dx) + square(dy);
    const cx = c.c.x;
    const cy = c.c.y;
    const D = (l.p1.x - cx) * (l.p2.y - cy) - (l.p2.x - cx) * (l.p1.y - cy);
    const disc = square(c.r) * dr2 - square(D);
    if (disc < 0) return [];
    const xa = D * dy / dr2;
    const ya = -D * dx / dr2;
    if (nearlyEquals(disc, 0)) return [c.c.shift(xa, ya)];
    const xb = dx * (dy < 0 ? -1 : 1) * Math.sqrt(disc) / dr2;
    const yb = Math.abs(dy) * Math.sqrt(disc) / dr2;
    return [c.c.shift(xa + xb, ya + yb), c.c.shift(xa - xb, ya - yb)];
  }
  function simpleIntersection(a, b) {
    let results = [];
    const a1 = isArc(a) ? a.circle : a;
    const b1 = isArc(b) ? b.circle : b;
    if (isLineLike(a) && isLineLike(b)) {
      results = lineLineIntersection(a, b);
    } else if (isLineLike(a1) && isCircle(b1)) {
      results = lineCircleIntersection(a1, b1);
    } else if (isCircle(a1) && isLineLike(b1)) {
      results = lineCircleIntersection(b1, a1);
    } else if (isCircle(a1) && isCircle(b1)) {
      results = circleCircleIntersection(a1, b1);
    }
    for (const x of [a, b]) {
      if (isSegment(x)) results = results.filter((i) => liesOnSegment(x, i));
      if (isRay(x)) results = results.filter((i) => liesOnRay(x, i));
      if (isArc(x)) results = results.filter((i) => liesOnArc(x, i));
    }
    return results;
  }
  function intersections(...elements) {
    if (elements.length < 2) return [];
    if (elements.length > 2) {
      return flatten(subsets(elements, 2).map((e) => intersections(...e)));
    }
    let [a, b] = elements;
    if (isAngle(a)) a = a.shape(true);
    if (isAngle(b)) b = b.shape(true);
    if (isPolygonLike(b)) [a, b] = [b, a];
    if (isPolygonLike(a)) {
      const results = isLineLike(b) ? a.points.filter((p) => b.contains(p)) : [];
      for (const e of a.edges) results.push(...intersections(e, b));
      return results;
    }
    return simpleIntersection(a, b);
  }
  var Polygon = class _Polygon {
    constructor(...points) {
      this.type = "polygon";
      this.points = points;
    }
    get circumference() {
      if (this.points.length <= 1) return 0;
      let length = Point.distance(this.points[0], last(this.points));
      for (let i = 1; i < this.points.length; ++i) {
        length += Point.distance(this.points[i - 1], this.points[i]);
      }
      return length;
    }
    /**
     * The (signed) area of this polygon. The result is positive if the vertices
     * are ordered clockwise, and negative otherwise.
     */
    get signedArea() {
      const p = this.points;
      const n = p.length;
      let A = p[n - 1].x * p[0].y - p[0].x * p[n - 1].y;
      for (let i = 1; i < n; ++i) {
        A += p[i - 1].x * p[i].y - p[i].x * p[i - 1].y;
      }
      return A / 2;
    }
    get area() {
      return Math.abs(this.signedArea);
    }
    get centroid() {
      const p = this.points;
      const n = p.length;
      let Cx = 0;
      for (let i = 0; i < n; ++i) Cx += p[i].x;
      let Cy = 0;
      for (let i = 0; i < n; ++i) Cy += p[i].y;
      return new Point(Cx / n, Cy / n);
    }
    get edges() {
      const n = this.points.length;
      const edges = [];
      for (let i = 0; i < n; ++i) {
        edges.push(new Segment(this.points[i], this.points[(i + 1) % n]));
      }
      return edges;
    }
    get radius() {
      const c = this.centroid;
      const radii = this.points.map((p) => Point.distance(p, c));
      return Math.max(...radii);
    }
    /** The oriented version of this polygon (vertices in clockwise order). */
    get oriented() {
      if (this.signedArea >= 0) return this;
      const points = [...this.points].reverse();
      return new this.constructor(...points);
    }
    /** Checks if two polygons p1 and p2 collide. */
    static collision(p1, p2) {
      if (p1.points.some((q) => p2.contains(q))) return true;
      if (p2.points.some((q) => p1.contains(q))) return true;
      for (const e1 of p1.edges) {
        for (const e2 of p2.edges) {
          if (intersections(e1, e2)[0]) return true;
        }
      }
      return false;
    }
    /** Creates a regular polygon. */
    static regular(n, radius = 1) {
      const da = TWO_PI / n;
      const a0 = Math.PI / 2 - da / 2;
      const points = tabulate((i) => Point.fromPolar(a0 + da * i, radius), n);
      return new _Polygon(...points);
    }
    /** Interpolates the points of two polygons */
    static interpolate(p1, p2, t = 0.5) {
      const points = p1.points.map(
        (p, i) => Point.interpolate(p, p2.points[i], t)
      );
      return new _Polygon(...points);
    }
    static convexHull(...points) {
      if (points.length <= 3) return new _Polygon(...points);
      const sorted = points.sort((a, b) => a.x !== b.x ? a.x - b.x : a.y - b.y);
      const sortedReverse = sorted.slice(0).reverse();
      const upper = [];
      const lower = [];
      for (const [source, target] of [[sorted, upper], [sortedReverse, lower]]) {
        for (const p of source) {
          while (target.length >= 2) {
            const p1 = target[target.length - 1];
            const p2 = target[target.length - 2];
            if ((p1.x - p2.x) * (p.y - p2.y) >= (p.x - p2.x) * (p1.y - p2.y)) {
              target.pop();
            } else {
              break;
            }
          }
          target.push(p);
        }
        target.pop();
      }
      return new _Polygon(...upper.concat(lower));
    }
    // ---------------------------------------------------------------------------
    /**
     * Checks if a point p lies inside this polygon, by using a ray-casting
     * algorithm and calculating the number of intersections.
     */
    contains(p) {
      let inside = false;
      for (const e of this.edges) {
        if (e.p1.equals(p) || e.contains(p)) return false;
        if (e.p1.y > p.y === e.p2.y > p.y) continue;
        const det = (e.p2.x - e.p1.x) / (e.p2.y - e.p1.y);
        if (p.x < det * (p.y - e.p1.y) + e.p1.x) inside = !inside;
      }
      return inside;
    }
    at(t) {
      if (t < 0) t += Math.floor(t);
      const offset = t * this.circumference;
      let cum = 0;
      for (const e of this.edges) {
        const l = e.length;
        if (cum + l > offset) return e.at((offset - cum) / l);
        cum += l;
      }
      return this.points[0];
    }
    offset(p) {
      const edges = this.edges;
      const proj = findClosest(p, this.edges) || [this.points[0], 0];
      let offset = 0;
      for (let i = 0; i < proj[1]; ++i) offset += edges[i].length;
      offset += edges[proj[1]].offset(p) * edges[proj[1]].length;
      return offset / this.circumference;
    }
    project(p) {
      const proj = findClosest(p, this.edges);
      return proj ? proj[0] : this.points[0];
    }
    /** Center this polygon on a given point or the origin */
    centerAt(on = ORIGIN) {
      return this.translate(on.subtract(this.centroid));
    }
    // ---------------------------------------------------------------------------
    transform(m) {
      return new this.constructor(...this.points.map((p) => p.transform(m)));
    }
    /** Rotates this polygon by a given angle (in radians), optionally around point `center`. */
    rotate(a, center = ORIGIN) {
      if (nearlyEquals(a, 0)) return this;
      const points = this.points.map((p) => p.rotate(a, center));
      return new this.constructor(...points);
    }
    reflect(line) {
      const points = this.points.map((p) => p.reflect(line));
      return new this.constructor(...points);
    }
    scale(sx, sy = sx) {
      const points = this.points.map((p) => p.scale(sx, sy));
      return new this.constructor(...points);
    }
    shift(x, y = x) {
      const points = this.points.map((p) => p.shift(x, y));
      return new this.constructor(...points);
    }
    translate(p) {
      return this.shift(p.x, p.y);
    }
    equals(other, tolerance, oriented) {
      const n = this.points.length;
      if (n !== other.points.length) return false;
      const p1 = oriented ? this : this.oriented;
      const p2 = oriented ? other : other.oriented;
      for (let offset = 0; offset < n; ++offset) {
        if (p1.points.every((p, i) => p.equals(p2.points[(i + offset) % n], tolerance))) {
          return true;
        }
      }
      return false;
    }
    toString() {
      return `polygon(${this.points.join(",")})`;
    }
  };
  var RAD_TO_DEG = 180 / Math.PI;
  var DEG_TO_RAD = Math.PI / 180;
  function toDeg(n) {
    return n * RAD_TO_DEG;
  }
  var Rectangle = class _Rectangle {
    constructor(p, w = 1, h = w) {
      this.p = p;
      this.w = w;
      this.h = h;
      this.type = "rectangle";
    }
    /** Creates the smallest rectangle containing all given points. */
    static aroundPoints(points) {
      let xMin = Infinity;
      let xMax = -Infinity;
      let yMin = Infinity;
      let yMax = -Infinity;
      for (const p of points) {
        xMin = xMin < p.x ? xMin : p.x;
        xMax = xMax > p.x ? xMax : p.x;
        yMin = yMin < p.y ? yMin : p.y;
        yMax = yMax > p.y ? yMax : p.y;
      }
      return new _Rectangle(new Point(xMin, yMin), xMax - xMin, yMax - yMin);
    }
    get center() {
      return new Point(this.p.x + this.w / 2, this.p.y + this.h / 2);
    }
    get centroid() {
      return this.center;
    }
    get circumference() {
      return 2 * Math.abs(this.w) + 2 * Math.abs(this.h);
    }
    get area() {
      return Math.abs(this.signedArea);
    }
    get signedArea() {
      return this.w * this.h;
    }
    /** @returns {Segment[]} */
    get edges() {
      return this.polygon.edges;
    }
    /** @returns {Point[]} */
    get points() {
      return this.polygon.points;
    }
    /** A polygon class representing this rectangle. */
    get polygon() {
      const b = new Point(this.p.x + this.w, this.p.y);
      const c = new Point(this.p.x + this.w, this.p.y + this.h);
      const d = new Point(this.p.x, this.p.y + this.h);
      return new Polygon(this.p, b, c, d);
    }
    get bounds() {
      return new Bounds(this.p.x, this.p.x + this.w, this.p.y, this.p.y + this.h);
    }
    collision(r) {
      return this.p.x < r.p.x + r.w && this.p.x + this.w > r.p.x && this.p.y < r.p.y + r.h && this.p.y + this.h > r.p.y;
    }
    padding(top, right, bottom, left) {
      return new _Rectangle(this.p.shift(-left, -top), this.w + left + right, this.h + top + bottom);
    }
    get unsigned() {
      if (this.w > 0 && this.h > 0) return this;
      const p = this.p.shift(this.w < 0 ? this.w : 0, this.h < 0 ? this.h : 0);
      return new _Rectangle(p, Math.abs(this.w), Math.abs(this.h));
    }
    // ---------------------------------------------------------------------------
    contains(p, tolerance) {
      return isBetween(p.x, this.p.x, this.p.x + this.w, tolerance) && isBetween(p.y, this.p.y, this.p.y + this.h, tolerance);
    }
    project(p) {
      let q = void 0;
      for (const e of this.edges) {
        const q1 = e.project(p);
        if (!q || Point.distance(p, q1) < Point.distance(p, q)) q = q1;
      }
      return q;
    }
    at(t) {
      return this.polygon.at(t);
    }
    offset(p) {
      return this.polygon.offset(p);
    }
    get oriented() {
      return this.polygon.oriented;
    }
    // ---------------------------------------------------------------------------
    transform(m) {
      return this.polygon.transform(m);
    }
    /** Rotates this rectangle by a given angle (in radians), optionally around point `c`. */
    rotate(a, c = ORIGIN) {
      if (nearlyEquals(a, 0)) return this;
      return this.polygon.rotate(a, c);
    }
    reflect(l) {
      return this.polygon.reflect(l);
    }
    scale(sx, sy = sx) {
      return new _Rectangle(this.p.scale(sx, sy), this.w * sx, this.h * sy);
    }
    shift(x, y = x) {
      return new _Rectangle(this.p.shift(x, y), this.w, this.h);
    }
    translate(p) {
      return this.shift(p.x, p.y);
    }
    equals(_other) {
      return false;
    }
    toString() {
      return `rectangle(${this.p},${this.w},${this.h})`;
    }
  };
  var Bounds = class _Bounds {
    /**
     * Use the `errorHandling` option to decide how to deal with cases where the
     * min and max values are in the wrong order.
     */
    constructor(xMin, xMax, yMin, yMax, errorHandling) {
      this.xMin = xMin;
      this.xMax = xMax;
      this.yMin = yMin;
      this.yMax = yMax;
      if (errorHandling === "swap") {
        if (this.dx < 0) [this.xMin, this.xMax] = [xMax, xMin];
        if (this.dy < 0) [this.yMin, this.yMax] = [yMax, yMin];
      } else if (errorHandling === "center") {
        if (this.dx < 0) this.xMin = this.xMax = (xMin + xMax) / 2;
        if (this.dy < 0) this.yMin = this.yMax = (yMin + yMax) / 2;
      }
    }
    contains(p) {
      return this.containsX(p) && this.containsY(p);
    }
    containsX(p) {
      return isBetween(p.x, this.xMin, this.xMax);
    }
    containsY(p) {
      return isBetween(p.y, this.yMin, this.yMax);
    }
    resize(dx, dy) {
      return new _Bounds(this.xMin, this.xMax + dx, this.yMin, this.yMax + dy);
    }
    get dx() {
      return this.xMax - this.xMin;
    }
    get dy() {
      return this.yMax - this.yMin;
    }
    get xRange() {
      return [this.xMin, this.xMax];
    }
    get yRange() {
      return [this.yMin, this.yMax];
    }
    extend(top, right = top, bottom = top, left = right) {
      return new _Bounds(this.xMin - left, this.xMax + right, this.yMin - top, this.yMax + bottom);
    }
    get rect() {
      return new Rectangle(new Point(this.xMin, this.yMin), this.dx, this.dy);
    }
    get center() {
      return new Point(this.xMin + this.dx / 2, this.yMin + this.dy / 2);
    }
    get flip() {
      return new _Bounds(this.yMin, this.yMax, this.xMin, this.xMax);
    }
  };
  function drawCanvas(ctx2, obj, options = {}) {
    if (isAngle(obj)) return drawCanvas(ctx2, obj.shape(!!options.fill), options);
    if (options.fill) ctx2.fillStyle = options.fill;
    if (options.opacity) ctx2.globalAlpha = options.opacity;
    if (options.stroke) {
      ctx2.strokeStyle = options.stroke;
      ctx2.lineWidth = options.strokeWidth || 1;
      if (options.lineCap) ctx2.lineCap = options.lineCap;
      if (options.lineJoin) ctx2.lineJoin = options.lineJoin;
    }
    ctx2.beginPath();
    if (isSegment(obj)) {
      ctx2.moveTo(obj.p1.x, obj.p1.y);
      ctx2.lineTo(obj.p2.x, obj.p2.y);
    } else if (isLineLike(obj)) {
      if (!options.box) return;
      let [start, end] = intersections(obj, options.box);
      if (isRay(obj)) end = obj.p1;
      if (!start || !end) return;
      ctx2.moveTo(start.x, start.y);
      ctx2.lineTo(end.x, end.y);
    } else if (isCircle(obj)) {
      ctx2.arc(obj.c.x, obj.c.y, obj.r, 0, TWO_PI);
    } else if (isPolygonLike(obj)) {
      const points = obj.points;
      ctx2.moveTo(points[0].x, points[0].y);
      for (const p of points.slice(1)) ctx2.lineTo(p.x, p.y);
      ctx2.closePath();
    } else if (isPolyline(obj)) {
      ctx2.moveTo(obj.points[0].x, obj.points[0].y);
      for (const p of obj.points.slice(1)) ctx2.lineTo(p.x, p.y);
    } else if (isEllipse(obj)) {
      ctx2.ellipse(obj.c.x, obj.c.y, obj.a, obj.b, obj.angle, 0, TWO_PI);
    }
    if (options.fill) ctx2.fill();
    if (options.stroke) ctx2.stroke();
  }
  var CIRCLE_MAGIC = 4 * (Math.sqrt(2) - 1) / 3;
  function drawArc(a, b, c) {
    const orient = b.x * (c.y - a.y) + a.x * (b.y - c.y) + c.x * (a.y - b.y);
    const sweep = orient > 0 ? 1 : 0;
    const size = Point.distance(b, a);
    return [a.x, `${a.y}A${size}`, size, 0, sweep, 1, c.x, c.y].join(",");
  }
  function drawPath(...points) {
    return `M${points.map((p) => `${p.x},${p.y}`).join("L")}`;
  }
  function drawLineMark(x, type) {
    const p = x.perpendicularVector.scale(6);
    const n = x.unitVector.scale(3);
    const m = x.midpoint;
    switch (type) {
      case "bar":
        return drawPath(m.add(p), m.add(p.inverse));
      case "bar2":
        return drawPath(m.add(n).add(p), m.add(n).add(p.inverse)) + drawPath(m.add(n.inverse).add(p), m.add(n.inverse).add(p.inverse));
      case "arrow":
        return drawPath(
          m.add(n.inverse).add(p),
          m.add(n),
          m.add(n.inverse).add(p.inverse)
        );
      case "arrow2":
        return drawPath(
          m.add(n.scale(-2)).add(p),
          m,
          m.add(n.scale(-2)).add(p.inverse)
        ) + drawPath(m.add(p), m.add(n.scale(2)), m.add(p.inverse));
      default:
        return "";
    }
  }
  function arrowPath(start, normal2) {
    if (!start || !normal2) return "";
    const perp = normal2.perpendicular;
    const a = start.add(normal2.scale(9)).add(perp.scale(9));
    const b = start.add(normal2.scale(9)).add(perp.scale(-9));
    return drawPath(a, start, b);
  }
  function drawLineArrows(x, type) {
    let path = "";
    if (isOneOf(type, "start", "both")) {
      path += arrowPath(x.p1, x.unitVector);
    }
    if (isOneOf(type, "end", "both")) {
      path += arrowPath(x.p2, x.unitVector.inverse);
    }
    return path;
  }
  function drawArcArrows(x, type) {
    let path = "";
    if (isOneOf(type, "start", "both")) {
      const normal2 = new Line(x.c, x.start).perpendicularVector.inverse;
      path += arrowPath(x.start, normal2);
    }
    if (isOneOf(type, "end", "both")) {
      const normal2 = new Line(x.c, x.end).perpendicularVector;
      path += arrowPath(x.end, normal2);
    }
    return path;
  }
  function getBezierPoints(points, radius) {
    const length0 = Point.distance(points[0], points[1]);
    const length1 = Point.distance(points[1], points[2]);
    const r1 = Math.max(0.1, length0 / 2);
    const r2 = Math.max(0.1, length1 / 2);
    const rad2 = Math.min(radius, r1, r2);
    const d1 = rad2 / length0;
    const d2 = rad2 / length1;
    const shift = 1 - CIRCLE_MAGIC;
    const p1 = Point.interpolate(points[0], points[1], clamp(1 - d1, 0, 1));
    const p2 = Point.interpolate(points[0], points[1], clamp(1 - d1 * shift, 0, 1));
    const p3 = Point.interpolate(points[1], points[2], clamp(d2 * shift, 0, 1));
    const p4 = Point.interpolate(points[1], points[2], clamp(d2, 0, 1));
    return [p1, p2, p3, p4];
  }
  function drawRoundedPath(points, radius, close = false) {
    if (radius < 0) radius = 0;
    let path = "M";
    if (!close) {
      path += `${points[0].x} ${points[0].y}`;
    } else {
      const p1 = points[points.length - 1];
      const p2 = points[0];
      const p3 = points[1];
      const offsets = getBezierPoints([p1, p2, p3], radius);
      path += `${offsets[3].x} ${offsets[3].y}`;
    }
    for (let index = 0; index < points.length; index++) {
      if (index < points.length - 2 || close) {
        const p1 = points[index];
        const p2 = points[(index + 1) % points.length];
        const p3 = points[(index + 2) % points.length];
        const offsets = getBezierPoints([p1, p2, p3], radius).map((p) => `${p.x} ${p.y}`);
        path += `L${offsets[0]}C${offsets[1]} ${offsets[2]} ${offsets[3]}`;
      } else if (index === points.length - 2 && !close) {
        path += `L${points[index + 1].x} ${points[index + 1].y}`;
      }
    }
    return path;
  }
  function drawSVG(obj, options = {}) {
    if (isAngle(obj)) {
      const shape = obj.shape(!!options.fill, options.size, options.round);
      return drawSVG(shape, options);
    }
    if (isSegment(obj)) {
      if (obj.p1.equals(obj.p2)) return "";
      let line = drawPath(obj.p1, obj.p2);
      if (options.mark) line += drawLineMark(obj, options.mark);
      if (options.arrows) line += drawLineArrows(obj, options.arrows);
      return line;
    }
    if (isRay(obj)) {
      if (!options.box) return "";
      const end = intersections(obj, options.box)[0];
      if (!end) return "";
      let line = drawPath(obj.p1, end);
      if (options.mark) line += drawLineMark(obj, options.mark);
      return line;
    }
    if (isLine(obj)) {
      if (!options.box) return "";
      const points = intersections(obj, options.box);
      if (points.length < 2) return "";
      let line = drawPath(points[0], points[1]);
      if (options.mark) line += drawLineMark(obj, options.mark);
      return line;
    }
    if (isCircle(obj)) {
      return `M${obj.c.x - obj.r} ${obj.c.y}a${obj.r},${obj.r} 0 1 0 ${2 * obj.r} 0a${obj.r} ${obj.r} 0 1 0 ${-2 * obj.r} 0Z`;
    }
    if (isEllipse(obj)) {
      const [u, v] = obj.majorVertices;
      const rot = toDeg(obj.angle);
      return `M${u.x} ${u.y}A${obj.a} ${obj.b} ${rot} 0 0 ${v.x} ${v.y}A${obj.a} ${obj.b} ${rot} 0 0 ${u.x} ${u.y}Z`;
    }
    if (isArc(obj)) {
      let path = `M${drawArc(obj.start, obj.c, obj.end)}`;
      if (options.arrows) path += drawArcArrows(obj, options.arrows);
      return path;
    }
    if (isSector(obj)) {
      return `M${obj.c.x} ${obj.c.y} L ${drawArc(obj.start, obj.c, obj.end)}Z`;
    }
    if (isPolyline(obj)) {
      if (options.cornerRadius) return drawRoundedPath(obj.points, options.cornerRadius, false);
      return drawPath(...obj.points);
    }
    if (isPolygon(obj) || isRectangle(obj) && options.cornerRadius) {
      if (options.cornerRadius) {
        return drawRoundedPath(obj.points, options.cornerRadius, true);
      }
      return `${drawPath(...obj.points)}Z`;
    }
    if (isRectangle(obj)) {
      return `${drawPath(...obj.polygon.points)}Z`;
    }
    return "";
  }

  // node_modules/@mathigon/boost/dist/index.esm.js
  var __knownSymbol2 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError2 = (msg) => {
    throw TypeError(msg);
  };
  var __async2 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var __await2 = function(promise, isYieldStar) {
    this[0] = promise;
    this[1] = isYieldStar;
  };
  var __yieldStar2 = (value) => {
    var obj = value[__knownSymbol2("asyncIterator")], isAwait = false, method, it = {};
    if (obj == null) {
      obj = value[__knownSymbol2("iterator")]();
      method = (k) => it[k] = (x) => obj[k](x);
    } else {
      obj = obj.call(value);
      method = (k) => it[k] = (v) => {
        if (isAwait) {
          isAwait = false;
          if (k === "throw") throw v;
          return v;
        }
        isAwait = true;
        return {
          done: false,
          value: new __await2(new Promise((resolve) => {
            var x = obj[k](v);
            if (!(x instanceof Object)) __typeError2("Object expected");
            resolve(x);
          }), 1)
        };
      };
    }
    return it[__knownSymbol2("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
      throw x;
    }, "return" in obj && method("return"), it;
  };
  var STORAGE_KEY = "_M";
  var UA = window.navigator.userAgent.toLowerCase();
  var MOBILE_REGEX = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i;
  var IOS_REGEX = /iphone|ipad|ipod/i;
  var SAFARI_REGEX = /^((?!chrome|android).)*safari/i;
  var _a;
  var BrowserInstance = class {
    constructor() {
      this.isMobile = MOBILE_REGEX.test(UA);
      this.isRetina = (window.devicePixelRatio || 1) > 1;
      this.isTouch = !!window.Touch || "ontouchstart" in window;
      this.isChrome = !!window.chrome;
      this.isFirefox = UA.indexOf("firefox") >= 0;
      this.isAndroid = UA.indexOf("android") >= 0;
      this.isIOS = IOS_REGEX.test(UA);
      this.isSafari = IOS_REGEX.test(UA) || SAFARI_REGEX.test(UA);
      this.loadQueue = [];
      this.loaded = false;
      this.width = window.innerWidth;
      this.height = window.innerHeight;
      this.resizeCallbacks = [];
      this.theme = { name: "light", isDark: false };
      this.themeChangedCallbacks = [];
      this.themeOverride = "";
      this.darkQuery = (_a = window.matchMedia) == null ? void 0 : _a.call(window, "(prefers-color-scheme: dark)");
      var _a2, _b;
      window.onload = () => this.afterLoad();
      document.addEventListener("DOMContentLoaded", () => this.afterLoad());
      const applyResizeThrottled = throttle(() => this.applyResize());
      window.addEventListener("resize", applyResizeThrottled);
      try {
        (_a2 = this.darkQuery) == null ? void 0 : _a2.addEventListener("change", () => this.applyThemeChange());
      } catch (e) {
        (_b = this.darkQuery) == null ? void 0 : _b.addListener(() => this.applyThemeChange());
      }
      const initial = this.getCookie("theme");
      if (initial) this.setTheme(initial);
      try {
        this.localStorage = window.localStorage;
      } catch (e) {
        console.warn("Unable to access Local Storage in this context.");
      }
    }
    afterLoad() {
      if (this.loaded) return;
      this.loaded = true;
      for (const fn of this.loadQueue) fn();
      setTimeout(() => this.resize());
    }
    /** Binds an event listener that is triggered when the page is loaded. */
    ready(fn) {
      if (this.loaded) {
        fn();
      } else {
        this.loadQueue.push(fn);
      }
    }
    /** Forces a re-paint. This is useful when updating transition properties. */
    redraw() {
      document.body.offsetHeight;
    }
    applyResize() {
      const newWidth = window.innerWidth;
      const newHeight = window.innerHeight;
      if (this.width === newWidth && this.height === newHeight) return;
      this.width = newWidth;
      this.height = newHeight;
      for (const fn of this.resizeCallbacks) fn({ width: this.width, height: this.height });
      $body.trigger("scroll", { top: $body.scrollTop });
    }
    onResize(fn) {
      fn({ width: this.width, height: this.height });
      this.resizeCallbacks.push(fn);
    }
    offResize(fn) {
      const i = this.resizeCallbacks.indexOf(fn);
      if (i >= 0) this.resizeCallbacks.splice(i, 1);
    }
    resize() {
      this.applyResize();
    }
    applyThemeChange() {
      const name = this.theme.name;
      const isDark = name === "dark" || name === "auto" && this.darkQuery.matches;
      if (isDark === this.theme.isDark) return;
      this.theme.isDark = isDark;
      for (const c of this.themeChangedCallbacks) c(this.theme);
      setTimeout(() => $html.setAttr("theme", this.themeOverride || (isDark ? "dark" : "light")));
    }
    setTheme(name) {
      if (name === this.theme.name) return;
      this.theme.name = name;
      this.setCookie("theme", name);
      this.applyThemeChange();
    }
    onThemeChange(fn) {
      this.themeChangedCallbacks.push(fn);
    }
    // ---------------------------------------------------------------------------
    // Location
    /** Returns the hash string of the current window. */
    getHash() {
      return window.location.hash.slice(1);
    }
    /** Set the hash string of the current window. */
    setHash(h) {
      const scroll = document.body.scrollTop;
      window.location.hash = h;
      document.body.scrollTop = scroll;
    }
    /** Set the URL of the current window. */
    setURL(url, title = "") {
      window.history.replaceState({}, title, url);
      if (title) window.document.title = title;
    }
    // ---------------------------------------------------------------------------
    // Cookies
    /** Returns a JSON object of all cookies. */
    getCookies() {
      const pairs = document.cookie.split(";");
      const result = {};
      for (let i = 0, n = pairs.length; i < n; ++i) {
        const pair = pairs[i].split("=");
        result[decodeURIComponent(pair[0]).trim()] = decodeURIComponent(pair[1]);
      }
      return result;
    }
    getCookie(name) {
      const v = document.cookie.match(new RegExp(`(^|;) ?${name}=([^;]*)(;|$)`));
      return v ? v[2] : void 0;
    }
    setCookie(name, value, maxAge = 60 * 60 * 24 * 365) {
      const domain = window.location.hostname.replace(/^[a-z]{2}\./, "");
      document.cookie = `${name}=${value};path=/;max-age=${maxAge};domain=${domain}`;
    }
    deleteCookie(name) {
      this.setCookie(name, "", -1);
    }
    setStorage(key, value) {
      var _a2, _b;
      const keys = (key || "").split(".");
      const storage = safeToJSON(((_a2 = this.localStorage) == null ? void 0 : _a2.getItem(STORAGE_KEY)) || void 0, {});
      let path = storage;
      for (let i = 0; i < keys.length - 1; ++i) {
        if (path[keys[i]] === void 0) path[keys[i]] = {};
        path = path[keys[i]];
      }
      path[keys[keys.length - 1]] = value;
      (_b = this.localStorage) == null ? void 0 : _b.setItem(STORAGE_KEY, JSON.stringify(storage));
    }
    getStorage(key) {
      var _a2;
      let path = safeToJSON((_a2 = this.localStorage) == null ? void 0 : _a2.getItem(STORAGE_KEY), {});
      if (!key) return path;
      const keys = (key || "").split(".");
      const lastKey = keys.pop();
      for (const k of keys) {
        if (!(k in path)) return;
        path = path[k];
      }
      return path[lastKey];
    }
    deleteStorage(key) {
      var _a2;
      if (key) {
        this.setStorage(key, void 0);
      } else {
        (_a2 = this.localStorage) == null ? void 0 : _a2.setItem(STORAGE_KEY, "");
      }
    }
    // ---------------------------------------------------------------------------
    // Keyboard Event Handling
    /** The current active element on the page (e.g. and `<input>`). */
    getActiveInput() {
      let active = document.activeElement;
      if (active == null ? void 0 : active.shadowRoot) active = active.shadowRoot.activeElement;
      return active === document.body ? void 0 : $(active);
    }
    get formIsActive() {
      var _a2;
      return !!((_a2 = this.getActiveInput()) == null ? void 0 : _a2.is("input, select, textarea, [contenteditable]"));
    }
  };
  var Browser = window.BoostBrowser || new BrowserInstance();
  window.BoostBrowser = Browser;
  var IEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/;
  var webkitUA = /\bAppleWebKit\/(\d+)\b/;
  var EdgeUA = /\bEdge\/12\.(\d+)\b/;
  var polyfill = IEUA.test(navigator.userAgent) || +(navigator.userAgent.match(EdgeUA) || [])[1] < 10547 || +(navigator.userAgent.match(webkitUA) || [])[1] < 537;
  var requests = {};
  function replaceSvgImports() {
    if (!polyfill) return;
    const uses = Array.from(document.querySelectorAll("svg > use"));
    uses.forEach(function(use) {
      const src = use.getAttribute("xlink:href");
      const [url, id] = src.split("#");
      if (!url.length || !id) return;
      const svg = use.parentNode;
      svg.removeChild(use);
      if (!(url in requests)) requests[url] = fetch(url).then((r) => r.text());
      const request = requests[url];
      request.then((response) => {
        const doc = document.implementation.createHTMLDocument("");
        doc.documentElement.innerHTML = response;
        const icon = doc.getElementById(id);
        const clone = icon.cloneNode(true);
        const fragment = document.createDocumentFragment();
        while (clone.childNodes.length) fragment.appendChild(clone.firstChild);
        svg.appendChild(fragment);
      });
    });
  }
  var KEY_FALLBACKS = new Map(Object.entries({
    " ": "Space",
    "Spacebar": "Space",
    "Del": "Delete",
    "Esc": "Escape",
    "Left": "ArrowLeft",
    "Right": "ArrowRight",
    "Down": "ArrowDown",
    "Up": "ArrowUp"
  }));
  function keyCode(e) {
    return KEY_FALLBACKS.get(e.key) || e.key;
  }
  var isReady = false;
  setTimeout(() => isReady = true);
  var BOUNCE_IN = "cubic-bezier(0.175, 0.885, 0.32, 1.275)";
  var BOUNCE_OUT = "cubic-bezier(0.68, -0.275, 0.825, 0.115)";
  var ResolvedAnimation = { cancel: () => void 0, promise: Promise.resolve() };
  function animate(callback, duration) {
    if (duration === 0) {
      callback(1, 0, () => void 0);
      return ResolvedAnimation;
    }
    const startTime = Date.now();
    const deferred = defer();
    let lastTime = 0;
    let running = true;
    const cancel = () => {
      running = false;
      deferred.reject();
    };
    function getFrame() {
      if (!running) return;
      if (!duration || lastTime <= duration) {
        window.requestAnimationFrame(getFrame);
      }
      const time = Date.now() - startTime;
      callback(duration ? Math.min(1, time / duration) : time, time - lastTime, cancel);
      if (duration && time >= duration) deferred.resolve();
      lastTime = time;
    }
    getFrame();
    return { cancel, promise: deferred.promise };
  }
  function easeIn(type, t = 0, s = 0) {
    switch (type) {
      case "quad":
        return t ** 2;
      case "cubic":
        return t ** 3;
      case "quart":
        return t ** 4;
      case "quint":
        return t ** 5;
      case "circ":
        return 1 - Math.sqrt(1 - t ** 2);
      case "sine":
        return 1 - Math.cos(t * Math.PI / 2);
      case "exp":
        return t <= 0 ? 0 : Math.pow(2, 10 * (t - 1));
      case "back":
        if (!s) s = 1.70158;
        return t * t * ((s + 1) * t - s);
      case "elastic":
        if (!s) s = 0.3;
        return -Math.pow(2, 10 * (t - 1)) * Math.sin(((t - 1) * 2 / s - 0.5) * Math.PI);
      case "swing":
        return 0.5 - Math.cos(t * Math.PI) / 2;
      case "spring":
        return 1 - Math.cos(t * 4.5 * Math.PI) * Math.exp(-t * 6);
      case "bounce":
        if (t < 1 / 11) return 1 / 64 - 7.5625 * (0.5 / 11 - t) * (0.5 / 11 - t);
        if (t < 3 / 11) return 1 / 16 - 7.5625 * (2 / 11 - t) * (2 / 11 - t);
        if (t < 7 / 11) return 1 / 4 - 7.5625 * (5 / 11 - t) * (5 / 11 - t);
        return 1 - 7.5625 * (1 - t) * (1 - t);
      default:
        return t;
    }
  }
  function ease(type, t = 0, s = 0) {
    if (t === 0) return 0;
    if (t === 1) return 1;
    const [name, direction] = type.split("-");
    if (direction === "in") return easeIn(name, t, s);
    if (direction === "out") return 1 - easeIn(name, 1 - t, s);
    if (t <= 0.5) return easeIn(name, 2 * t, s) / 2;
    return 1 - easeIn(name, 2 * (1 - t), s) / 2;
  }
  function transition($el, properties, duration = 400, _delay = 0, easing = "ease-in-out") {
    if (!isReady) {
      Object.keys(properties).forEach((k) => {
        const p = properties[k];
        $el.css(k, Array.isArray(p) ? p[1] : p);
      });
      return ResolvedAnimation;
    }
    if (easing === "bounce-in") easing = BOUNCE_IN;
    if (easing === "bounce-out") easing = BOUNCE_OUT;
    let oldTransition = "";
    if (Browser.isSafari) {
      oldTransition = $el._el.style.transition;
      $el.css("transition", "none");
      Browser.redraw();
    }
    const currentAnimation = $el._data.animation;
    if (currentAnimation) currentAnimation.cancel();
    const to = {};
    const from = {};
    const deferred = defer();
    const style2 = window.getComputedStyle($el._el);
    Object.keys(properties).forEach((k) => {
      const p = properties[k];
      const k1 = toCamelCase(k);
      from[k1] = Array.isArray(p) ? p[0] : style2.getPropertyValue(k);
      to[k1] = Array.isArray(p) ? p[1] : p;
      if (_delay) $el.css(k, from[k1]);
    });
    const oldHeight = to.height;
    if (to.height === "auto") {
      const children = $el.children.filter((c) => c.css("position") !== "absolute");
      to.height = `${total(children.map(($c) => $c.outerHeight))}px`;
    }
    let player;
    let cancelled = false;
    delay(() => {
      if (cancelled) return;
      player = $el._el.animate([from, to], { duration, easing, fill: "forwards" });
      player.onfinish = () => {
        if ($el._el) {
          Object.keys(properties).forEach((k) => $el.css(k, k === "height" ? oldHeight : to[k]));
        }
        if (Browser.isSafari) $el.css("transition", oldTransition);
        deferred.resolve();
        player.cancel();
        $el._data.animation = void 0;
      };
    }, _delay);
    const animation = {
      cancel() {
        if (cancelled) return;
        cancelled = true;
        if ($el._el) Object.keys(properties).forEach((k) => $el.css(k, $el.css(k)));
        if (player) player.cancel();
        $el._data.animation = void 0;
      },
      promise: deferred.promise
    };
    setTimeout(() => $el._data.animation = animation);
    return animation;
  }
  var CSS_MATRIX = /matrix\([0-9.\-\s]+,[0-9.\-\s]+,[0-9.\-\s]+,[0-9.\-\s]+,([0-9.\-\s]+),([0-9.\-\s]+)\)/;
  function enter($el, effect = "fade", duration = 500, _delay = 0) {
    $el.show();
    if (!isReady) return ResolvedAnimation;
    const opacity = $el._data.animation ? 1 : +$el.css("opacity") || 1;
    if (effect === "fade") {
      return transition($el, { opacity: [0, opacity] }, duration, _delay);
    } else if (effect === "pop") {
      const transform = $el.transform.replace(/scale\([0-9.]*\)/, "").replace(CSS_MATRIX, "translate($1px,$2px)");
      transition($el, { opacity: [0, opacity] }, duration, _delay);
      return transition($el, {
        transform: [`${transform} scale(0.5)`, `${transform} scale(1)`]
      }, duration, _delay, "bounce-in");
    } else if (effect === "descend") {
      const rules = { opacity: [0, 1], transform: ["translateY(-50%)", "none"] };
      return transition($el, rules, duration, _delay);
    } else if (effect.startsWith("draw")) {
      const l = $el.strokeLength;
      $el.css("stroke-dasharray", `${l}px`);
      if (!$el.css("opacity")) $el.css("opacity", 1);
      const end = effect === "draw-reverse" ? `${2 * l}px` : 0;
      const rules = { "stroke-dashoffset": [`${l}px`, end] };
      const animation = transition($el, rules, duration, _delay, "linear");
      animation.promise.then(() => $el.css("stroke-dasharray", ""));
      return animation;
    } else if (effect.startsWith("slide")) {
      const rules = { opacity: [0, opacity], transform: ["translateY(50px)", "none"] };
      if (effect.includes("down")) rules.transform[0] = "translateY(-50px)";
      if (effect.includes("right")) rules.transform[0] = "translateX(-50px)";
      if (effect.includes("left")) rules.transform[0] = "translateX(50px)";
      return transition($el, rules, duration, _delay);
    } else if (effect.startsWith("reveal")) {
      const rules = { opacity: [0, opacity], height: [0, "auto"] };
      if (effect.includes("left")) rules.transform = ["translateX(-50%)", "none"];
      if (effect.includes("right")) rules.transform = ["translateX(50%)", "none"];
      return transition($el, rules, duration, _delay);
    }
    return ResolvedAnimation;
  }
  function exit($el, effect = "fade", duration = 400, delay3 = 0, remove = false) {
    if (!$el._el) return ResolvedAnimation;
    if (!isReady) {
      $el.hide();
      return ResolvedAnimation;
    }
    if ($el.css("display") === "none") return ResolvedAnimation;
    let animation;
    if (effect === "fade") {
      animation = transition($el, { opacity: [1, 0] }, duration, delay3);
    } else if (effect === "pop") {
      const transform = $el.transform.replace(/scale\([0-9.]*\)/, "");
      transition($el, { opacity: [1, 0] }, duration, delay3);
      animation = transition($el, {
        transform: [`${transform} scale(1)`, `${transform} scale(0.5)`]
      }, duration, delay3, "bounce-out");
    } else if (effect === "ascend") {
      const rules = { opacity: [1, 0], transform: ["none", "translateY(-50%)"] };
      animation = transition($el, rules, duration, delay3);
    } else if (effect.startsWith("draw")) {
      const l = $el.strokeLength;
      $el.css("stroke-dasharray", l);
      const start = effect === "draw-reverse" ? `${2 * l}px` : 0;
      const rules = { "stroke-dashoffset": [start, `${l}px`] };
      animation = transition($el, rules, duration, delay3, "linear");
    } else if (effect.startsWith("slide")) {
      const rules = { opacity: 0, transform: "translateY(50px)" };
      if (effect.includes("up")) rules.transform = "translateY(-50px)";
      animation = transition($el, rules, duration, delay3);
    } else if (effect.startsWith("reveal")) {
      const rules = { opacity: 0, height: 0 };
      if (effect.includes("left")) rules.transform = "translateX(-50%)";
      if (effect.includes("right")) rules.transform = "translateX(50%)";
      animation = transition($el, rules, duration, delay3);
    }
    animation.promise.then(() => remove ? $el.remove() : $el.hide());
    return animation;
  }
  var BINARY_OPS = {
    // TODO Operator overloading (e.g. add vectors or complex numbers)
    "===": (a, b) => a === b,
    "!==": (a, b) => a !== b,
    "||": (a, b) => a || b,
    "&&": (a, b) => a && b,
    // eslint-disable-next-line eqeqeq
    "==": (a, b) => a == b,
    // eslint-disable-next-line eqeqeq
    "!=": (a, b) => a != b,
    "<=": (a, b) => a <= b,
    ">=": (a, b) => a >= b,
    "**": (a, b) => a ** b,
    "<": (a, b) => a < b,
    ">": (a, b) => a > b,
    "+": (a, b) => a + b,
    "-": (a, b) => a - b,
    "*": (a, b) => a * b,
    "/": (a, b) => a / b,
    "%": (a, b) => a % b
  };
  var UNARY_OPS = {
    "-": (a) => -a,
    "+": (a) => +a,
    "!": (a) => !a
  };
  var BINARY_PRECEDENCE = {
    "||": 1,
    "&&": 2,
    "==": 3,
    "!=": 3,
    "===": 3,
    "!==": 3,
    "<": 4,
    ">": 4,
    "<=": 4,
    ">=": 4,
    "+": 5,
    "-": 5,
    "*": 6,
    "/": 6,
    "%": 6,
    "**": 7
    // TODO Exponentiation should be right-to-left.
  };
  var LITERALS = {
    "true": true,
    "false": false,
    "undefined": void 0
  };
  var SPACE = /\s/;
  var DIGIT = /[0-9]/;
  var IDENTIFIER_START = /[a-zA-Zα-ωΑ-Ω$_]/;
  var IDENTIFIER_PART = /[0-9a-zA-Zα-ωΑ-Ω$_]/;
  function parseSyntaxTree(expr) {
    const length = expr.length;
    let index = 0;
    function throwError(message) {
      throw new Error(`${message} at character ${index} of "${expr}"`);
    }
    function gobbleSpaces() {
      while (SPACE.test(expr[index])) index += 1;
    }
    function gobbleNumericLiteral() {
      var _a2;
      const number = ((_a2 = expr.slice(index).match(/^\d*(\.\d+)?([eE][+-]?\d+)?/)) == null ? void 0 : _a2[0]) || "";
      index += number.length;
      const char = expr[index];
      if (char && (IDENTIFIER_START.test(char) || char === ".")) {
        throwError(`Unexpected character (${number + char})`);
      }
      return { type: 5, value: parseFloat(number) };
    }
    function gobbleStringLiteral() {
      const quote = expr[index];
      index += 1;
      let closed = false;
      let string = "";
      while (index < length) {
        const char = expr[index++];
        if (char === quote) {
          closed = true;
          break;
        }
        string += char;
      }
      if (!closed) throwError(`Unclosed quote after "${string}"`);
      return { type: 5, value: string };
    }
    function gobbleIdentifier() {
      let name = expr[index];
      if (!IDENTIFIER_START.test(expr[index])) throwError(`Unexpected ${name}`);
      index += 1;
      while (index < length) {
        if (IDENTIFIER_PART.test(expr[index])) {
          name += expr[index++];
        } else {
          break;
        }
      }
      if (name in LITERALS) {
        return { type: 5, value: LITERALS[name] };
      } else {
        return { type: 4, name };
      }
    }
    function gobbleArguments(termination) {
      const args = [];
      let closed = false;
      let lastArg = void 0;
      while (index < length) {
        if (expr[index] === termination) {
          if (lastArg) args.push(lastArg);
          closed = true;
          index += 1;
          break;
        } else if (expr[index] === ",") {
          args.push(lastArg || { type: 5, value: void 0 });
          index += 1;
        } else {
          lastArg = gobbleExpression();
        }
      }
      if (!closed) throwError(`Expected ${termination}`);
      return args;
    }
    function gobbleVariable() {
      let node2;
      if (expr[index] === "(") {
        index += 1;
        node2 = gobbleExpression();
        gobbleSpaces();
        if (expr[index] === ")") {
          index += 1;
          return node2;
        } else {
          throwError("Unclosed (");
        }
      } else {
        node2 = gobbleIdentifier();
      }
      gobbleSpaces();
      while (".[(".includes(expr[index])) {
        if (expr[index] === ".") {
          index++;
          gobbleSpaces();
          node2 = {
            type: 6,
            object: node2,
            computed: false,
            property: gobbleIdentifier()
          };
        } else if (expr[index] === "[") {
          index++;
          node2 = {
            type: 6,
            object: node2,
            computed: true,
            property: gobbleExpression()
          };
          gobbleSpaces();
          if (expr[index] !== "]") throwError("Unclosed [");
          index++;
        } else if (expr[index] === "(") {
          index++;
          node2 = {
            type: 2,
            args: gobbleArguments(")"),
            callee: node2
          };
        }
        gobbleSpaces();
      }
      return node2;
    }
    function gobbleBinaryOp() {
      gobbleSpaces();
      for (const length2 of [3, 2, 1]) {
        const substr = expr.substr(index, length2);
        if (substr in BINARY_OPS) {
          index += length2;
          return substr;
        }
      }
    }
    function gobbleToken() {
      gobbleSpaces();
      const operator = expr[index];
      if (DIGIT.test(operator) || operator === ".") {
        return gobbleNumericLiteral();
      } else if (operator === "'" || operator === '"') {
        return gobbleStringLiteral();
      } else if (operator === "[") {
        index += 1;
        return { type: 0, elements: gobbleArguments("]") };
      } else if (operator in UNARY_OPS) {
        index += 1;
        return { type: 7, operator, argument: gobbleToken() };
      } else if (IDENTIFIER_START.test(operator) || operator === "(") {
        return gobbleVariable();
      }
      throwError("Expression parsing error");
    }
    function gobbleBinaryExpression() {
      let left = gobbleToken();
      let biop = gobbleBinaryOp();
      if (!biop) return left;
      let right = gobbleToken();
      if (!right) throwError(`Expected expression after ${biop}`);
      let node2;
      const stack = [left, biop, right];
      while (biop = gobbleBinaryOp()) {
        const prec = BINARY_PRECEDENCE[biop];
        const curBiop = biop;
        while (stack.length > 2 && prec <= BINARY_PRECEDENCE[stack[stack.length - 2]]) {
          right = stack.pop();
          biop = stack.pop();
          left = stack.pop();
          node2 = { type: 1, operator: biop, left, right };
          stack.push(node2);
        }
        node2 = gobbleToken();
        if (!node2) throwError(`Expected expression after ${curBiop}`);
        stack.push(curBiop, node2);
      }
      let i = stack.length - 1;
      node2 = stack[i];
      while (i > 1) {
        node2 = {
          type: 1,
          operator: stack[i - 1],
          left: stack[i - 2],
          right: node2
        };
        i -= 2;
      }
      return node2;
    }
    function gobbleExpression() {
      const test = gobbleBinaryExpression();
      gobbleSpaces();
      if (test && expr[index] === "?") {
        index += 1;
        const consequent = gobbleExpression();
        if (!consequent) throwError("Expected expression");
        gobbleSpaces();
        if (expr[index] === ":") {
          index++;
          const alternate = gobbleExpression();
          if (!alternate) throwError("Expected expression");
          return { type: 3, test, consequent, alternate };
        } else {
          throwError("Expected :");
        }
      } else {
        return test;
      }
    }
    const node = gobbleExpression();
    if (index < expr.length) throwError(`Unexpected "${expr[index]}"`);
    return node;
  }
  var EMPTY = [void 0, void 0];
  var FORBIDDEN_KEYS = ["__proto__", "constructor", "prototype"];
  function evaluate(node, context, local) {
    switch (node.type) {
      case 0:
        const v1 = node.elements.map((n) => evaluate(n, context, local)[0]);
        if (v1.some((v) => v === void 0)) return EMPTY;
        return [v1, void 0];
      case 1:
        const left = evaluate(node.left, context, local)[0];
        const right = evaluate(node.right, context, local)[0];
        if ("+-**/%".includes(node.operator) && (left === void 0 || right === void 0)) return EMPTY;
        return [BINARY_OPS[node.operator](left, right), void 0];
      case 2:
        const [fn, self] = evaluate(node.callee, context, local);
        if (fn === Function || fn === eval) return EMPTY;
        const args = node.args.map((n) => evaluate(n, context, local)[0]);
        if (args.some((v) => v === void 0) || typeof fn !== "function") return EMPTY;
        return [fn.apply(self, args), void 0];
      case 3:
        const consequent = evaluate(node.consequent, context, local);
        const alternate = evaluate(node.alternate, context, local);
        return evaluate(node.test, context, local)[0] ? consequent : alternate;
      case 4:
        if (FORBIDDEN_KEYS.includes(node.name)) return EMPTY;
        return [local[node.name] || context[node.name], void 0];
      case 5:
        return [node.value, void 0];
      case 6:
        const object = evaluate(node.object, context, local)[0];
        const property = node.computed ? evaluate(node.property, context, local)[0] : node.property.name;
        if (FORBIDDEN_KEYS.includes(property)) return EMPTY;
        return object ? [object[property], object] : [void 0, void 0];
      case 7:
        const arg = evaluate(node.argument, context, local)[0];
        if (arg === void 0 && node.operator !== "!") return EMPTY;
        return [UNARY_OPS[node.operator](arg), void 0];
    }
  }
  function compile(expr) {
    const node = parseSyntaxTree(expr);
    if (!node) return (_context = {}) => void 0;
    return (context = {}, local = {}) => evaluate(node, context, local)[0];
  }
  var TEMPLATE = /\${([^}]+)}/g;
  function compileString(expr, isAttribute = false) {
    const parts = expr.split(TEMPLATE);
    const fns = parts.map((p, i) => i % 2 ? compile(p.replace(/×/g, "*")) : void 0);
    return (context) => {
      return parts.map((p, i) => {
        if (!(i % 2)) return p;
        const value = fns[i](context);
        return !isAttribute && typeof value === "number" && value < 0 ? `\u2013${-value}` : value;
      }).join("");
    };
  }
  var touchSupport = "ontouchstart" in window;
  var pointerSupport = "onpointerdown" in window;
  function pointerPosition(e) {
    if (e.touches) {
      const touches = e.targetTouches.length ? e.targetTouches : e.changedTouches;
      return new Point(touches[0].clientX, touches[0].clientY);
    } else {
      return new Point(e.clientX || 0, e.clientY || 0);
    }
  }
  function getTouches(e) {
    return e.touches || [];
  }
  function svgPointerPosn(event, $svg) {
    const posn = pointerPosition(event);
    return posn.transform($svg.inverseTransformMatrix);
  }
  function canvasPointerPosition(event, $canvas) {
    const posn = pointerPosition(event);
    const bounds = $canvas.bounds;
    const x = (posn.x - bounds.left) * $canvas.canvasWidth / bounds.width;
    const y = (posn.y - bounds.top) * $canvas.canvasHeight / bounds.height;
    return new Point(x, y);
  }
  function getEventTarget(event) {
    if (event instanceof PointerEvent && event.pointerType === "mouse") {
      return $(event.target);
    }
    const posn = pointerPosition(event);
    return $(document.elementFromPoint(posn.x, posn.y) || void 0);
  }
  function makeTapEvent($el) {
    if ($el._data["tapEvent"]) return;
    $el._data["tapEvent"] = true;
    let start = void 0;
    $el.on("pointerdown", (e) => start = pointerPosition(e));
    $el.on("pointerup", (e) => {
      if (!start) return;
      const end = pointerPosition(e);
      if (Point.distance(start, end) < 6) $el.trigger("tap", e);
      start = void 0;
    });
    $el.on("pointercancel", () => start = void 0);
  }
  function makeClickOutsideEvent($el) {
    if ($el._data["clickOutsideEvent"]) return;
    $el._data["clickOutsideEvent"] = true;
    $body.on("pointerdown", (e) => {
      const target = e.composedPath()[0] || e.target;
      if (!target || $el._el === target || $el._el.contains(target)) return;
      $el.trigger("clickOutside", e);
    });
  }
  function slide($el, fns) {
    const $box = fns.$box || $el;
    let posn = pointerPosition;
    if ($box.type === "svg") {
      posn = (e) => svgPointerPosn(e, $box.$ownerSVG);
    } else if ($box.type === "canvas") {
      posn = (e) => canvasPointerPosition(e, $box);
    }
    const $parent = fns.justInside ? $el : $body;
    let startPosn = void 0;
    let lastPosn = void 0;
    let hasMoved = false;
    let pointerId = 0;
    if ($el.css("touch-action") === "auto") $el.css("touch-action", "none");
    $el.addClass("noselect");
    function start(e) {
      if (e.handled || getTouches(e).length > 1) return;
      e.preventDefault();
      hasMoved = false;
      pointerId = e.pointerId || 0;
      $parent.on("pointermove", move);
      $parent.on("pointerstop", end);
      startPosn = lastPosn = posn(e);
      if (fns.down) fns.down(startPosn);
    }
    function move(e) {
      if (!startPosn) return;
      if (pointerId && e.pointerId !== pointerId) return;
      e.preventDefault();
      const p = posn(e);
      if (Point.distance(p, lastPosn) < 0.5) return;
      if (!hasMoved && fns.start) fns.start(startPosn);
      if (fns.move) fns.move(p, startPosn, lastPosn);
      lastPosn = p;
      hasMoved = true;
    }
    function end(e, preventClick = false) {
      if (!startPosn) return;
      if (pointerId && e.pointerId !== pointerId) return;
      e.preventDefault();
      $parent.off("pointermove", move);
      $parent.off("pointerstop", end);
      if (fns.up) fns.up(lastPosn, startPosn);
      if (hasMoved && fns.end) fns.end(lastPosn, startPosn);
      if (!hasMoved && fns.click && !preventClick) fns.click(startPosn);
      startPosn = void 0;
    }
    $body.onKey("Escape", () => {
      if (!startPosn) return;
      if (hasMoved && fns.move) fns.move(startPosn, startPosn, lastPosn);
      lastPosn = startPosn;
      const event = document.createEvent("MouseEvent");
      event.pointerId = pointerId;
      end(event, true);
    });
    $el.on("pointerdown", start);
    if (fns.justInside) $el.on("mouseleave", end);
    if (fns.accessible) {
      $el.setAttr("tabindex", "0");
      document.addEventListener("keydown", (e) => {
        if (![37, 38, 39, 40].includes(e.keyCode)) return;
        if ($el !== Browser.getActiveInput()) return;
        const center = $el.boxCenter;
        const start2 = posn({ clientX: center.x, clientY: center.y });
        const dx = e.keyCode === 37 ? -25 : e.keyCode === 39 ? 25 : 0;
        const dy = e.keyCode === 38 ? -25 : e.keyCode === 40 ? 25 : 0;
        const end2 = start2.shift(dx, dy);
        if (fns.down) fns.down(start2);
        if (fns.start) fns.start(start2);
        if (fns.move) fns.move(end2, start2, start2);
        if (fns.end) fns.end(end2, start2);
      });
    }
  }
  function makeScrollEvents($el) {
    if ($el._data["scrollEvents"]) return;
    $el._data["scrollEvents"] = true;
    let ticking = false;
    let top = void 0;
    function tick() {
      const newTop = $el.scrollTop;
      if (newTop === top) {
        ticking = false;
        return;
      }
      top = newTop;
      $el.trigger("scroll", { top });
      window.requestAnimationFrame(tick);
    }
    function scroll() {
      if (!ticking) window.requestAnimationFrame(tick);
      ticking = true;
    }
    const target = $el.type === "window" ? window : $el._el;
    target.addEventListener("scroll", scroll);
    function touchStart() {
      window.addEventListener("touchmove", scroll);
      window.addEventListener("touchend", touchEnd);
    }
    function touchEnd() {
      window.removeEventListener("touchmove", scroll);
      window.removeEventListener("touchend", touchEnd);
    }
    $el._el.addEventListener("touchstart", function(e) {
      if (!e.handled) touchStart();
    });
  }
  function hover($el, options) {
    const $clickTarget = options.$clickTarget || $el;
    let timeout = 0;
    let active = false;
    let wasTriggeredByMouse = false;
    let wasTriggeredByFocus = false;
    function enter2() {
      if (active) return;
      if (options.enter) options.enter();
      active = true;
    }
    function exit2() {
      if (!active) return;
      clearTimeout(timeout);
      if (options.exit) options.exit();
      active = false;
    }
    $el.on("mouseover", () => {
      if (options.preventMouseover && options.preventMouseover()) return;
      clearTimeout(timeout);
      timeout = delay(() => {
        enter2();
        wasTriggeredByMouse = true;
      }, options.delay);
    });
    $el.on("mouseout", () => {
      if (!wasTriggeredByMouse) return;
      clearTimeout(timeout);
      timeout = delay(exit2, options.exitDelay || options.delay);
    });
    $clickTarget.on("focus", () => {
      if (active || options.preventMouseover && options.preventMouseover()) return;
      clearTimeout(timeout);
      enter2();
      wasTriggeredByFocus = true;
    });
    const onBlur = () => {
      if (!wasTriggeredByFocus) return;
      if (options.canFocusWithin) {
        setTimeout(() => {
          const $newActive = Browser.getActiveInput();
          if ($newActive && $newActive.hasParent($el)) {
            $newActive.one("blur", onBlur);
          } else {
            exit2();
          }
        });
      } else {
        exit2();
      }
    };
    $clickTarget.on("blur", onBlur);
    $clickTarget.on("click", () => {
      if (active && !wasTriggeredByMouse) {
        exit2();
      } else if (!active) {
        enter2();
        wasTriggeredByMouse = false;
      }
    });
    $el.on("clickOutside", exit2);
  }
  var observer;
  function intersectionCallback(entries) {
    for (const e of entries) {
      const event = e.isIntersecting ? "enterViewport" : "exitViewport";
      setTimeout(() => $(e.target).trigger(event));
    }
  }
  function makeIntersectionEvents($el) {
    if ($el._data["intersectionEvents"]) return;
    $el._data["intersectionEvents"] = true;
    if (!window.IntersectionObserver) {
      let wasVisible = false;
      $body.on("scroll", () => {
        const isVisible = $el.isInViewport;
        if (wasVisible && !isVisible) {
          $el.trigger("exitViewport");
          wasVisible = false;
        } else if (isVisible && !wasVisible) {
          $el.trigger("enterViewport");
          wasVisible = true;
        }
      });
      return;
    }
    if (!observer) observer = new IntersectionObserver(intersectionCallback);
    observer.observe($el._el);
  }
  function makeResizeEvents($el, remove = false) {
    if (remove) {
      if ($el._data["resizeObserver"]) $el._data["resizeObserver"].disconnect();
      $el._data["resizeObserver"] = void 0;
    }
    if ($el._data["resizeObserver"]) return;
    if (window.ResizeObserver) {
      const observer2 = new window.ResizeObserver(() => $el.trigger("resize"));
      observer2.observe($el._el);
      $el._data["resizeObserver"] = observer2;
    } else if (window.MutationObserver) {
      const observer2 = new MutationObserver(() => $el.trigger("resize"));
      observer2.observe($el._el, { attributes: true, childList: true, characterData: true, subtree: true });
      $el._data["resizeObserver"] = observer2;
    }
  }
  function makePointerPositionEvents($el) {
    if ($el._data["pointerPositionEvents"]) return;
    $el._data["pointerPositionEvents"] = true;
    const parent = $el.parent;
    let isInside;
    parent.on("pointerend", () => isInside = void 0);
    parent.on("pointermove", (e) => {
      const wasInside = isInside;
      const target = getEventTarget(e);
      isInside = target.equals($el) || target.hasParent($el);
      if (wasInside !== void 0 && isInside && !wasInside) $el.trigger("pointerenter", e);
      if (!isInside && wasInside) $el.trigger("pointerleave", e);
    });
  }
  function makeMouseEvent(eventName, $el) {
    if ($el._data[`_${eventName}`]) return;
    $el._data[`_${eventName}`] = true;
    if (pointerSupport) {
      $el.on(eventName.replace("mouse", "pointer"), (e) => {
        if (e.pointerType === "mouse") $el.trigger(eventName, e);
      });
    } else if (!touchSupport) {
      $el._el.addEventListener(eventName, (e) => $el.trigger(eventName, e));
    }
  }
  function makeKeyEvent($el) {
    $el.on("keydown", (e) => {
      if (e.metaKey || e.ctrlKey) return;
      if (Browser.isAndroid && e.keyCode === 229) return;
      const key = e.key || String.fromCharCode(e.which);
      const shift = !!e.shiftKey;
      $el.trigger("key", { code: e.keyCode, key, char: key, shift });
    });
    if (Browser.isAndroid && $el.type === "input") {
      $el.on("input", (e) => {
        const key = e.key || e.data[e.data.length - 1];
        $el.trigger("key", { code: void 0, key, char: key });
        $el.value = "";
      });
    }
  }
  var aliases = {
    scrollwheel: "DOMMouseScroll mousewheel",
    pointerdown: pointerSupport ? "pointerdown" : touchSupport ? "touchstart" : "mousedown",
    pointermove: pointerSupport ? "pointermove" : touchSupport ? "touchmove" : "mousemove",
    pointerup: pointerSupport ? "pointerup" : touchSupport ? "touchend" : "mouseup",
    pointercancel: pointerSupport ? "pointercancel" : "touchcancel",
    pointerstop: pointerSupport ? "pointerup pointercancel" : touchSupport ? "touchend touchcancel" : "mouseup"
  };
  var customEvents = {
    scroll: makeScrollEvents,
    tap: makeTapEvent,
    clickOutside: makeClickOutsideEvent,
    key: makeKeyEvent,
    mousedown: makeMouseEvent.bind(void 0, "mousedown"),
    mousemove: makeMouseEvent.bind(void 0, "mousemove"),
    mouseup: makeMouseEvent.bind(void 0, "mouseup"),
    pointerenter: makePointerPositionEvents,
    pointerleave: makePointerPositionEvents,
    enterViewport: makeIntersectionEvents,
    exitViewport: makeIntersectionEvents,
    resize: makeResizeEvents
  };
  function bindEvent($el, event, fn, options) {
    if (event in customEvents) {
      customEvents[event]($el, false);
    } else if (event in aliases) {
      const events = words(aliases[event]);
      for (const e of events) $el._el.addEventListener(e, fn, options);
    } else {
      $el._el.addEventListener(event, fn, options);
    }
  }
  function unbindEvent($el, event, fn) {
    if (event in customEvents) {
      if (!$el._events[event] || !$el._events[event].length) {
        customEvents[event]($el, true);
      }
    } else if (fn && event in aliases) {
      const events = words(aliases[event]);
      for (const e of events) $el._el.removeEventListener(e, fn);
    } else if (fn) {
      $el._el.removeEventListener(event, fn);
    }
  }
  var batchDepth = 0;
  var batchedCallbacks = /* @__PURE__ */ new Map();
  function enqueueCallback(callback, state) {
    batchedCallbacks.set(callback, state);
  }
  function batch(callback) {
    batchDepth++;
    callback();
    batchDepth--;
    if (batchDepth === 0) {
      for (const [callback2, state] of batchedCallbacks.entries()) callback2(state);
      batchedCallbacks.clear();
    }
  }
  function observe(state, parentModel) {
    const callbackMap = /* @__PURE__ */ new Map();
    const computedKeys = /* @__PURE__ */ new Map();
    const watchAllCallbacks = /* @__PURE__ */ new Set();
    let pendingCallback = void 0;
    let lastKey = 0;
    function watch(callback) {
      pendingCallback = callback;
      const result = callback(proxy, true);
      pendingCallback = void 0;
      return result;
    }
    function watchKeys(keys, fn) {
      for (const key of keys.split(" ")) {
        if (!callbackMap.has(key)) callbackMap.set(key, /* @__PURE__ */ new Set());
        callbackMap.get(key).add(fn);
      }
      return fn(proxy, true);
    }
    function unwatch(callback) {
      for (const callbacks of callbackMap.values()) {
        if (callbacks.has(callback)) callbacks.delete(callback);
      }
      watchAllCallbacks.delete(callback);
    }
    function watchAll(callback, dontRun) {
      watchAllCallbacks.add(callback);
      return dontRun ? void 0 : callback(proxy, true);
    }
    function setComputed(key, expr) {
      if (computedKeys.has(key)) unwatch(computedKeys.get(key));
      const callback = () => {
        state[key] = expr(proxy);
        if (pendingCallback === callback) pendingCallback = void 0;
        triggerCallbacks(key);
      };
      computedKeys.set(key, callback);
      watch(callback);
    }
    function triggerCallbacks(key) {
      if (batchDepth > 0) {
        for (const callback of callbackMap.get(key) || []) enqueueCallback(callback, state);
        for (const callback of watchAllCallbacks) enqueueCallback(callback, state);
      } else {
        for (const callback of callbackMap.get(key) || []) callback(state);
        for (const callback of watchAllCallbacks) callback(state);
      }
    }
    function forceUpdate() {
      for (const callbacks of callbackMap.values()) {
        for (const callback of callbacks) callback(state);
      }
      for (const callback of watchAllCallbacks) callback(state);
    }
    function assign(changes, clear2) {
      if (clear2) state = {};
      batch(() => {
        for (const [key, value] of Object.entries(changes)) {
          if (!(key in previous)) previous[key] = state[key];
          proxy[key] = value;
        }
      });
    }
    function getKey() {
      lastKey += 1;
      while (`_x${lastKey}` in state) lastKey += 1;
      return `_x${lastKey}`;
    }
    function clear() {
      state = {};
      callbackMap.clear();
      computedKeys.clear();
      lastKey = 0;
    }
    function copy() {
      return Object.assign({}, state);
    }
    let previous = {};
    function getChanges() {
      const changes = [{}, {}];
      for (const k of Object.keys(previous)) {
        if (previous[k] === state[k]) continue;
        changes[0][k] = previous[k];
        changes[1][k] = state[k];
      }
      previous = {};
      return changes;
    }
    function inherit(key) {
      if (!parentModel) return;
      parentModel.watch(() => proxy[key] = parentModel[key]);
    }
    const proxy = new Proxy(state, {
      get(_, key) {
        if (key === "watch") return watch;
        if (key === "watchKeys") return watchKeys;
        if (key === "unwatch") return unwatch;
        if (key === "watchAll") return watchAll;
        if (key === "setComputed") return setComputed;
        if (key === "forceUpdate") return forceUpdate;
        if (key === "getChanges") return getChanges;
        if (key === "assign") return assign;
        if (key === "getKey") return getKey;
        if (key === "clear") return clear;
        if (key === "copy") return copy;
        if (key === "_internal") return [state, callbackMap];
        if (pendingCallback) {
          if (!callbackMap.has(key)) callbackMap.set(key, /* @__PURE__ */ new Set());
          callbackMap.get(key).add(pendingCallback);
        }
        if (!(key in state)) inherit(key);
        return state[key];
      },
      set(_, key, value) {
        if (state[key] === value) return true;
        if (!(key in previous)) previous[key] = state[key];
        state[key] = value;
        if (computedKeys.has(key)) {
          unwatch(computedKeys.get(key));
          computedKeys.delete(key);
        }
        triggerCallbacks(key);
        return true;
      },
      deleteProperty(_, p) {
        delete state[p];
        callbackMap.delete(p);
        computedKeys.delete(p);
        return true;
      }
    });
    return proxy;
  }
  var pathLength = { A: 7, C: 6, H: 1, L: 2, M: 2, Q: 4, S: 4, T: 2, V: 1, Z: 0 };
  var pathSegment = /[astvzqmhlc]([^astvzqmhlc]*)/ig;
  var pathPoint = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;
  function pathCommands(path) {
    const commands = [];
    let lastPoint = void 0;
    for (const match of path.match(pathSegment) || []) {
      const uType = match[0].toUpperCase();
      if (uType === "Z") {
        commands.push({ type: "Z", points: [] });
        continue;
      }
      const args = (match.slice(1).match(pathPoint) || []).map((p) => +p);
      const isAbsolute = uType === match[0];
      for (const [i, p] of chunk(args, pathLength[uType]).entries()) {
        let points = [];
        let type = uType === "M" && i > 0 ? "L" : uType;
        let options = void 0;
        if (uType === "H") {
          type = "L";
          points = [new Point(p[0], isAbsolute ? (lastPoint == null ? void 0 : lastPoint.y) || 0 : 0)];
        } else if (uType === "V") {
          type = "L";
          points = [new Point(isAbsolute ? (lastPoint == null ? void 0 : lastPoint.x) || 0 : 0, p[0])];
        } else if (uType === "A") {
          type = "A";
          points = [new Point(p[5], p[6])];
          options = p.slice(0, 5);
        } else if ("MLCSQT".includes(uType)) {
          points = chunk(p, 2).map((q) => new Point(q[0], q[1]));
        }
        if (!isAbsolute && lastPoint) points = points.map((p2) => p2.translate(lastPoint));
        lastPoint = last(points);
        commands.push({ type, points, options });
      }
    }
    return commands;
  }
  function parsePath(d) {
    if (!d) return [];
    const commands = pathCommands(d);
    return commands.map((c) => last(c.points)).filter((p) => !!p);
  }
  var COMMON_STYLES = [
    "font-family",
    "font-size",
    "font-style",
    "font-weight",
    "letter-spacing",
    "text-decoration",
    "color",
    "display",
    "visibility",
    "alignment-baseline",
    "baseline-shift",
    "opacity",
    "text-anchor",
    "clip",
    "clip-path",
    "clip-rule",
    "mask",
    "filter",
    "transform",
    "transform-origin",
    "white-space",
    "line-height"
  ];
  var SVG_STYLES = [
    "fill",
    "fill-rule",
    "marker",
    "marker-start",
    "marker-mid",
    "marker-end",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-width",
    "text-rendering",
    "dominant-baseline",
    "transform-box",
    "paint-order"
  ];
  var HTML_STYLES = [
    "padding",
    "min-width",
    "max-width",
    "height",
    "border-width",
    "border-style",
    "border-color",
    "box-sizing",
    "background",
    "width",
    "grid-template-columns",
    "text-align"
  ];
  var REMOVE_ATTRIBUTES = ["class", "tabindex", "contenteditable"];
  var DONT_INHERIT = /* @__PURE__ */ new Set(["opacity", "transform-box", "transform-origin", "border-width", "border-style", "border-color"]);
  var STYLE_DEFAULTS = {
    "font-style": "normal",
    "font-weight": "400",
    "letter-spacing": "normal",
    "text-decoration": "none",
    "display": "block",
    "visibility": "visible",
    "alignment-baseline": "auto",
    "baseline-shift": "0px",
    "text-anchor": "start",
    "clip": "auto",
    "clip-path": "none",
    "clip-rule": "nonzero",
    "mask": "none",
    "opacity": "1",
    "filter": "none",
    "fill": "rgb(0, 0, 0)",
    "fill-rule": "nonzero",
    "marker": "none",
    "stroke": "none",
    "stroke-dasharray": "none",
    "stroke-dashoffset": "0px",
    "stroke-linecap": "butt",
    "stroke-linejoin": "miter",
    "stroke-width": "1px",
    "text-rendering": "auto",
    "transform": "none",
    "dominant-baseline": "auto",
    "transform-origin": "0px 0px",
    "transform-box": "view-box",
    "paint-order": "normal"
  };
  function cleanSVG(node) {
    var _a2, _b;
    if (node.getAttribute("hidden") || node.style.opacity === "0" || node.style.display === "none") {
      (_a2 = node.parentNode) == null ? void 0 : _a2.removeChild(node);
    } else {
      for (const child of Array.from(node.children)) cleanSVG(child);
      if (node.tagName === "g" && node.childElementCount === 0) {
        (_b = node.parentNode) == null ? void 0 : _b.removeChild(node);
      } else {
        for (const a of REMOVE_ATTRIBUTES) {
          if (node.hasAttribute(a)) node.removeAttribute(a);
        }
      }
    }
  }
  function inheritedStyle(node, prop) {
    let n = node.parentElement;
    while (n) {
      const value = n.style.getPropertyValue(prop);
      if (value) return value;
      n = n.parentElement;
    }
  }
  function copySVGStyles(source, copy, isHTML = false) {
    const style2 = window.getComputedStyle(source);
    copy.removeAttribute("style");
    const html = isHTML || source.tagName === "foreignObject";
    const properties = [...COMMON_STYLES, ...html ? HTML_STYLES : SVG_STYLES];
    for (const p of properties) {
      const value = style2.getPropertyValue(p);
      const inherited = inheritedStyle(copy, p);
      if (value === STYLE_DEFAULTS[p] && !inherited) continue;
      if (!DONT_INHERIT.has(p) && value === inherited) continue;
      copy.style.setProperty(p, value);
    }
    const sourceChildren = source.children;
    const copyChildren = copy.children;
    for (let i = 0; i < copyChildren.length; ++i) {
      copySVGStyles(sourceChildren[i], copyChildren[i], html);
    }
  }
  var BaseView = class {
    constructor(_el) {
      this._el = _el;
      this._data = {};
      this._events = {};
      this.type = "default";
      _el._view = this;
    }
    get id() {
      return this._el.id;
    }
    get data() {
      return this._el.dataset;
    }
    get tagName() {
      return this._el.tagName.toUpperCase();
    }
    equals(el) {
      return this._el === el._el;
    }
    /** Adds one or more space-separated classes to this element. */
    addClass(className) {
      for (const c of words(className)) this._el.classList.add(c);
    }
    removeClass(className) {
      for (const c of words(className)) this._el.classList.remove(c);
    }
    hasClass(className) {
      return this._el.classList.contains(className);
    }
    toggleClass(className) {
      return this._el.classList.toggle(className);
    }
    /** Toggles multiple space-separated class names based on a condition. */
    setClass(className, condition) {
      if (condition) {
        this.addClass(className);
      } else {
        this.removeClass(className);
      }
    }
    attr(attr) {
      return this._el.getAttribute(attr) || "";
    }
    hasAttr(attr) {
      return this._el.hasAttribute(attr);
    }
    setAttr(attr, value) {
      if (value === void 0) {
        this.removeAttr(attr);
      } else {
        this._el.setAttribute(attr, `${value}`);
      }
    }
    removeAttr(attr) {
      this._el.removeAttribute(attr);
    }
    get attributes() {
      return Array.from(this._el.attributes || []);
    }
    get html() {
      return this._el.innerHTML || "";
    }
    set html(h) {
      this._el.innerHTML = h;
    }
    get text() {
      return this._el.textContent || "";
    }
    set text(t) {
      this._el.textContent = t;
    }
    // Required because TS doesn't allow getters and setters with different types.
    set textStr(t) {
      this._el.textContent = `${t}`;
    }
    /** Blurs this DOM element. */
    blur() {
      this._el.blur();
    }
    /** Focuses this DOM element. */
    focus() {
      this._el.focus();
    }
    // ---------------------------------------------------------------------------
    // Templates and Model Binding
    getParentModel() {
      const parent = this.parent;
      return parent ? parent.model || parent.getParentModel() : void 0;
    }
    bindModel(model, recursive = true) {
      var _a2;
      if (this.model) return;
      this.model = model;
      if (this.hasAttr(":for")) return this.makeDynamicList(model);
      for (const { name, value } of this.attributes) {
        this.makeDynamicAttribute(name, value, model);
      }
      for (const $c of this.childNodes) {
        if ($c instanceof Text) {
          if ((_a2 = $c.textContent) == null ? void 0 : _a2.includes("${")) {
            const expr = compileString($c.textContent);
            model.watch(() => $c.textContent = expr(model) || "");
          }
        } else if (recursive) {
          $c.bindModel(model);
        }
      }
    }
    bindVariable(_model, _name) {
    }
    /** Conditionally hide this element from the DOM (using placeholder comments). */
    toggleDOM(show = true) {
      if (show === !!this._el.parentNode) return;
      if (!this.$placeholder) {
        this.$placeholder = $(document.createComment(""));
        this.insertBefore(this.$placeholder);
      }
      if (show) {
        this.$placeholder.insertBefore(this);
      } else {
        this.detach();
      }
    }
    makeDynamicAttribute(name, value, model) {
      if (name.startsWith("@")) {
        const event = name.slice(1);
        const expr = compile(value);
        this.on(event, (e) => expr(model, { $event: e }));
      } else if (name === ":show") {
        const expr = compile(value);
        model.watch(() => this.toggle(!!expr(model)));
      } else if (name === ":if") {
        const expr = compile(value);
        model.watch(() => this.toggleDOM(!!expr(model)));
      } else if (name === ":html") {
        const expr = compile(value);
        model.watch(() => this.html = expr(model) || "");
      } else if (name === ":draw") {
        const expr = compile(value);
        model.watch(() => this.draw(expr(model)));
      } else if (name === ":class") {
        const expr = compile(value);
        const initialClass = `${this.attr("class")} `;
        model.watch(() => this.setAttr("class", initialClass + expr(model)));
      } else if (name === ":bind") {
        this.bindVariable(model, value);
      } else if (name.startsWith(":")) {
        const expr = compile(value);
        const attr = name.slice(1);
        model.watch(() => this.setAttr(attr, expr(model)));
      } else if (value.includes("${")) {
        const expr = compileString(value, true);
        model.watch(() => this.setAttr(name, expr(model) || ""));
      }
      if (name.startsWith("@") || name.startsWith(":")) this.removeAttr(name);
    }
    makeDynamicList(model) {
      const [name, value] = this.attr(":for").split(" in ");
      this.removeAttr(":for");
      const expr = compile(value);
      const $placeholder = $(document.createComment(""));
      this.insertBefore($placeholder);
      this.detach();
      const $cached = [];
      let visible = 0;
      model.watch(() => {
        let array = expr(model);
        if (!Array.isArray(array)) array = [];
        for (let i = array.length; i < visible; ++i) $cached[i].detach();
        for (let i = visible; i < $cached.length; ++i) $placeholder.insertBefore($cached[i]);
        for (let i = $cached.length; i < array.length; ++i) {
          const $el = this.copy(true);
          $el.bindModel(observe({ [name]: void 0 }, model));
          $placeholder.insertBefore($el);
          $cached.push($el);
        }
        visible = array.length;
        for (let i = 0; i < visible; ++i) $cached[i].model[name] = array[i];
      });
    }
    // -------------------------------------------------------------------------
    // Scrolling and Dimensions
    get bounds() {
      return this._el.getBoundingClientRect();
    }
    get boundsRect() {
      const bounds = this.bounds;
      return new Rectangle(new Point(bounds.x, bounds.y), bounds.width, bounds.height);
    }
    contains(point) {
      return this.boundsRect.contains(point);
    }
    /** Checks if this element is currently visible in the viewport. */
    get isInViewport() {
      if (this.height === 0) return false;
      const bounds = this.bounds;
      return isBetween(bounds.top, -bounds.height, Browser.height);
    }
    get topLeftPosition() {
      const bounds = this.bounds;
      return new Point(bounds.left, bounds.top);
    }
    get boxCenter() {
      const box = this.bounds;
      return new Point(box.left + box.width / 2, box.top + box.height / 2);
    }
    get scrollWidth() {
      return this._el.scrollWidth;
    }
    get scrollHeight() {
      return this._el.scrollHeight;
    }
    get scrollTop() {
      return this._el.scrollTop;
    }
    set scrollTop(y) {
      this._el.scrollTop = y;
      this.trigger("scroll", { top: y, left: this.scrollLeft });
    }
    get scrollLeft() {
      return this._el.scrollLeft;
    }
    set scrollLeft(x) {
      this._el.scrollLeft = x;
      this.trigger("scroll", { top: this.scrollTop, left: x });
    }
    /** Scrolls the element to a specific position. */
    scrollTo(pos, time = 1e3, easing = "cubic") {
      if (pos < 0) pos = 0;
      const startPosition = this.scrollTop;
      const distance = pos - startPosition;
      if (this._data.scrollAnimation) this._data.scrollAnimation.cancel();
      this._data.scrollAnimation = animate((t) => {
        const y = startPosition + distance * ease(easing, t);
        this.scrollTop = y;
        this.trigger("scroll", { top: y });
      }, time);
    }
    /** Scrolls the element by a given distance. */
    scrollBy(distance, time = 1e3, easing = "cubic") {
      if (!distance) return;
      this.scrollTo(this.scrollTop + distance, time, easing);
    }
    // -------------------------------------------------------------------------
    // Styles
    /**
     * Retrieves or sets CSS properties on this element. Examples:
     *   * $el.css('color');  // returns 'red'
     *   * $el.css('color', 'blue');
     *   * $el.css({color: 'blue'});
     */
    css(props, value) {
      if (value === void 0) {
        if (typeof props === "string") {
          return window.getComputedStyle(this._el).getPropertyValue(props);
        } else {
          const keys = Object.keys(props);
          for (const p of keys) this._el.style.setProperty(p, `${props[p]}`);
        }
      } else if (typeof props === "string") {
        this._el.style.setProperty(props, `${value}`);
      }
    }
    /** Shortcut for getting the CSS transform style of an element. */
    get transform() {
      return this.css("transform").replace("none", "");
    }
    get transformMatrix() {
      const transform = this.transform;
      if (!transform) return [[1, 0, 0], [0, 1, 0]];
      const coords = transform.match(/matrix\(([0-9,.\s-]*)\)/);
      if (!coords || !coords[1]) return [[1, 0, 0], [0, 1, 0]];
      const matrix = coords[1].split(",");
      return [
        [+matrix[0], +matrix[2], +matrix[4]],
        [+matrix[1], +matrix[3], +matrix[5]]
      ];
    }
    /** Finds the x and y scale of this element. */
    get scale() {
      const matrix = this.transformMatrix;
      return [matrix[0][0], matrix[1][1]];
    }
    /** Sets the CSS transform on this element. */
    setTransform(posn, angle = 0, scale = 1) {
      let t = "";
      if (posn) t += `translate(${roundTo(posn.x, 0.1)}px,${roundTo(posn.y, 0.1)}px)`;
      if (angle) t += ` rotate(${angle}rad)`;
      if (scale) t += ` scale(${scale})`;
      this._el.style.transform = t;
    }
    /** Sets the CSS transform of this element to an x/y translation. */
    translate(x, y) {
      this.setTransform(new Point(x, y));
    }
    /**
     * Makes the element visible. Use the `data-display` attribute to determine
     * how this is done. Possible options are `visibility`, to use CSS visibility,
     * or CSS display values. The default is `display: block`.
     */
    show() {
      if (this.hasAttr("hidden")) this.removeAttr("hidden");
      if (this.data["display"] === "visibility") {
        this._el.style.visibility = "visible";
      } else {
        this._el.style.display = this.data.display || "block";
      }
    }
    /**
     * Makes the element invisible, using CSS visibility (if
     * `data-display="visibility"`), or `display: none`.
     */
    hide() {
      if (this.data["display"] === "visibility") {
        this._el.style.visibility = "hidden";
      } else {
        this._el.style.display = "none";
      }
    }
    /** Hides or shows the element based on a boolean value. */
    toggle(show) {
      if (show) {
        this.show();
      } else {
        this.hide();
      }
    }
    // -------------------------------------------------------------------------
    // DOM Manipulation
    /** Checks if an element matches a given CSS selector. */
    is(selector) {
      if (this._el.matches) return this._el.matches(selector);
      return Array.from(document.querySelectorAll(selector)).includes(this._el);
    }
    /** Finds the index of an elements, in the list of its siblings. */
    index() {
      let i = 0;
      let child = this._el;
      while ((child = child.previousSibling || void 0) !== void 0) ++i;
      return i;
    }
    /** Adds a new child element at the beginning of this one. */
    prepend(newChild) {
      const children = this._el.childNodes;
      if (children.length) {
        this._el.insertBefore(newChild._el, children[0]);
      } else {
        this._el.appendChild(newChild._el);
      }
    }
    /** Adds a new child element at the end of this one. */
    append(newChild) {
      this._el.appendChild(newChild instanceof Text ? newChild : newChild._el);
    }
    /** Adds a new element immediately before this one, as a sibling. */
    insertBefore(newChild) {
      this.parent._el.insertBefore(newChild._el, this._el);
    }
    /** Adds a new element immediately after this one, as a sibling. */
    insertAfter(newChild) {
      const next = this._el.nextSibling;
      if (next) {
        this.parent._el.insertBefore(newChild._el, next);
      } else {
        this.parent._el.appendChild(newChild._el);
      }
    }
    /** Returns this element's next sibling, or undefined. */
    get next() {
      return $(this._el.nextSibling);
    }
    /** Returns this element's previous sibling, or undefined. */
    get prev() {
      return $(this._el.previousSibling);
    }
    /** The first child element matching a given selector. */
    $(selector) {
      return $(selector, this);
    }
    /** All child elements matching a given selector. */
    $$(selector) {
      return $$(selector, this);
    }
    /** Returns this element's parent, or undefined. */
    get parent() {
      return $(this._el.parentElement || void 0);
    }
    /** Finds all parent elements that match a specific selector. */
    parents(selector) {
      const result = [];
      let parent = this.parent;
      while (parent) {
        if (!selector || parent.is(selector)) result.push(parent);
        parent = parent.parent;
      }
      return result;
    }
    /** Checks if this element has one of the given elements as parent. */
    hasParent(...$p) {
      const tests = $p.map((p) => p._el);
      let parent = this._el.parentNode;
      while (parent) {
        if (isOneOf(parent, ...tests)) return true;
        parent = parent.parentNode;
      }
      return false;
    }
    /** Returns an array of all children of this element. */
    get children() {
      return Array.from(this._el.children || [], (n) => $(n));
    }
    /** Returns an array of all child nodes, including text nodes. */
    get childNodes() {
      return Array.from(this._el.childNodes, (node) => {
        if (node instanceof Comment) return void 0;
        if (node instanceof Text) return node;
        return $(node);
      }).filter((x) => x);
    }
    /** Detach and re-insert to restart CSS animations. */
    restartAnimation() {
      const n = this.next;
      const p = this.parent;
      this.detach();
      if (n) {
        n.insertBefore(this);
      } else {
        p.append(this);
      }
    }
    /** Detaches an element from the DOM. */
    detach() {
      if (this._el && this._el.parentNode) {
        this._el.parentNode.removeChild(this._el);
      }
    }
    /** Removes this element. */
    remove() {
      this.detach();
    }
    /** Removes all children of this element. */
    removeChildren() {
      while (this._el.firstChild) this._el.removeChild(this._el.firstChild);
    }
    /** Creates a copy of this element, and optionally its children. */
    copy(recursive = true) {
      return $(this._el.cloneNode(recursive));
    }
    // -------------------------------------------------------------------------
    // Events
    /** Binds one ore more space-separated event listeners on this element. */
    on(events, callback, options) {
      for (const e of words(events)) {
        if (e in this._events) {
          if (!this._events[e].includes(callback)) this._events[e].push(callback);
        } else {
          this._events[e] = [callback];
        }
        bindEvent(this, e, callback, options);
      }
    }
    /** Binds a one-time event listener on this element. */
    one(events, callback, options) {
      const callbackWrap = (e) => {
        this.off(events, callbackWrap);
        callback(e);
      };
      this.on(events, callbackWrap, options);
    }
    /**
     * Removes an event listener on this element. If callback is undefined, it
     * removes all event listeners for this event.
     */
    off(events, callback) {
      for (const e of words(events)) {
        if (e in this._events) {
          this._events[e] = callback ? this._events[e].filter((fn) => fn !== callback) : [];
        }
        unbindEvent(this, e, callback);
      }
    }
    /** Triggers a specific event on this element. */
    trigger(events, args = {}) {
      for (const e of words(events)) {
        if (!this._events[e]) return;
        for (const fn of this._events[e]) fn.call(this, args);
      }
    }
    /**
     * Binds an event listener for a specific key that is pressed while this
     * element is in focus.
     */
    onKey(keys, callback, options) {
      keys = keys.replace("AllArrows", "ArrowUp ArrowDown ArrowLeft ArrowRight");
      const keyNames = new Set(words(keys));
      const event = (options == null ? void 0 : options.up) ? "keyup" : "keydown";
      const target = this._el === document.body ? document : this._el;
      target.addEventListener(event, (e) => {
        var _a2, _b;
        const key = keyCode(e);
        if ((options == null ? void 0 : options.meta) ? !e.ctrlKey && !e.metaKey : e.ctrlKey || e.metaKey) return;
        if (!key || !keyNames.has(key)) return;
        if (document.activeElement !== this._el && ((_b = (_a2 = document.activeElement) == null ? void 0 : _a2.shadowRoot) == null ? void 0 : _b.activeElement) !== this._el && Browser.formIsActive) return;
        callback(e, key);
      });
    }
    onAttr(name, callback) {
      const observer2 = new MutationObserver((mutations) => {
        for (const m of mutations) {
          if (m.type === "attributes" && m.attributeName === name) {
            callback(this.attr(name));
          }
        }
      });
      observer2.observe(this._el, { attributes: true });
      callback(this.attr(name), true);
    }
    /** Returns a promise that is resolved when an event is triggered. */
    onPromise(event, resolveImmediately = false) {
      if (resolveImmediately) return Promise.resolve();
      return new Promise((resolve) => this.one(event, () => resolve()));
    }
    // -------------------------------------------------------------------------
    // Animations
    /**
     * Animates multiple CSS properties of this element, with a given duration,
     * delay and ease function.
     */
    animate(rules, duration = 400, delay3 = 0, easing = "ease-in-out") {
      return transition(this, rules, duration, delay3, easing);
    }
    /**
     * Runs an enter animation on this element. Valid effect names are
     *   * 'fade', 'pop' and 'descend'
     *   * 'draw' and 'draw-reverse'
     *   * 'slide' and 'slide-down'
     *   * 'reveal', 'reveal-left' and 'reveal-right'
     */
    enter(effect = "fade", duration = 500, delay3 = 0) {
      return enter(this, effect, duration, delay3);
    }
    /**
     * Runs an exit animation on this element. See `.enter()` for options.
     */
    exit(effect = "fade", duration = 500, delay3 = 0, remove = false) {
      return exit(this, effect, duration, delay3, remove);
    }
    /**
     * Triggers a CSS animation in an element by adding a class and removing it
     * after the `animationEnd` event.
     */
    effect(className) {
      this.one("animationend", () => this.removeClass(`effects-${className}`));
      this.addClass(`effects-${className}`);
    }
  };
  var HTMLBaseView = class extends BaseView {
    get offsetTop() {
      return this._el.offsetTop;
    }
    get offsetLeft() {
      return this._el.offsetLeft;
    }
    get offsetParent() {
      return $(this._el.offsetParent || void 0);
    }
    /** Returns this element's width, including border and padding. */
    get width() {
      return this._el.offsetWidth;
    }
    /** Returns this element's height, including border and padding. */
    get height() {
      return this._el.offsetHeight;
    }
    /** Returns this element's width, excluding border and padding. */
    get innerWidth() {
      const left = parseFloat(this.css("padding-left"));
      const right = parseFloat(this.css("padding-right"));
      return this._el.clientWidth - left - right;
    }
    /** Returns this element's height, excluding border and padding. */
    get innerHeight() {
      const bottom = parseFloat(this.css("padding-bottom"));
      const top = parseFloat(this.css("padding-top"));
      return this._el.clientHeight - bottom - top;
    }
    /** Returns this element's width, including margins. */
    get outerWidth() {
      const left = parseFloat(this.css("margin-left"));
      const right = parseFloat(this.css("margin-right"));
      return this.width + left + right || 0;
    }
    /** Returns this element's height, including margins. */
    get outerHeight() {
      const bottom = parseFloat(this.css("margin-bottom"));
      const top = parseFloat(this.css("margin-top"));
      return this.height + bottom + top || 0;
    }
    /** @returns {number} */
    get positionTop() {
      let el = this._el;
      let offset = 0;
      while (el) {
        offset += el.offsetTop;
        el = el.offsetParent;
      }
      return offset;
    }
    /** @returns {number} */
    get positionLeft() {
      let el = this._el;
      let offset = 0;
      while (el) {
        offset += el.offsetLeft;
        el = el.offsetParent;
      }
      return offset;
    }
    /** Calculates the element offset relative to any other parent element. */
    offset(parent) {
      if (parent._el === this._el.offsetParent) {
        const top = this.offsetTop + parent._el.clientTop;
        const left = this.offsetLeft + parent._el.clientLeft;
        const bottom = top + this.height;
        const right = left + this.width;
        return { top, left, bottom, right };
      } else {
        const parentBox = parent._el.getBoundingClientRect();
        const box = this._el.getBoundingClientRect();
        return {
          top: box.top - parentBox.top,
          left: box.left - parentBox.left,
          bottom: box.bottom - parentBox.top,
          right: box.right - parentBox.left
        };
      }
    }
  };
  var SVGBaseView = class extends BaseView {
    constructor() {
      super(...arguments);
      this.type = "svg";
    }
    /** Returns the owner `<svg>` which this element is a child of. */
    get $ownerSVG() {
      return $(this._el.ownerSVGElement || void 0);
    }
    // See https://www.chromestatus.com/features/5724912467574784
    get width() {
      return this.bounds.width;
    }
    get height() {
      return this.bounds.height;
    }
    // SVG Elements don't have offset properties. We instead use the position of
    // the first non-SVG parent, plus the margin of the SVG owner, plus the SVG
    // position of the individual element. This doesn't work for absolutely
    // positioned SVG elements, and some other edge cases.
    get positionLeft() {
      const svgLeft = this._el.getBBox().x + this._el.getCTM().e;
      return this.$ownerSVG.positionLeft + svgLeft;
    }
    get positionTop() {
      const svgTop = this._el.getBBox().y + this._el.getCTM().f;
      return this.$ownerSVG.positionTop + svgTop;
    }
    get inverseTransformMatrix() {
      const m = this._el.getScreenCTM().inverse();
      const matrix = [[m.a, m.c, m.e], [m.b, m.d, m.f]];
      if (Browser.isFirefox) {
        const transform = this.transformMatrix;
        matrix[0][2] -= transform[0][2];
        matrix[1][2] -= transform[1][2];
      }
      return matrix;
    }
    setTransform(posn, angle = 0, scale = 1) {
      const t1 = posn ? `translate(${roundTo(posn.x, 0.1)} ${roundTo(posn.y, 0.1)})` : "";
      const t2 = nearlyEquals(angle, 0) ? "" : `rotate(${angle * 180 / Math.PI})`;
      const t3 = nearlyEquals(scale, 1) ? "" : `scale(${scale})`;
      this.setAttr("transform", [t1, t2, t3].join(" "));
    }
    /**
     * Finds the total stroke length of this element. Similar to the SVG
     * `getTotalLength()` function, but works for a wider variety of elements.
     */
    get strokeLength() {
      if (this._el instanceof SVGGeometryElement) {
        return this._el.getTotalLength();
      } else {
        const dim = this.bounds;
        return 2 * dim.height + 2 * dim.width;
      }
    }
    /**
     * Gets the coordinates of the point at a distance `d` along the length of the
     * stroke of this `<path>` element.
     */
    getPointAtLength(d) {
      if (this._el instanceof SVGGeometryElement) {
        const point = this._el.getPointAtLength(d);
        return new Point(point.x, point.y);
      } else {
        return new Point(0, 0);
      }
    }
    /**
     * Gets the coordinates of the point at a position `p` along the length of the
     * stroke of this `<path>` element, where `0 ≤ p ≤ 1`.
     */
    getPointAt(p) {
      return this.getPointAtLength(p * this.strokeLength);
    }
    /** Returns a list of all points along an SVG `<path>` element. */
    get points() {
      return parsePath(this.attr("d"));
    }
    /** Sets the list of points for an SVG `<path>` element.c*/
    set points(p) {
      const d = p.length ? `M${p.map((x) => `${x.x},${x.y}`).join("L")}` : "";
      this.setAttr("d", d);
    }
    /** Appends a new point to an SVG `<path>` element. */
    addPoint(p) {
      const d = `${this.attr("d")} L ${p.x},${p.y}`;
      this.setAttr("d", d);
    }
    /** Finds the center of an SVG `<circle>` element. */
    get center() {
      const x = +this.attr(this.tagName === "TEXT" ? "x" : "cx") || 0;
      const y = +this.attr(this.tagName === "TEXT" ? "y" : "cy") || 0;
      return new Point(x, y);
    }
    /** Sets the center of an SVG `<circle>` or `<text>` element. */
    setCenter(c) {
      this.setAttr(this.tagName === "TEXT" ? "x" : "cx", c.x);
      this.setAttr(this.tagName === "TEXT" ? "y" : "cy", c.y);
    }
    /** Sets the end points of an SVG `<line>` element. */
    setLine(p, q) {
      this.setAttr("x1", p.x);
      this.setAttr("y1", p.y);
      this.setAttr("x2", q.x);
      this.setAttr("y2", q.y);
    }
    /** Sets the bounds of an SVG `<rectangle>` element. */
    setRect(rect) {
      this.setAttr("x", rect.p.x);
      this.setAttr("y", rect.p.y);
      this.setAttr("width", rect.w);
      this.setAttr("height", rect.h);
    }
    /** Draws a generic geometry object onto an SVG `<path>` element. */
    draw(obj, options = {}) {
      if (!obj) return this.setAttr("d", "");
      const attributes = {};
      for (const p of ["mark", "arrows", "round"]) {
        if (this.hasAttr(p)) attributes[p] = this.attr(p);
      }
      if (this.hasClass("fill")) attributes.fill = "fill";
      if (this.hasAttr("size")) attributes.size = +this.attr("size") || void 0;
      this.setAttr("d", drawSVG(obj, Object.assign(options, attributes)));
    }
  };
  var SVGParentView2 = class extends SVGBaseView {
    /** Returns the viewport coordinates of this `<svg>` element. */
    get viewBox() {
      return this._el.viewBox.baseVal || { width: 0, height: 0 };
    }
    get $ownerSVG() {
      return this;
    }
    get positionLeft() {
      return parseInt(this.css("margin-left")) + this.parent.positionLeft;
    }
    get positionTop() {
      return parseInt(this.css("margin-top")) + this.parent.positionTop;
    }
    /** Returns the intrinsic width of this `<svg>` element. */
    get svgWidth() {
      return this.viewBox.width || this.width;
    }
    /** Returns the intrinsic height of this `<svg>` element. */
    get svgHeight() {
      return this.viewBox.height || this.height;
    }
    /** Create a new `<path>` element child and draw a geometry object onto it. */
    drawPath(obj, attributes = {}, options = {}) {
      const $el = $N("path", attributes, this);
      $el.draw(obj, options);
      return $el;
    }
    /** Converts an SVG element into a PNG, JPG or SVG data URI. */
    image(type, width, height, viewBox) {
      return __async2(this, null, function* () {
        const $copy = this.copy(true);
        copySVGStyles(this._el, $copy._el);
        if (type === "svg") cleanSVG($copy._el);
        if (!height) height = width || this.svgHeight;
        if (!width) width = this.svgWidth;
        $copy.setAttr("width", width);
        $copy.setAttr("height", height);
        $copy.setAttr("viewBox", viewBox || this.attr("viewBox") || `0 0 ${this.svgWidth} ${this.svgHeight}`);
        $copy.setAttr("xmlns", "http://www.w3.org/2000/svg");
        const $images = $copy.$$("image");
        if (type === "svg") {
          for (const $i of $images) $i.setAttr("href", new URL($i.attr("href"), location.href));
        } else {
          yield Promise.all($images.map(($i) => __async2(this, null, function* () {
            $i.setAttr("href", yield loadImageDataURI($i.attr("href")));
          })));
        }
        const serialised = new XMLSerializer().serializeToString($copy._el);
        const url = `data:image/svg+xml;utf8,${encodeURIComponent(serialised)}`;
        if (type === "svg") return url;
        const $canvas = $N("canvas", { width, height });
        if (type === "jpg") {
          $canvas.ctx.fillStyle = "white";
          $canvas.ctx.fillRect(0, 0, width, height);
        }
        const image = yield loadImage(url);
        $canvas.ctx.drawImage(image, 0, 0, width, height);
        return $canvas.image(type);
      });
    }
    downloadImage(fileName, width, height, viewBox) {
      const windowRef = Browser.isIOS ? window.open("", "_blank") : void 0;
      const isDarkTheme = Browser.theme.isDark;
      if (isDarkTheme) Browser.setTheme("light");
      const type = fileName.endsWith(".jpg") ? "jpg" : fileName.endsWith(".svg") ? "svg" : "png";
      const dataUri = this.image(type, width, height, viewBox);
      if (isDarkTheme) Browser.setTheme("dark");
      dataUri.then((href) => {
        if (windowRef) return windowRef.location.href = href;
        const $a = $N("a", { download: fileName, href, target: "_blank" });
        $a._el.dispatchEvent(new MouseEvent(
          "click",
          { view: window, bubbles: false, cancelable: true }
        ));
      });
    }
  };
  var WindowView = class extends HTMLBaseView {
    constructor() {
      super(...arguments);
      this.type = "window";
    }
    get width() {
      return window.innerWidth;
    }
    get height() {
      return window.innerHeight;
    }
    get innerWidth() {
      return window.innerWidth;
    }
    get innerHeight() {
      return window.innerHeight;
    }
    get outerWidth() {
      return window.outerWidth;
    }
    get outerHeight() {
      return window.outerHeight;
    }
    get scrollWidth() {
      return document.body.scrollWidth;
    }
    get scrollHeight() {
      return document.body.scrollHeight;
    }
    get scrollTop() {
      return window.pageYOffset;
    }
    set scrollTop(y) {
      document.body.scrollTop = document.documentElement.scrollTop = y;
      this.trigger("scroll", { top: y, left: this.scrollLeft });
    }
    get scrollLeft() {
      return window.pageXOffset;
    }
    set scrollLeft(x) {
      document.body.scrollLeft = document.documentElement.scrollLeft = x;
      this.trigger("scroll", { top: this.scrollTop, left: x });
    }
  };
  var FormView = class extends HTMLBaseView {
    constructor() {
      super(...arguments);
      this.type = "form";
    }
    get action() {
      return this._el.action;
    }
    /** Summarises the data for an HTML <form> element in an JSON Object. */
    get formData() {
      const data = {};
      for (const el of Array.from(this._el.elements)) {
        const id = el.name || el.id;
        if (id) data[id] = el.value;
      }
      return data;
    }
    get isValid() {
      return this._el.checkValidity();
    }
  };
  var InputView2 = class extends HTMLBaseView {
    constructor() {
      super(...arguments);
      this.type = "input";
    }
    get checked() {
      return this._el.checked || false;
    }
    set checked(value) {
      this._el.checked = value;
    }
    get value() {
      return this._el.value;
    }
    set value(v) {
      this._el.value = v;
    }
    bindVariable(model, name) {
      if (this._el.type === "checkbox") {
        const invert = name.startsWith("!");
        const inv = (t) => invert ? !t : t;
        if (invert) name = name.slice(1);
        if (model[name] !== void 0) {
          this.checked = inv(model[name]);
        } else if (this.hasAttr("checked")) {
          model[name] = inv(this.checked);
        }
        this.on("change", () => model[name] = inv(this.checked));
        model.watch(() => this.checked = inv(model[name]));
        return;
      }
      if (this._el.type === "number") {
        const min = this.hasAttr("min") ? +this.attr("min") : -Infinity;
        const max = this.hasAttr("max") ? +this.attr("max") : Infinity;
        this.change((v) => {
          if (v) model[name] = clamp(+v, min, max);
        });
      } else {
        this.change((v) => model[name] = v);
      }
      if (model[name] !== void 0) {
        this.value = model[name];
      } else if (this.value) {
        model[name] = this.value;
      }
      this.on("blur", () => this.value = model[name]);
      model.watch(() => {
        if (document.activeElement !== this._el) this.value = model[name];
      });
    }
    /** Polyfill for type and inputmode attributes. */
    setInputPattern(value) {
      if (isNaN(+value)) return;
      const digitsOnly = value.match(/^[0-9]+$/);
      this.setAttr("inputmode", digitsOnly ? "numeric" : "decimal");
      if (digitsOnly) this.setAttr("pattern", "[0-9]*");
    }
    /** Binds a change event listener. */
    change(callback) {
      let value = this.value || "";
      this.on("focus", () => value = this.value);
      this.on("change keyup input paste", () => {
        if (this.value === value) return;
        value = this.value;
        callback(value);
      });
    }
    validate(callback) {
      this.change((value) => this.setValidity(callback(value)));
    }
    setValidity(str) {
      this._el.setCustomValidity(str);
    }
    get isValid() {
      return this._el.checkValidity();
    }
  };
  var CanvasView2 = class extends HTMLBaseView {
    constructor() {
      super(...arguments);
      this.type = "canvas";
    }
    /** Returns the drawing context for a `<canvas>` element. */
    getContext(c = "2d", options = {}) {
      return this._el.getContext(c, options);
    }
    /** Converts a Canvas element into a PNG or JPEG data URI. */
    image(type = "png") {
      return this._el.toDataURL(type === "png" ? "image/png" : "image/jpeg");
    }
    /** Returns the intrinsic pixel width of this `<canvas>` element. */
    get canvasWidth() {
      return this._el.width;
    }
    /** Returns the intrinsic pixel height of this `<canvas>` element. */
    get canvasHeight() {
      return this._el.height;
    }
    /** Cached reference to the 2D context for this `<canvas>` element. */
    get ctx() {
      if (!this._ctx) this._ctx = this.getContext();
      return this._ctx;
    }
    /** Draws a generic geometry object ont a `<canvas>` element. */
    draw(obj, options = {}) {
      this.ctx.save();
      drawCanvas(this.ctx, obj, options);
      this.ctx.restore();
    }
    /** Clears this canvas. */
    clear() {
      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
    }
    /** Clears this canvas. */
    fill(color) {
      this.ctx.save();
      this.ctx.fillStyle = color;
      this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);
      this.ctx.restore();
    }
    /** Erase a specific circle of the canvas. */
    clearCircle(center, radius) {
      this.ctx.save();
      this.ctx.globalCompositeOperation = "destination-out";
      this.ctx.beginPath();
      this.ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI, false);
      this.ctx.fill();
      this.ctx.restore();
    }
    downloadImage(fileName) {
      const href = this.image(fileName.endsWith(".jpg") ? "jpg" : "png");
      const $a = $N("a", { download: fileName, href, target: "_blank" });
      $a._el.dispatchEvent(new MouseEvent(
        "click",
        { view: window, bubbles: false, cancelable: true }
      ));
    }
  };
  var MediaView = class extends HTMLBaseView {
    /** Starts playback on a media element. */
    play() {
      return this._el.play() || Promise.resolve();
    }
    /** Pauses playback on a media element. */
    pause() {
      return this._el.pause();
    }
  };
  var SVG_TAGS = [
    "path",
    "rect",
    "circle",
    "ellipse",
    "polygon",
    "polyline",
    "g",
    "defs",
    "marker",
    "line",
    "text",
    "tspan",
    "pattern",
    "mask",
    "svg",
    "foreignObject",
    "image",
    "use",
    "clipPath",
    "linearGradient",
    "radialGradient"
  ];
  function $(query, context) {
    if (!query) return void 0;
    const c = context ? context._el : document.documentElement;
    const el = typeof query === "string" ? c.querySelector(query) : query;
    if (!el) return void 0;
    if (el._view) return el._view;
    const tagName = (el.tagName || "").toLowerCase();
    if (tagName === "svg") {
      return new SVGParentView2(el);
    } else if (tagName === "canvas") {
      return new CanvasView2(el);
    } else if (tagName === "form") {
      return new FormView(el);
    } else if (tagName === "input" || tagName === "select" || tagName === "textarea") {
      return new InputView2(el);
    } else if (tagName === "video" || tagName === "audio") {
      return new MediaView(el);
    } else if (SVG_TAGS.includes(tagName)) {
      return new SVGBaseView(el);
    } else {
      return new HTMLBaseView(el);
    }
  }
  function $$(selector, context) {
    const c = context ? context._el : document.documentElement;
    const els = selector ? c.querySelectorAll(selector) : [];
    return Array.from(els, (el) => $(el));
  }
  function $N(tag, attributes = {}, parent) {
    const el = !SVG_TAGS.includes(tag) ? document.createElement(tag) : document.createElementNS("http://www.w3.org/2000/svg", tag);
    for (const [key, value] of Object.entries(attributes)) {
      if (value === void 0) continue;
      if (key === "id") {
        el.id = value;
      } else if (key === "html") {
        el.innerHTML = value;
      } else if (key === "text") {
        el.textContent = value;
      } else if (key === "path") {
        el.setAttribute("d", drawSVG(value));
      } else {
        el.setAttribute(key, value);
      }
    }
    const $el = $(el);
    if (parent) parent.append($el);
    return $el;
  }
  var $body = new WindowView(document.body);
  var $html = new WindowView(document.documentElement);
  function toQueryString(data) {
    const pairs = [];
    for (let key of Object.keys(data)) {
      let value = data[key];
      key = encodeURIComponent(key);
      if (value == void 0) {
        pairs.push(key);
        continue;
      }
      value = Array.isArray(value) ? value.join(",") : `${value}`;
      value = value.replace(/(\r)?\n/g, "\r\n");
      value = encodeURIComponent(value);
      value = value.replace(/%20/g, "+");
      pairs.push(`${key}=${value}`);
    }
    return pairs.join("&");
  }
  function post(url, data) {
    return __async2(this, null, function* () {
      const isForm = data instanceof FormData;
      const options = {
        method: "POST",
        body: isForm ? data : data ? toQueryString(data) : void 0,
        headers: { "X-CSRF-Token": window.csrfToken || "" }
      };
      if (!isForm) options.headers["Content-Type"] = "application/x-www-form-urlencoded";
      const ext = url.includes("?") ? "&xhr=1" : "?xhr=1";
      const response = yield fetch(url + ext, options);
      if (!response.ok) throw new Error(`Fetch error ${response.status}: ${url}`);
      return response.text();
    });
  }
  function loadScript(src) {
    return new Promise((resolve, reject) => {
      const el = document.createElement("script");
      el.src = src;
      el.onerror = reject;
      el.onload = resolve;
      document.head.appendChild(el);
    });
  }
  function loadImage(url, credentials = false) {
    return new Promise((resolve) => {
      const img = new Image();
      if (!credentials) img.crossOrigin = "Anonymous";
      img.onload = () => resolve(img);
      img.src = url;
    });
  }
  var loadImageDataURI = cache((url) => __async2(void 0, null, function* () {
    const img = yield loadImage(url);
    const $canvas = $N("canvas", { width: img.width, height: img.height });
    $canvas.ctx.drawImage(img, 0, 0, img.width, img.height);
    return $canvas.image("png");
  }));
  var POST_DATA = /* @__PURE__ */ new Map();
  function savePostData(url, data) {
    if (POST_DATA.has(url)) {
      deepExtend(POST_DATA.get(url), data, (a, b) => unique(a.concat(b)));
    } else {
      POST_DATA.set(url, data);
    }
  }
  function sendPostData() {
    if (!window.navigator.onLine) return;
    for (const [url, data] of POST_DATA) {
      POST_DATA.delete(url);
      post(url, { data: JSON.stringify(data) }).catch((error) => {
        console.error("Failed to send POST request:", error);
        savePostData(url, data);
      });
    }
  }
  var doDeferredPost = throttle(sendPostData, 5e3);
  window.addEventListener("online", doDeferredPost);
  window.onbeforeunload = sendPostData;
  var colours = loop(["#cd0e66", "#0f82f2", "#22ab24", "#fd8c00"]);
  var LOADING_STYLE = "position: fixed; top: 0; left: 0; width: 100%; height: 4px; background: #0f82f2; pointer-events: none; z-index: 9999; will-change: transform;";
  function getViewParams(url, view) {
    const match = view.regex.exec(url);
    if (match) {
      match.shift();
      const params = {};
      for (const [i, p] of view.params.entries()) params[p] = match[i];
      return params;
    } else {
      return void 0;
    }
  }
  function getTemplate(view, params, url) {
    return __async2(this, null, function* () {
      if (view.template) {
        if (typeof view.template === "string") return view.template;
        return view.template(params);
      }
      const str = yield fetch(url + (url.indexOf("?") >= 0 ? "&xhr=1" : "?xhr=1"));
      return str.text();
    });
  }
  var isReady2 = document.readyState === "complete";
  window.addEventListener("load", () => setTimeout(() => isReady2 = true));
  if ("scrollRestoration" in window.history) {
    window.history.scrollRestoration = "manual";
  }
  var Router = class extends EventTarget {
    constructor() {
      super(...arguments);
      this.$viewport = $body;
      this.views = [];
      this.active = { path: "", hash: "" };
      this.preloaded = false;
      this.transition = false;
      this.noLoad = false;
      this.initialise = () => void 0;
    }
    setup(options = {}) {
      if (options.$viewport) this.$viewport = options.$viewport;
      if (options.initialise) this.initialise = options.initialise;
      if (options.preloaded) this.preloaded = options.preloaded;
      if (options.transition) this.transition = options.transition;
      if (options.noLoad) this.noLoad = options.noLoad;
      if (options.click) {
        $body.on("click", (e) => this.onLinkClick(e));
      }
      if (options.history) {
        window.addEventListener("popstate", (e) => __async2(this, null, function* () {
          var _a2;
          if (!isReady2 || !((_a2 = e.state) == null ? void 0 : _a2.path)) return;
          const success = yield this.load(e.state.path, e.state.hash);
          if (!success) window.history.pushState(this.active, "", this.active.path + this.active.hash);
        }));
      }
    }
    view(url, { enter: enter2, exit: exit2, template } = {}) {
      const params = (url.match(/:\w+/g) || []).map((x) => x.substr(1));
      const regexStr = `${url.replace(/:\w+/g, "([\\w-]+)").replace("/", "\\/")}\\/?`;
      const searchStr = url.includes("?") ? "" : "(\\?.*)?";
      const regex = new RegExp(`^${regexStr}${searchStr}$`, "i");
      const thisView = { regex, params, enter: enter2, exit: exit2, template };
      this.views.push(thisView);
      const current = window.location.pathname + window.location.search;
      const viewParams = getViewParams(current, thisView);
      if (!viewParams) return;
      this.active = { path: current, hash: window.location.hash };
      window.history.replaceState(this.active, "", this.active.path + this.active.hash);
      Browser.ready(() => {
        setTimeout(() => {
          if (this.preloaded) {
            this.initialise(this.$viewport, viewParams);
            if (thisView.enter) thisView.enter(this.$viewport, viewParams);
          } else {
            this.loadView(thisView, viewParams);
          }
        });
      });
    }
    paths(...urls) {
      for (const url of urls) this.view(url);
    }
    getView(path) {
      for (const view of this.views) {
        const params = getViewParams(path, view);
        if (params) return { view, params };
      }
    }
    // ---------------------------------------------------------------------------
    // Loading and Rendering
    load(path, hash) {
      return __async2(this, null, function* () {
        if (path === this.active.path && hash !== this.active.hash) {
          this.trigger("hashChange", hash.slice(1));
          this.trigger("change", path + hash);
          this.active = { path, hash };
          return true;
        }
        const go = this.getView(path);
        if (!go) return false;
        if (this.beforeChange && !(yield this.beforeChange())) return false;
        this.active = { path, hash };
        this.trigger("change", path + hash);
        if (window.ga) window.ga("send", "pageview", path + hash);
        if (this.noLoad) {
          if (go.view.enter) go.view.enter(this.$viewport, go.params);
        } else {
          this.loadView(go.view, go.params);
        }
        return true;
      });
    }
    loadView(_0) {
      return __async2(this, arguments, function* (view, params = {}) {
        this.showLoadingBar();
        const path = this.active.path;
        const template = yield getTemplate(view, params, path);
        if (this.active.path !== path) return;
        yield this.$viewport.animate({ opacity: 0 }, 200).promise;
        this.$viewport.removeChildren();
        $body.scrollTop = 0;
        this.$viewport.html = template;
        Browser.resize();
        replaceSvgImports();
        this.$viewport.animate({ "opacity": 1 }, 200);
        this.hideLoadingBar();
        const $title = this.$viewport.$("title");
        if ($title) document.title = $title.text;
        this.initialise(this.$viewport, params);
        if (view.enter) view.enter(this.$viewport, params);
        this.trigger("afterChange", { $viewport: this.$viewport });
      });
    }
    // ---------------------------------------------------------------------------
    // Navigation Functions
    onLinkClick(e) {
      if (e.metaKey || e.ctrlKey || e.shiftKey) return;
      if (e.defaultPrevented) return;
      let el = e.target;
      while (el && el.nodeName !== "A") el = el.parentNode;
      if (!el || el.nodeName !== "A") return;
      const anchor = el;
      if (anchor.target) return;
      if (anchor.origin !== window.location.origin) return;
      if (anchor.hasAttribute("download") || anchor.getAttribute("rel") === "external") return;
      const link = anchor.getAttribute("href");
      if (link && link.indexOf("mailto:") > -1) return;
      if (this.getView(anchor.pathname + anchor.search)) {
        e.preventDefault();
        this.goTo(anchor.pathname + anchor.search, anchor.hash);
      }
    }
    goTo(path, hash = "") {
      return __async2(this, null, function* () {
        const current = this.active.path + this.active.hash;
        const success = yield this.load(path, hash);
        if (success && current !== this.active.path + this.active.hash) {
          window.history.pushState(this.active, "", path + hash);
        }
      });
    }
    replace(path, hash = "") {
      this.active = { path, hash };
      window.history.replaceState(this.active, "", path + hash);
    }
    back() {
      window.history.back();
    }
    forward() {
      window.history.forward();
    }
    showLoadingBar() {
      if (!this.$loadingBar) this.$loadingBar = $N("div", { style: LOADING_STYLE }, $body);
      this.$loadingBar.css({ transform: "translateX(-100%)", opacity: 1 });
      this.$loadingBar.show();
      this.animation = animate((p) => {
        this.$loadingBar.css("transform", `translateX(-${10 + 90 * Math.exp(-4 * p)}%)`);
      }, 3e3);
    }
    hideLoadingBar() {
      return __async2(this, null, function* () {
        var _a2, _b, _c;
        (_a2 = this.animation) == null ? void 0 : _a2.cancel();
        yield (_b = this.$loadingBar) == null ? void 0 : _b.animate({ transform: "none", opacity: 0 }).promise;
        (_c = this.$loadingBar) == null ? void 0 : _c.hide();
      });
    }
  };
  var RouterInstance = new Router();
  function applyTemplate(el, template) {
    const children = Array.from(el.childNodes);
    el.innerHTML = template;
    const slots = {};
    for (const s of Array.from(el.querySelectorAll("slot"))) {
      slots[s.getAttribute("name") || ""] = s;
    }
    for (const child of children) {
      const name = child.getAttribute ? child.getAttribute("slot") || "" : "";
      const slot = slots[name] || slots[""];
      if (slot) slot.parentNode.insertBefore(child, slot);
    }
    for (const slot of Object.values(slots)) slot.parentNode.removeChild(slot);
  }
  function* customElementChildren(el) {
    for (const c of Array.from(el.children)) {
      if (c.tagName.includes("-")) {
        yield c;
      } else {
        yield* __yieldStar(__yieldStar2(customElementChildren(c)));
      }
    }
  }
  var customElementOptions = /* @__PURE__ */ new Map();
  var CustomHTMLElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.wasConnected = false;
      this.isReady = false;
    }
    connectedCallback() {
      return __async2(this, null, function* () {
        if (this.wasConnected) {
          this._view.trigger("connected");
          return;
        }
        this.wasConnected = true;
        this.isReady = false;
        this._view.created();
        const options = customElementOptions.get(this._view.tagName) || {};
        if (options.template) applyTemplate(this, options.template);
        const promises = [...customElementChildren(this)].filter((c) => !c.isReady).map((c) => new Promise((res) => c.addEventListener("ready", res)));
        setTimeout(() => {
          if (!this.isReady) console.error(`Children of custom element ${this.tagName} not ready after 1s.`);
        }, 1e3);
        yield Promise.all(promises);
        this._view.ready();
        this.dispatchEvent(new CustomEvent("ready"));
        this.isReady = true;
      });
    }
    disconnectedCallback() {
      this._view.trigger("disconnected");
    }
  };
  var CustomElementView = class extends HTMLBaseView {
    created() {
    }
    ready() {
    }
  };
  var CUSTOM_ELEMENTS = /* @__PURE__ */ new Map();
  function register(tagName, options = {}) {
    return function(ElementClass) {
      if (window.customElements.get(tagName)) {
        console.warn(`Trying to declare the custom element ${tagName} twice!`);
        return;
      }
      class Constructor extends CustomHTMLElement {
        constructor() {
          super();
          this._view = new ElementClass(this);
        }
      }
      CUSTOM_ELEMENTS.set(tagName, ElementClass);
      customElementOptions.set(tagName.toUpperCase(), options);
      window.customElements.define(tagName, Constructor);
    };
  }

  // content/codes/components/beep.ts
  var Context = window.AudioContext || window.webkitAudioContext;
  var ctx = Context ? new Context() : void 0;
  function beep(duration = 0) {
    if (!ctx) return { stop: () => void 0 };
    const osc = ctx.createOscillator();
    const gain = ctx.createGain();
    osc.connect(gain);
    gain.connect(ctx.destination);
    gain.gain.setValueAtTime(0, ctx.currentTime);
    gain.gain.linearRampToValueAtTime(1, ctx.currentTime + 0.05);
    osc.type = "sine";
    osc.start(0);
    const stop = () => {
      gain.gain.linearRampToValueAtTime(1e-3, ctx.currentTime + 0.05);
      osc.stop(ctx.currentTime + 0.05);
    };
    if (duration) setTimeout(stop, duration - 0.1);
    return { stop };
  }

  // content/codes/components/utilities.ts
  var LOWER_CASE = "abcdefghijklmnopqrstuvwxyz";
  var UPPER_CASE = LOWER_CASE.toUpperCase();
  var MORSE_CODE = {
    a: "\u2022\u2212",
    b: "\u2212\u2022\u2022\u2022",
    c: "\u2212\u2022\u2212\u2022",
    d: "\u2212\u2022\u2022",
    e: "\u2022",
    f: "\u2022\u2022\u2212\u2022",
    g: "\u2212\u2212\u2022",
    h: "\u2022\u2022\u2022\u2022",
    i: "\u2022\u2022",
    j: "\u2022\u2212\u2212\u2212",
    k: "\u2212\u2022\u2212",
    l: "\u2022\u2212\u2022\u2022",
    m: "\u2212\u2212",
    n: "\u2212\u2022",
    o: "\u2212\u2212\u2212",
    p: "\u2022\u2212\u2212\u2022",
    q: "\u2212\u2212\u2022\u2212",
    r: "\u2022\u2212\u2022",
    s: "\u2022\u2022\u2022",
    t: "\u2212",
    u: "\u2022\u2022\u2212",
    v: "\u2022\u2022\u2022\u2212",
    w: "\u2022\u2212\u2212",
    x: "\u2212\u2022\u2022\u2212",
    y: "\u2212\u2022\u2212\u2212",
    z: "\u2212\u2212\u2022\u2022",
    1: "\u2022\u2212\u2212\u2212\u2212",
    2: "\u2022\u2022\u2212\u2212\u2212",
    3: "\u2022\u2022\u2022\u2212\u2212",
    4: "\u2022\u2022\u2022\u2022\u2212",
    5: "\u2022\u2022\u2022\u2022\u2022",
    6: "\u2212\u2022\u2022\u2022\u2022",
    7: "\u2212\u2212\u2022\u2022\u2022",
    8: "\u2212\u2212\u2212\u2022\u2022",
    9: "\u2212\u2212\u2212\u2212\u2022",
    0: "\u2212\u2212\u2212\u2212\u2212"
  };

  // content/codes/components/code-box.ts
  function getCaretOffset($el) {
    const selection = window.getSelection();
    if (!selection || !selection.rangeCount) return -1;
    const range = selection.getRangeAt(0);
    const tmpRange = new Range();
    tmpRange.setStartBefore($el._el);
    tmpRange.setEnd(range.startContainer, range.startOffset);
    return tmpRange.toString().length;
  }
  function setCaretOffset($el, offset) {
    const selection = window.getSelection();
    if (!selection || !selection.rangeCount) return -1;
    const range = selection.getRangeAt(0);
    range.setStart($el._el, offset);
    range.setEnd($el._el, offset);
  }
  var CodeBox = class extends CustomElementView {
    constructor() {
      super(...arguments);
      this.plainText = "";
      this.$inputChars = [];
      this.$outputChars = [];
    }
    ready() {
      this.$input = this.$(".input");
      this.$output = this.$(".output");
      let changes = 0;
      this.setPlainText(this.$input.text.trim());
      this.$input.on("change keyup input paste", () => {
        this.setPlainText(this.$input.text.trim());
        changes += 1;
        this.trigger("type", { text: this.plainText, changes });
      });
    }
    setPlainText(str, force = false) {
      if (!force && str === this.plainText) return;
      this.plainText = str;
      const caret = getCaretOffset(this.$input);
      this.$input.removeChildren();
      this.$output.removeChildren();
      let i = 0;
      for (const char of str.split("")) {
        if (!char.match(/[a-zA-Z0-9]/)) {
          this.$input._el.appendChild(document.createTextNode(char));
        } else {
          if (this.$inputChars.length <= i) this.createSpan();
          this.$input.append(this.$inputChars[i]);
          this.$output.append(this.$outputChars[i]);
          if (force || this.$inputChars[i].text !== char) {
            this.$inputChars[i].text = char;
            this.$outputChars[i].removeChildren();
            if (this.encodeFn) this.encodeFn(char, this.$outputChars[i]);
          }
          i += 1;
        }
      }
      if (caret > 0) setCaretOffset(this.$input, caret);
    }
    encode(fn) {
      this.encodeFn = fn;
      this.setPlainText(this.plainText, true);
    }
    createSpan() {
      const $spanA = $N("span", { class: "letter" }, this.$input);
      const $spanB = $N("span", { class: "letter" }, this.$output);
      this.$inputChars.push($spanA);
      this.$outputChars.push($spanB);
      hover($spanA, {
        enter: () => $spanB.addClass("hover"),
        exit: () => $spanB.removeClass("hover")
      });
      hover($spanB, {
        enter: () => $spanA.addClass("hover"),
        exit: () => $spanA.removeClass("hover")
      });
    }
  };
  CodeBox = __decorateClass([
    register("x-code-box")
  ], CodeBox);

  // content/codes/components/barcode.ts
  var DIGITS = {
    0: "0001101",
    1: "0011001",
    2: "0010011",
    3: "0111101",
    4: "0100011",
    5: "0110001",
    6: "0101111",
    7: "0111011",
    8: "0110111",
    9: "0001011"
  };
  var GUARDS = {
    outside: "101",
    middle: "01010"
  };
  var OUTER_BUFFER = 20;
  var TEXT_PADDING = 5;
  var HEIGHT_LONG = 200;
  var HEIGHT_SHORT = 180;
  var BAR_WIDTH = 4;
  var SVG_WIDTH = 2 * OUTER_BUFFER + BAR_WIDTH * (2 * GUARDS["outside"].length + GUARDS["middle"].length + 12 * DIGITS[0].length);
  var SVG_HEIGHT = 2 * OUTER_BUFFER + HEIGHT_LONG;
  var BAR_START_INDICES = [];
  var Barcode = class extends CustomElementView {
    constructor() {
      super(...arguments);
      this.errorDigit = 0;
    }
    ready() {
      this.initDrawLines();
      this.targets = this.attr("targets") === "";
      this.$svg = $N("svg", { viewBox: `0 0 ${SVG_WIDTH} ${SVG_HEIGHT}` }, this);
      const value = this.attr("value");
      this.computeParityDigit(value);
      this.draw(value);
      this.writeNumbers(value);
      this.onAttr("value", (d) => {
        this.computeParityDigit(d);
        this.draw(d);
        this.writeNumbers(d);
      });
    }
    // FIXME: when new barcode generated, hover/target stops working
    generateNewCode() {
      let newValue = "";
      for (let i = 0; i < 11; i++) {
        const digit = Math.floor(Math.random() * 10);
        newValue = newValue.concat("" + digit);
      }
      this.computeParityDigit(newValue);
      this.draw(newValue);
      this.writeNumbers(newValue);
    }
    initDrawLines() {
      const widths = [];
      widths.push(0);
      widths.push(GUARDS["outside"].length);
      for (let i = 1; i <= 6; i++) widths.push(DIGITS[0].length);
      widths.push(GUARDS["middle"].length);
      for (let i = 7; i <= 12; i++) widths.push(DIGITS[0].length);
      let widthSum = 0;
      widths.forEach((w) => {
        widthSum += w;
        BAR_START_INDICES.push(widthSum);
      });
    }
    draw(value) {
      this.$svg.removeChildren();
      this.drawRect(0, GUARDS["outside"], ["outside"], true);
      this.drawRect(1, DIGITS[value[0]], [
        "left",
        `d0`,
        `l${value[0]}`,
        "odds"
      ], true);
      for (let i = 1; i <= 5; ++i) {
        this.drawRect(1 + i, DIGITS[value[i]], [
          "left",
          `d${i}`,
          `l${value[i]}`,
          (i + 1) % 2 === 0 ? "evens" : "odds"
        ], false);
      }
      this.drawRect(7, GUARDS["middle"], ["middle"], true);
      for (let i = 6; i <= 10; ++i) {
        this.drawRect(2 + i, DIGITS[value[i]], [
          "right",
          `d${i}`,
          `r${value[i]}`,
          (i + 1) % 2 === 0 ? "evens" : "odds"
        ], false, true);
      }
      this.drawRect(13, DIGITS[this.errorDigit], [
        "right",
        `d11`,
        `r${this.errorDigit}`
      ], true, true);
      this.drawRect(14, GUARDS["outside"], ["outside"], true);
    }
    /**
     * Draw a section of a barcode. Corresponds to a guard or a digit.
     *
     * @param drawLineIndex the "index". It's like the place, but includes the guards.
     * @param sequence the sequence of digits, as a string of 0s and 1s
     * @param names the class names
     * @param long whether to draw long bars
     * @param invert black/white vs white/black
     */
    drawRect(drawLineIndex, sequence, names, long = false, invert = false) {
      const $group = $N("g", {
        class: names.join(" "),
        target: this.targets ? names.join(" ") : void 0
      }, this.$svg);
      const height = long ? HEIGHT_LONG : HEIGHT_SHORT;
      let color;
      for (let i = 0; i < sequence.length; ++i) {
        if (sequence[i] === (!invert ? "0" : "1")) {
          color = "white";
        } else {
          color = "black";
        }
        $N("rect", {
          class: color,
          width: BAR_WIDTH,
          height,
          x: OUTER_BUFFER + (BAR_START_INDICES[drawLineIndex] + i) * BAR_WIDTH,
          y: OUTER_BUFFER
        }, $group);
      }
    }
    writeNumbers(value) {
      const $group = $N("g", { class: "text" }, this.$svg);
      for (let i = 0; i < value.length; i++) {
        this.writeNumber(i, value[i], $group);
      }
      this.writeNumber(11, "" + this.errorDigit, $group);
    }
    writeNumber(place, value, $group) {
      const MIN = 0;
      const MAX = 400;
      const LEFT = {
        START: 70,
        END: 170
      };
      const RIGHT = {
        START: 230,
        END: 330
      };
      const y = 200 + OUTER_BUFFER;
      let x;
      if (place === 0) {
        x = MIN + TEXT_PADDING;
      } else if (place === 11) {
        x = MAX + TEXT_PADDING;
      } else if (place >= 1 && place <= 5) {
        x = LEFT.START + (LEFT.END - LEFT.START) * (place - 1) / (5 - 1);
      } else if (place >= 6 && place <= 10) {
        x = RIGHT.START + (RIGHT.END - RIGHT.START) * (place - 6) / (10 - 6);
      }
      const side = place < 6 ? "l" : "r";
      const evenOdd = place === 11 ? "" : (place + 1) % 2 === 0 ? "evens" : "odds";
      $N("text", {
        x,
        y,
        "font-size": 24,
        text: value,
        class: `d${place}` + (this.targets ? " step-target" : ""),
        "data-to": this.targets ? `d${place}` : void 0,
        target: this.targets ? `d${place} ${side}${value} ${evenOdd}` : void 0
      }, $group);
    }
    // TODO: could move this to a separate utility file
    computeParityDigit(value) {
      if (value.length === 12) {
        this.errorDigit = parseInt(value.charAt(11));
        return;
      }
      let odds = 0;
      let evens = 0;
      for (let i = 1; i < 12; i++) {
        const digitVal = parseInt(value.charAt(i - 1));
        if (i % 2 == 0) evens += digitVal;
        else odds += digitVal;
      }
      const sum2 = 3 * odds + evens;
      this.errorDigit = 10 - sum2 % 10;
      if (this.errorDigit === 10) this.errorDigit = 0;
    }
  };
  Barcode = __decorateClass([
    register("x-barcode")
  ], Barcode);

  // content/codes/components/enigma.pug
  var enigma_default = '<div class="enigma"><div class="rotors"><div class="rotorctl"><span class="rotorup" @pointerdown="rotate(2,true)">&#8593;</span><span class="rotorup" @pointerdown="rotate(1,true)">&#8593;</span><span class="rotorup" @pointerdown="rotate(0,true)">&#8593;</span></div><div class="rotorshow"><span class="rotorsetting">${rotorPosn[2]}</span><span class="rotorsetting">${rotorPosn[1]}</span><span class="rotorsetting">${rotorPosn[0]}</span></div><div class="rotorctl"><span class="rotordn" @pointerdown="rotate(2)">&#8595;</span><span class="rotordn" @pointerdown="rotate(1)">&#8595;</span><span class="rotordn" @pointerdown="rotate(0)">&#8595;</span></div></div><div class="lightboard"><div class="row"><div class="key">Q</div><div class="key">W</div><div class="key">E</div><div class="key">R</div><div class="key">T</div><div class="key">Z</div><div class="key">U</div><div class="key">I</div><div class="key">O</div></div><div class="row"><div class="key">A</div><div class="key">S</div><div class="key">D</div><div class="key">F</div><div class="key">G</div><div class="key">H</div><div class="key">J</div><div class="key">K</div></div><div class="row"><div class="key">P</div><div class="key">Y</div><div class="key">X</div><div class="key">C</div><div class="key">V</div><div class="key">B</div><div class="key">N</div><div class="key">M</div><div class="key">L</div></div></div><div class="keyboard"><div class="row"><div class="key">Q</div><div class="key">W</div><div class="key">E</div><div class="key">R</div><div class="key">T</div><div class="key">Z</div><div class="key">U</div><div class="key">I</div><div class="key">O</div></div><div class="row"><div class="key">A</div><div class="key">S</div><div class="key">D</div><div class="key">F</div><div class="key">G</div><div class="key">H</div><div class="key">J</div><div class="key">K</div></div><div class="row"><div class="key">P</div><div class="key">Y</div><div class="key">X</div><div class="key">C</div><div class="key">V</div><div class="key">B</div><div class="key">N</div><div class="key">M</div><div class="key">L</div></div></div><div class="plugboard"><svg width="450" height="150"><circle class="plug" data-key="Q" cx="25" cy="25" r="8"></circle><circle class="plug" data-key="W" cx="75" cy="25" r="8"></circle><circle class="plug" data-key="E" cx="125" cy="25" r="8"></circle><circle class="plug" data-key="R" cx="175" cy="25" r="8"></circle><circle class="plug" data-key="T" cx="225" cy="25" r="8"></circle><circle class="plug" data-key="Z" cx="275" cy="25" r="8"></circle><circle class="plug" data-key="U" cx="325" cy="25" r="8"></circle><circle class="plug" data-key="I" cx="375" cy="25" r="8"></circle><circle class="plug" data-key="O" cx="425" cy="25" r="8"></circle><circle class="plug" data-key="A" cx="50" cy="75" r="8"></circle><circle class="plug" data-key="S" cx="100" cy="75" r="8"></circle><circle class="plug" data-key="D" cx="150" cy="75" r="8"></circle><circle class="plug" data-key="F" cx="200" cy="75" r="8"></circle><circle class="plug" data-key="G" cx="250" cy="75" r="8"></circle><circle class="plug" data-key="H" cx="300" cy="75" r="8"></circle><circle class="plug" data-key="J" cx="350" cy="75" r="8"></circle><circle class="plug" data-key="K" cx="400" cy="75" r="8"></circle><circle class="plug" data-key="P" cx="25" cy="125" r="8"></circle><circle class="plug" data-key="Y" cx="75" cy="125" r="8"></circle><circle class="plug" data-key="X" cx="125" cy="125" r="8"></circle><circle class="plug" data-key="C" cx="175" cy="125" r="8"></circle><circle class="plug" data-key="V" cx="225" cy="125" r="8"></circle><circle class="plug" data-key="B" cx="275" cy="125" r="8"></circle><circle class="plug" data-key="N" cx="325" cy="125" r="8"></circle><circle class="plug" data-key="M" cx="375" cy="125" r="8"></circle><circle class="plug" data-key="L" cx="425" cy="125" r="8"></circle><g class="cables"></g></svg></div></div><div class="notes"><div class="input">${chunk(input)}</div><div class="output">${chunk(output)}</div></div><button class="btn" @click="reset()">Reset</button>';

  // content/codes/components/enigma.ts
  var LETTER_COUNT = UPPER_CASE.length;
  var ROTORS = [
    { map: "EKMFLGDQVZNTOWYHXUSPAIBRCJ", notch: "Q" },
    // rotor I
    { map: "AJDKSIRUXBLHWTMCQGZNPYFVOE", notch: "E" },
    // rotor II
    { map: "BDFHJLCPRTXVZNYEIWGAKMUSQO", notch: "V" },
    // rotor III
    { map: "ESOVPZJAYQUIRHXLNFTGKDCMWB", notch: "J" },
    // rotor IV
    { map: "VZBRGITYUPSDNHLXAWMJQOFECK", notch: "Z" }
    // rotor V
  ];
  var Plugboard = class {
    constructor() {
      this.count = 0;
      this.connections = {};
    }
    connect(letter1, letter2) {
      if (letter1 === letter2 || this.count == 10) return;
      this.count++;
      this.connections[letter1] = letter2;
      this.connections[letter2] = letter1;
    }
    disconnect(letter1) {
      const conn = this.connections[letter1];
      if (!conn) return;
      delete this.connections[conn];
      delete this.connections[letter1];
      this.count--;
    }
    encode(ch) {
      const conn = this.connections[ch];
      return conn ? conn : ch;
    }
  };
  var Reflector = class {
    constructor(reflections = "YRUHQSLDPXNGOKMIEBFZCWVJAT") {
      this.connections = {};
      for (let i = 0; i < LETTER_COUNT; i++) {
        this.connections[UPPER_CASE[i]] = reflections[i];
      }
    }
    reflect(letter) {
      return this.connections[letter];
    }
  };
  var Rotor = class {
    constructor(wiringMap, notch, initialPosition, ringSetting) {
      this.notch = notch;
      this.stepsToTurnover = 26;
      // Countdown until we need to turn the adjacent rotor
      this.offset = 0;
      this.forward = {};
      this.reverse = {};
      for (let i = 0; i < LETTER_COUNT; i++) {
        this.forward[UPPER_CASE[i]] = wiringMap[i];
        this.reverse[wiringMap[i]] = UPPER_CASE[i];
      }
      this.stepsToTurnover = UPPER_CASE.indexOf(notch) + 1;
      const initialSteps = UPPER_CASE.indexOf(initialPosition);
      for (let i = 0; i < initialSteps; i++) this.step();
      for (let i = 0; i < 26 - UPPER_CASE.indexOf(ringSetting); i++) {
        this.updateWires();
        this.offset = ++this.offset % LETTER_COUNT;
      }
    }
    encodeForward(letter) {
      const encodedIndex = UPPER_CASE.indexOf(this.forward[letter]);
      const offsetIndex = mod(encodedIndex - this.offset, LETTER_COUNT);
      return UPPER_CASE[offsetIndex];
    }
    encodeReverse(letter) {
      const letterIndex = UPPER_CASE.indexOf(letter);
      const offsetIndex = (letterIndex + this.offset) % LETTER_COUNT;
      return this.reverse[UPPER_CASE[offsetIndex]];
    }
    step() {
      this.updateWires();
      this.offset = (this.offset + 1) % LETTER_COUNT;
      this.stepsToTurnover -= 1;
      if (this.stepsToTurnover === 0) {
        this.stepsToTurnover = 26;
        return true;
      }
      return false;
    }
    updateWires() {
      const advancedmap = {};
      for (let i = 0; i < LETTER_COUNT; i++) {
        const letter = UPPER_CASE[i];
        const nextLetter = UPPER_CASE[(i + 1) % LETTER_COUNT];
        advancedmap[letter] = this.forward[nextLetter];
        this.reverse[advancedmap[letter]] = letter;
      }
      this.forward = advancedmap;
    }
    rotate(up) {
      if (up) {
        this.step();
      } else {
        for (let i = 0; i < 25; ++i) this.step();
      }
    }
  };
  var Machine = class {
    constructor(rotorChoice = [2, 1, 0], rotorPositions = ["A", "A", "A"]) {
      this.rotors = [];
      this.usePlugboard = true;
      for (let i = 0; i < rotorChoice.length; ++i) {
        this.rotors.push(new Rotor(
          ROTORS[rotorChoice[i]].map,
          ROTORS[rotorChoice[i]].notch,
          rotorPositions[i],
          "A"
        ));
      }
      this.reflector = new Reflector();
      this.plugboard = new Plugboard();
    }
    encodeLetters(UPPER_CASE2) {
      return [...UPPER_CASE2].map((l) => this.encode(l)).join("");
    }
    encode(letter) {
      if (this.rotors[0].stepsToTurnover === 26 && this.rotors[1].stepsToTurnover === 1) {
        if (this.rotors[1].step()) this.rotors[2].step();
      }
      if (this.rotors[0].step() && this.rotors[1].step()) {
        this.rotors[2].step();
      }
      const path = [letter.toUpperCase()];
      path.push(this.plugboard.encode(last(path)));
      for (const r of this.rotors) path.push(r.encodeForward(last(path)));
      path.push(this.reflector.reflect(last(path)));
      for (const r of this.rotors.slice(0).reverse()) path.push(r.encodeReverse(last(path)));
      path.push(this.plugboard.encode(last(path)));
      return path;
    }
    get rotorPositions() {
      return this.rotors.map((r) => UPPER_CASE[r.offset]);
    }
  };
  var Enigma = class extends CustomElementView {
    constructor() {
      super(...arguments);
      this.machine = new Machine();
    }
    ready() {
      const state = observe({
        input: "",
        output: "",
        chunk: (s) => chunk(s.split(""), 5).map((c) => c.join("")).join(" \u2013 "),
        rotorPosn: this.machine.rotorPositions,
        rotate: (i, up = false) => {
          this.machine.rotors[i].rotate(up);
          state.rotorPosn = this.machine.rotorPositions;
        },
        reset: () => {
          state.input = state.output = "";
        }
      });
      this.bindModel(state);
      const $lights = {};
      for (const $l of this.$$(".lightboard .key")) $lights[$l.text] = $l;
      let $activeLight;
      for (const $key of this.$$(".keyboard .key")) {
        const char = $key.text;
        slide($key, {
          down: () => {
            const encoded = last(this.machine.encode(char));
            $activeLight == null ? void 0 : $activeLight.removeClass("glowing");
            $lights[encoded].addClass("glowing");
            $activeLight = $lights[encoded];
            state.input += char;
            state.output += encoded;
            state.rotorPosn = this.machine.rotorPositions;
          },
          up: () => {
            setTimeout(() => $activeLight == null ? void 0 : $activeLight.removeClass("glowing"), 250);
          }
        });
      }
      const $plugboard = this.$(".plugboard svg");
      const $cables = $plugboard.$(".cables");
      const plugs = $plugboard.$$(".plug").map(($plug) => ({
        $el: $plug,
        key: $plug.data.key,
        center: $plug.center
      }));
      let startPlug;
      slide($plugboard, {
        start: (posn) => {
          const plug = plugs.find((p) => Point.distance(p.center, posn) < 25);
          if (!plug) return;
          if (plug.$cable) {
            const letter = this.machine.plugboard.encode(plug.key);
            plug.$cable = void 0;
            plug.$el.removeClass("active");
            startPlug = plugs.find((p) => p.key === letter);
            this.machine.plugboard.disconnect(plug.key);
          } else {
            if (this.machine.plugboard.count >= 10) return;
            plug.$cable = $N("path", {}, $cables);
            plug.$el.addClass("active");
            startPlug = plug;
          }
        },
        move: (posn) => {
          if (!startPlug) return;
          drawCable(startPlug.$cable, startPlug.center, posn);
        },
        end: (posn) => {
          if (!startPlug) return;
          const endPlug = plugs.find((p) => Point.distance(p.center, posn) < 25);
          if (endPlug && !endPlug.$cable && endPlug !== startPlug) {
            drawCable(startPlug.$cable, startPlug.center, endPlug.center);
            this.machine.plugboard.connect(startPlug.key, endPlug.key);
            endPlug.$cable = startPlug.$cable;
            endPlug.$el.addClass("active");
          } else {
            startPlug.$cable.remove();
            startPlug.$cable = void 0;
            startPlug.$el.removeClass("active");
          }
          startPlug = void 0;
        }
      });
    }
  };
  Enigma = __decorateClass([
    register("x-enigma", { template: enigma_default })
  ], Enigma);
  function drawCable($path, start, end) {
    const diff = start.subtract(end);
    const dr = diff.length * 1.5;
    if (start.x > end.x) [start, end] = [end, start];
    $path.setAttr("d", `M${end.x},${end.y}A${dr},${1.3 * dr} 0 0 1 ${start.x},${start.y}`);
  }

  // content/codes/components/enigma-rotors.pug
  var enigma_rotors_default = '<svg width="540" height="420" viewBox="0 0 540 420"><defs><linearGradient id="grad-refl" x1="0" y1="0" x2="0" y2="1"><stop offset="0" style="stop-color: #fec680"></stop><stop offset="1" style="stop-color: #cb9e66"></stop></linearGradient><linearGradient id="grad-rotor" x1="0" y1="0" x2="0" y2="1"><stop offset="0" style="stop-color: #9d9ba2"></stop><stop offset="1" style="stop-color: #7d7c82"></stop></linearGradient><linearGradient id="grad-plug" x1="0" y1="0" x2="0" y2="1"><stop offset="0" style="stop-color: #87c1f9"></stop><stop offset="1" style="stop-color: #6c9ac7"></stop></linearGradient><linearGradient id="grad-in" x1="0" y1="0" x2="1" y2="0"><stop offset="0" style="stop-color: #0f82f2"></stop><stop offset="1" style="stop-color: #cd0e66"></stop></linearGradient><linearGradient id="grad-out" x1="0" y1="0" x2="1" y2="0"><stop offset="0" style="stop-color: #fd8c00"></stop><stop offset="1" style="stop-color: #cd0e66"></stop></linearGradient></defs><text class="label" x="115" y="12">Plugboard</text><rect class="layer" x="80" y="20" width="70" height="395" rx="6" fill="url(#grad-plug)"></rect><text class="label" x="215" y="12">Rotor 1</text><rect class="layer" x="180" y="20" width="70" height="395" rx="6" fill="url(#grad-rotor)"></rect><text class="label" x="315" y="12">Rotor 2</text><rect class="layer" x="280" y="20" width="70" height="395" rx="6" fill="url(#grad-rotor)"></rect><text class="label" x="415" y="12">Rotor 3</text><rect class="layer" x="380" y="20" width="70" height="395" rx="6" fill="url(#grad-rotor)"></rect><text class="label" x="505" y="12">Reflector</text><rect class="layer" x="480" y="20" width="50" height="395" rx="6" fill="url(#grad-refl)"></rect><g class="connections"></g><g class="overlay"></g><g class="keyboard"><circle data-key="A" cx="20" cy="30" r="10"></circle><text x="20" y="31">A</text><circle data-key="B" cx="40" cy="45" r="10"></circle><text x="40" y="46">B</text><circle data-key="C" cx="20" cy="60" r="10"></circle><text x="20" y="61">C</text><circle data-key="D" cx="40" cy="75" r="10"></circle><text x="40" y="76">D</text><circle data-key="E" cx="20" cy="90" r="10"></circle><text x="20" y="91">E</text><circle data-key="F" cx="40" cy="105" r="10"></circle><text x="40" y="106">F</text><circle data-key="G" cx="20" cy="120" r="10"></circle><text x="20" y="121">G</text><circle data-key="H" cx="40" cy="135" r="10"></circle><text x="40" y="136">H</text><circle data-key="I" cx="20" cy="150" r="10"></circle><text x="20" y="151">I</text><circle data-key="J" cx="40" cy="165" r="10"></circle><text x="40" y="166">J</text><circle data-key="K" cx="20" cy="180" r="10"></circle><text x="20" y="181">K</text><circle data-key="L" cx="40" cy="195" r="10"></circle><text x="40" y="196">L</text><circle data-key="M" cx="20" cy="210" r="10"></circle><text x="20" y="211">M</text><circle data-key="N" cx="40" cy="225" r="10"></circle><text x="40" y="226">N</text><circle data-key="O" cx="20" cy="240" r="10"></circle><text x="20" y="241">O</text><circle data-key="P" cx="40" cy="255" r="10"></circle><text x="40" y="256">P</text><circle data-key="Q" cx="20" cy="270" r="10"></circle><text x="20" y="271">Q</text><circle data-key="R" cx="40" cy="285" r="10"></circle><text x="40" y="286">R</text><circle data-key="S" cx="20" cy="300" r="10"></circle><text x="20" y="301">S</text><circle data-key="T" cx="40" cy="315" r="10"></circle><text x="40" y="316">T</text><circle data-key="U" cx="20" cy="330" r="10"></circle><text x="20" y="331">U</text><circle data-key="V" cx="40" cy="345" r="10"></circle><text x="40" y="346">V</text><circle data-key="W" cx="20" cy="360" r="10"></circle><text x="20" y="361">W</text><circle data-key="X" cx="40" cy="375" r="10"></circle><text x="40" y="376">X</text><circle data-key="Y" cx="20" cy="390" r="10"></circle><text x="20" y="391">Y</text><circle data-key="Z" cx="40" cy="405" r="10"></circle><text x="40" y="406">Z</text></g></svg>';

  // content/codes/components/enigma-rotors.ts
  var LETTER_COUNT2 = UPPER_CASE.length;
  var LAYERS_X = [80, 180, 280, 380];
  var LAYER_WIDTH = 70;
  var GAP_WIDTH = 30;
  var REFLECTOR_X = last(LAYERS_X) + LAYER_WIDTH + GAP_WIDTH;
  function setAttr($el, name, value, animated) {
    const current = +$el.attr(name);
    if (value === current) return;
    if (!animated) return $el.setAttr(name, value);
    animate((p) => $el.setAttr(name, lerp(current, value, p)), 300);
  }
  var EnigmaRotors = class extends CustomElementView {
    constructor() {
      super(...arguments);
      this.machine = new Machine();
      this.$lines = [[], [], [], []];
      this.isAnimating = false;
    }
    ready() {
      this.$keys = this.$$(".keyboard circle");
      for (const $k of this.$keys) $k.on("click", () => this.runAnimation($k.data.key));
      this.yOffsets = this.$keys.map(($k) => $k.center.y);
      const $connections = this.$(".connections");
      this.$overlay = this.$(".overlay");
      for (let i = 0; i < LETTER_COUNT2; ++i) {
        const x = this.$keys[i].center.x;
        const y = this.yOffsets[i];
        $N("line", { x1: x, y1: y, x2: LAYERS_X[0], y2: y }, $connections);
        for (const [l, x2] of LAYERS_X.entries()) {
          this.$lines[l].push($N("line", { x1: x2, y1: y, x2: x2 + LAYER_WIDTH, y2: y }, $connections));
          $N("line", { x1: x2 + LAYER_WIDTH, y1: y, x2: x2 + LAYER_WIDTH + GAP_WIDTH, y2: y }, $connections);
        }
      }
      this.updateRotorPaths(false);
      for (let i = 0; i < LETTER_COUNT2; ++i) {
        const encoded = UPPER_CASE.indexOf(this.machine.reflector.reflect(UPPER_CASE[i]));
        if (encoded < i) continue;
        const $path = $N("path", {}, $connections);
        $path.points = this.drawReflectorPath(i, encoded);
      }
    }
    drawReflectorPath(start, end) {
      const i = Math.min(start, end);
      const y1 = this.yOffsets[start];
      const y2 = this.yOffsets[end];
      const x1 = REFLECTOR_X;
      const x2 = REFLECTOR_X + 8 + Math.min(i, LETTER_COUNT2 - i) * 3;
      return [{ x: x1, y: y1 }, { x: x2, y: y1 }, { x: x2, y: y2 }, { x: x1, y: y2 }];
    }
    updateRotorPaths(animated = true) {
      for (let i = 0; i < LETTER_COUNT2; ++i) {
        const letter = UPPER_CASE[i];
        const encoded = UPPER_CASE.indexOf(this.machine.plugboard.encode(letter));
        setAttr(this.$lines[0][i], "y2", this.yOffsets[encoded], animated);
        for (const r of [0, 1, 2]) {
          const offset = this.machine.rotors[r].offset;
          const encoded2 = UPPER_CASE.indexOf(this.machine.rotors[r].encodeForward(letter));
          const $line = this.$lines[r + 1][(i + offset) % LETTER_COUNT2];
          setAttr($line, "y1", this.yOffsets[i], animated);
          setAttr($line, "y2", this.yOffsets[encoded2], animated);
        }
      }
    }
    runAnimation(letter) {
      return __async(this, null, function* () {
        if (this.isAnimating) return;
        this.isAnimating = true;
        this.$overlay.removeChildren();
        for (const $k of this.$keys) $k.removeClass("in out");
        const encodePath = this.machine.encode(letter);
        const indices = encodePath.map((c) => UPPER_CASE.indexOf(c));
        const $startKey = this.$keys[indices[0]];
        const $endKey = this.$keys[last(indices)];
        const points1 = [$startKey.center];
        for (const i of [0, 1, 2, 3]) {
          points1.push({ x: LAYERS_X[i], y: this.yOffsets[indices[i]] });
          points1.push({ x: LAYERS_X[i] + LAYER_WIDTH, y: this.yOffsets[indices[i + 1]] });
        }
        points1.push({ x: REFLECTOR_X, y: this.yOffsets[indices[4]] });
        const points2 = this.drawReflectorPath(indices[4], indices[5]);
        const points3 = [$endKey.center];
        for (const i of [1, 2, 3]) {
          points3.unshift({ x: LAYERS_X[i], y: this.yOffsets[indices[9 - i]] });
          points3.unshift({ x: LAYERS_X[i] + LAYER_WIDTH, y: this.yOffsets[indices[8 - i]] });
        }
        points3.unshift({ x: REFLECTOR_X, y: this.yOffsets[indices[5]] });
        $startKey.addClass("in");
        this.updateRotorPaths();
        const $path1 = $N("path", { stroke: "url(#grad-in)" }, this.$overlay);
        $path1.points = points1;
        yield $path1.enter("draw", $path1.strokeLength * 4, 300).promise;
        const $path2 = $N("path", { stroke: "#cd0e66" }, this.$overlay);
        $path2.points = points2;
        yield $path2.enter("draw", $path2.strokeLength * 4).promise;
        const $path3 = $N("path", { stroke: "url(#grad-out)" }, this.$overlay);
        $path3.points = points3;
        yield $path3.enter("draw", $path3.strokeLength * 4).promise;
        $endKey.addClass("out");
        this.isAnimating = false;
      });
    }
  };
  EnigmaRotors = __decorateClass([
    register("x-enigma-rotors", { template: enigma_rotors_default })
  ], EnigmaRotors);

  // content/codes/components/morse.ts
  var Morse = class extends CustomElementView {
    constructor() {
      super(...arguments);
      this.value = [];
    }
    ready() {
      this.setAttr("tabindex", "0");
      this.on("click", () => this.play());
      this.onAttr("char", (char) => this.redraw(char));
    }
    redraw(char) {
      this.removeChildren();
      const morse = MORSE_CODE[char.toLowerCase()] || "";
      this.value = morse.split("").map((s) => s === "\u2022" ? 0 : 1);
      for (const i of this.value) $N("span", { class: i ? "dash" : "dot" }, this);
    }
    play() {
      let delay2 = 0;
      for (const v of this.value) {
        const length = v ? 500 : 200;
        setTimeout(() => beep(length), delay2);
        delay2 += length + 100;
      }
    }
  };
  Morse = __decorateClass([
    register("x-morse")
  ], Morse);

  // content/codes/components/hamming.ts
  var WIDTH = 20;
  var BUFFER = 5;
  var HEIGHT = 40;
  var RX = 6;
  var YVAL = 20;
  var _DigitOutline = class {
    /**
     * Constructor
     * @param $parent the SVGParentView
     * @param fullIndex index of the digit when fully encoded
     * @param yIndex y-position index
     */
    constructor($parent, fullIndex, yIndex) {
      this.fullIndex = fullIndex;
      this.yIndex = yIndex;
      const gAttr = {
        fullIndex
      };
      const rectOutline = {
        stroke: "gray",
        "stroke-width": 2,
        fill: "none",
        width: WIDTH,
        height: HEIGHT,
        rx: RX
      };
      this.g = $N("g", gAttr, $parent);
      this.rect = $N("rect", rectOutline, this.g);
    }
    moveToPosition() {
      this.g.animate({ transform: [
        "none",
        `translate(${this.getIndexLocation(this.fullIndex)}px, ${this.getYIndexLocation(this.yIndex)}px)`
      ] });
    }
    getYIndexLocation(yIndex) {
      return YVAL + yIndex * (HEIGHT + BUFFER);
    }
    /**
       * Returns location to draw the digit at index
       * @param index
       */
    getIndexLocation(index) {
      return BUFFER + index * (WIDTH + BUFFER);
    }
  };
  var HammingDigit = class {
    /**
       *
       * @param $parent SVG parent
       * @param parity is this a parity bit or a data bit?
       * @param fullIndex index in the fully encoded bit string
       * @param dataIndex index as a data bit
       * @param value digit value
       */
    constructor($parent, parity, fullIndex, dataIndex, value) {
      this.RED = "#CC0E66";
      this.GREEN = "#22AC24";
      this.errors = 0;
      this.parity = parity;
      this.fullIndex = fullIndex;
      this.dataIndex = dataIndex;
      this.value = value;
      const color = parity ? this.RED : this.GREEN;
      const targets = [1, 2, 4, 8].filter((p) => this.isParityMatch(p)).map((p) => `pg${p}`).join(" ");
      const gAttr = {
        target: parity ? `parity p${fullIndex} pg${fullIndex}` : "data " + targets,
        fullIndex,
        dataIndex,
        mask: "url(#hole)"
      };
      const rectDefault = {
        stroke: color,
        "stroke-width": 0,
        fill: color,
        width: WIDTH,
        height: HEIGHT,
        rx: RX
      };
      const textAttr = {
        x: WIDTH / 4,
        y: 5 * HEIGHT / 8,
        width: WIDTH,
        height: HEIGHT,
        "font-size": 20,
        "font-weight": "normal",
        fill: "#FFFFFF",
        text: value > -1 ? value : "_"
      };
      this.g = $N("g", gAttr, $parent);
      this.rect = $N("rect", rectDefault, this.g);
      this.text = $N("text", textAttr, this.g);
      this.g.addClass("bold");
    }
    show() {
      this.g.show();
    }
    hide() {
      this.g.hide();
    }
    snapToDataPosition() {
      this.g.animate({ transform: [
        "none",
        `translate(${this.getIndexLocation(this.parity ? this.fullIndex : this.dataIndex)}px, ${YVAL}px)`
      ] }, 0);
    }
    snapToFullPosition() {
      this.g.animate({ transform: [
        "none",
        `translate(${this.getIndexLocation(this.fullIndex)}px, ${YVAL}px)`
      ] }, 0);
    }
    /**
       * Make room for parity bits
       */
    makeRoom() {
      this.slideBetweenIndices(this.dataIndex, this.fullIndex);
    }
    /**
       * Strip out the parity bits
       */
    squeezeRoom() {
      this.slideBetweenIndices(this.fullIndex, this.dataIndex);
    }
    /**
       * Slide Digit between two indices
       *
       * @param begin index to start animation at
       * @param end index to end animation at
       */
    slideBetweenIndices(begin, end) {
      this.g.animate({ transform: [
        `translate(${this.getIndexLocation(begin)}px, ${YVAL}px)`,
        `translate(${this.getIndexLocation(end)}px, ${YVAL}px)`
      ] });
    }
    bold() {
      this.g.removeClass("dim");
      this.g.addClass("bold");
    }
    dim() {
      this.g.removeClass("bold");
      this.g.addClass("dim");
    }
    updateValue(value) {
      this.text.text = value > -1 ? value.toString() : "_";
    }
    /**
       * 1 --> 1, 3, 5, 7...
       * 2 --> 2, 3, 6, 7...
       * 4 --> 4, 5, 6, 7...
       * @param parity 1, 2, 4, 8... etc
       */
    isParityMatch(parity) {
      const d = this.fullIndex;
      return d % (parity * 2) >= parity;
    }
    /**
       * Returns location to draw the digit at index
       * @param index
       */
    getIndexLocation(index) {
      return BUFFER + index * (WIDTH + BUFFER);
    }
    /**
       * When decoding, we can use this to mark errors.
       */
    markError() {
      if (this.errors === 0) {
        const errorAttr = {
          x: 0,
          y: 0,
          width: WIDTH,
          height: HEIGHT,
          "font-size": 10,
          "font-weight": "normal",
          fill: this.RED,
          text: "x"
        };
        this.errorDiv = $N("text", errorAttr, this.g);
      } else {
        this.errorDiv.text = this.errorDiv.text + "x";
      }
      this.errors++;
    }
    unmarkError() {
      if (this.errors === 0) return;
      this.errorDiv.text = this.errorDiv.text.substring(0, --this.errors);
    }
    hideErrorMarks() {
      if (this.errorDiv) this.errorDiv.hide();
    }
    reverseBit() {
      this.text.text = `${[1, 0][parseInt(this.text.text)]}`;
    }
  };
  var HammingCode = class extends CustomElementView {
    constructor() {
      super(...arguments);
      this.digits = [];
    }
    // 'encode' or 'decode'
    ready() {
      this.$svg = $N("svg", { viewBox: `0 0 400 ${HEIGHT * 2}` }, this);
      this.value = this.attr("value");
      this.direction = this.attr("direction");
      if (!["encode", "decode"].includes(this.direction)) {
        throw Error('x-hamming must have a direction of "encode" or "decode"');
      }
      switch (this.direction) {
        case "encode":
          this.initializeEncoding();
          break;
        case "decode":
          this.initializeDecoding();
          break;
      }
    }
    /**
       * Initialize a Hamming Code for Encoding.
       */
    initializeEncoding() {
      let dataDigits = 1;
      let index = 1;
      while (dataDigits <= this.value.length) {
        if ([0, 1, 2, 3, 4, 5].map((n) => Math.pow(2, n)).includes(index)) {
          const p = new HammingDigit(this.$svg, true, index, -1, -1);
          this.digits.push(p);
          p.snapToFullPosition();
          p.hide();
        } else {
          const val = parseInt(this.value.charAt(dataDigits - 1));
          const d = new HammingDigit(this.$svg, false, index, dataDigits, val);
          this.digits.push(d);
          d.snapToDataPosition();
          dataDigits++;
        }
        index++;
      }
    }
    initializeDecoding() {
      let index = 1;
      let dataDigits = 1;
      while (index <= this.value.length) {
        const val = parseInt(this.value.charAt(index - 1));
        if ([0, 1, 2, 3, 4, 5].map((n) => Math.pow(2, n)).includes(index)) {
          const p = new HammingDigit(this.$svg, true, index, -1, val);
          this.digits.push(p);
          p.snapToFullPosition();
        } else {
          const d = new HammingDigit(this.$svg, false, index, dataDigits, val);
          this.digits.push(d);
          d.snapToFullPosition();
          dataDigits++;
        }
        index++;
      }
    }
    noop() {
    }
    /**
       * Slide data bits to make room for parity bits
       */
    makeRoomForParities() {
      this.digits.filter((hd) => !hd.parity).forEach((hd) => hd.makeRoom());
      setTimeout(() => this.digits.filter((hd) => hd.parity).forEach((hd) => hd.show()), 400);
    }
    hideParityBits() {
      this.digits.filter((hd) => hd.parity).forEach((hd) => hd.hide());
      this.digits.filter((hd) => !hd.parity).forEach((hd) => hd.squeezeRoom());
    }
    /**
       * Highlight the digits in the parity group digit
       * @param group parity digit
       */
    highlight(group) {
      this.digits.forEach((hd) => hd.isParityMatch(group) ? hd.bold() : hd.dim());
    }
    showParity(digit) {
      const value = this.getParityValue(digit);
      this.digits[digit - 1].updateValue(value);
    }
    hideParity(digit) {
      this.digits[digit - 1].updateValue(-1);
    }
    showAll() {
      this.digits.forEach((hd) => hd.bold());
    }
    /**
       * Mark only the parity bit which has an error
       * @param group parity group 1,2,4,8
       */
    markSingleBitError(group) {
      this.digits.filter((hd) => hd.fullIndex === group).forEach((hd) => hd.markError());
    }
    unmarkSingleBitError(group) {
      this.digits.filter((hd) => hd.fullIndex === group).forEach((hd) => hd.unmarkError());
    }
    /**
       * Mark each digit with an error.
       * @param group the parity group
       */
    markGroupError(group) {
      this.digits.filter((hd) => hd.isParityMatch(group)).forEach((hd) => hd.markError());
    }
    unmarkGroupError(group) {
      this.digits.filter((hd) => hd.isParityMatch(group)).forEach((hd) => hd.unmarkError());
    }
    /**
       * Show DigitOutlines for a group
       * @param group parity group 1,2,4,8
       * @param yIndex position in the y-direction
       */
    _showGroupFilter(group, yIndex) {
      this.digits.filter((hd) => hd.isParityMatch(group)).forEach((hd) => {
        const g = new _DigitOutline(this.$svg, hd.fullIndex, yIndex);
        g.moveToPosition();
      });
    }
    correctDataBit(index) {
      this.digits[index - 1].reverseBit();
    }
    /**
       * Sum the values of all data digits in a parity group.
       * @param group 1, 2, 4, 8
       */
    getParityValue(group) {
      const parity = this.digits.filter((hd) => !hd.parity).filter((hd) => hd.isParityMatch(group)).map((hd) => hd.value).reduce((acc, val) => acc + val);
      return parity % 2;
    }
    /**
       * Update model
       * @param model model to update
       */
    updateModel(model) {
      this.digits.filter((hd) => hd.parity).map((hd) => [hd.fullIndex, this.getParityValue(hd.fullIndex)]).forEach((hd) => {
        const bit = hd[1] % 2;
        model[`parity${hd[0]}right`] = bit === 0 ? "even" : "odd";
        model[`parity${hd[0]}wrong`] = bit === 0 ? "odd" : "even";
        model[`pb${hd[0]}r`] = bit === 0 ? 0 : 1;
        model[`pb${hd[0]}w`] = bit === 0 ? 1 : 0;
      });
    }
  };
  HammingCode = __decorateClass([
    register("x-hamming")
  ], HammingCode);

  // content/codes/functions.ts
  function intro($step) {
    let hasSeenHint = false;
    loadScript("https://w.soundcloud.com/player/api.js").then(() => {
      const widget = window.SC.Widget($step.$("iframe")._el);
      widget.bind("play", () => {
        if (!hasSeenHint) setTimeout(() => $step.addHint("song"), 5e3);
        setTimeout(() => $step.score("play"), 7e3);
        hasSeenHint = true;
      });
    });
  }
  function flashlight($step) {
    const $window = $step.$(".window");
    slide($window, {
      down: () => {
        $window.addClass("pressed");
        $step.score("flashlight");
      },
      up: () => $window.removeClass("pressed")
    });
  }
  function telegraph($step) {
    const $telegraph = $step.$(".telegraph");
    let sound;
    slide($telegraph, {
      down: () => {
        $telegraph.addClass("pressed");
        sound = beep();
        $step.score("press");
      },
      up: () => {
        $telegraph.removeClass("pressed");
        if (sound) sound.stop();
      }
    });
  }
  function morseEncoding($step) {
    const $codeBox = $step.$("x-code-box");
    $codeBox.encode((char, $el) => {
      for (const x of MORSE_CODE[char.toLowerCase()].split("")) {
        $N("span", { class: x === "\u2022" ? "dot" : "dash" }, $el);
      }
    });
    $codeBox.on("type", () => $step.score("type"));
  }
  function morseApplications($step) {
    const code = "hollywood".split("").map((c) => MORSE_CODE[c]).join("").split("");
    const $light = $step.$(".capitol-light");
    function flash() {
      return __async(this, null, function* () {
        for (const c of code) {
          $light.show();
          yield wait(c === "\u2022" ? 200 : 500);
          $light.hide();
          yield wait(100);
        }
        flash();
      });
    }
    flash();
    $step.$("x-video").on("play", () => $step.score("play"));
  }
  function radio($step) {
    const audio = new Audio("/content/codes/images/better-days-audio.mp3");
    audio.preload = "true";
    const $btn = $step.$(".radio-play");
    $btn.on("click", () => audio.paused ? audio.play() : audio.pause());
    audio.addEventListener("play", () => $btn.addClass("playing"));
    audio.addEventListener("pause", () => $btn.removeClass("playing"));
    audio.addEventListener("ended", () => {
      $step.score("play");
      audio.currentTime = 0;
    });
  }
  function transistor($section) {
    const $pathOn = $section.$("#path_on");
    const $pathOff = $section.$("#path_off");
    const $electrons = $section.$$("#electron");
    const $switch = $section.$(".transist");
    let switchOn = false;
    let electronPositions;
    const UPDATE_PERIOD = 100;
    function move() {
      if (!switchOn) return;
      electronPositions = electronPositions.map((p) => {
        let pp = p + 0.02;
        if (pp >= 1) pp = pp - 1;
        return pp;
      });
      $electrons.forEach((e, i) => {
        const xy = $pathOn.getPointAt(electronPositions[i]);
        const xyShift = new Point(xy.x - 12, xy.y - 12);
        e.setTransform(xyShift);
      });
      setTimeout(move, UPDATE_PERIOD);
    }
    function turnOn() {
      $electrons.forEach((e) => e.show());
      const totalLength = $pathOn.strokeLength;
      const gap = totalLength / $electrons.length;
      electronPositions = $electrons.map((e, i) => i * gap / totalLength);
      setTimeout(move, UPDATE_PERIOD);
    }
    function turnOff() {
      $electrons.forEach((e, i) => {
        if (i > 3) {
          e.hide();
        } else {
          const xy = $pathOff.getPointAt([0.11, 0.37, 0.63, 0.89][i]);
          const xyShift = new Point(xy.x - 12, xy.y - 12);
          e.setTransform(xyShift);
        }
      });
    }
    $switch.on("click", () => {
      $section.score("switch");
      switchOn = !switchOn;
      if (switchOn) turnOn();
      else turnOff();
    });
  }
  function numberGrid($grid, time, className, filter) {
    for (const $i of $grid.children) {
      if (!filter($i.text)) continue;
      delay(() => $i.addClass(className), time);
      time += 80;
    }
  }
  function bracket($step) {
    let lastStep = 0;
    const $slider = $step.$("x-slider.bracket");
    const $rounds = $step.$$("g");
    const count = $rounds.length;
    function move(x) {
      const direction = x - lastStep;
      lastStep = x;
      for (let i = 0; i < x; i++) {
        $rounds[i].show();
      }
      for (let i = x + 1; i < count; i++) {
        $rounds[i].hide();
      }
      if (direction < 0 && x == 0) {
        $rounds[0].hide();
      }
      if (x == 0) return;
      if (direction > 0) {
        const $lines = $rounds[x - 1].$$("line");
        $lines.forEach((l, i) => {
          if (i % 2 == 0) {
            l.animate({
              transform: [
                `translate(-50px, 0px) scale(0.0, 1.0)`,
                `translate(0px, 0px) scale(1.0, 1.0)`
              ]
            }, 400, 100);
          }
        });
      }
    }
    $slider.on("move", move);
    move(-1);
  }
  function dec2bin($section) {
    const $slideshow = $section.$("x-slideshow");
    const $blockN = $section.$("#blockN");
    const digits = [16, 8, 4, 2, 1];
    const $digitBlocks = digits.map((d) => $section.$(`#block${d}`));
    const $digitClaws = digits.map((d) => $section.$(`#thingy${d}`));
    const $digitText = digits.map((d) => $section.$(`#digit${d}`));
    $digitBlocks.forEach((b) => b.hide());
    $digitText.forEach((t) => t.hide());
    const CLAW_START_Y = 40;
    const CLAW_END_Y = 130;
    const ARM_Y_SCALE = CLAW_END_Y / CLAW_START_Y;
    const BLOCK_Y = 234;
    const BLOCK_Y_HIGH = 146;
    const BLOCK_X_START = 166;
    const basex = 473;
    const BLOCK_X_POSITIONS = [0, 227, 374, 445, 496];
    const DURATION1 = 400;
    const DURATION2 = 400;
    const Nvals = [25, 9, 1, 1, 1];
    const Nbinary = [true, true, false, false, true];
    function lowerClaw(digitIndex, grabbed) {
      const $claw = $digitClaws[digitIndex];
      const $grab = $claw.$("path");
      $grab.animate(
        {
          transform: ["none", `translate(0px, ${CLAW_END_Y - CLAW_START_Y}px)`]
        },
        DURATION1,
        grabbed ? 0 : DURATION2
      );
      const $arm = $claw.$("rect");
      $arm.animate(
        { transform: ["none", `scale(1.0, ${ARM_Y_SCALE})`] },
        DURATION1,
        grabbed ? 0 : DURATION2
      );
      if (grabbed) {
        $digitBlocks[digitIndex].animate({
          transform: [
            `translate(${BLOCK_X_POSITIONS[digitIndex]}px, ${BLOCK_Y_HIGH}px)`,
            `translate(${BLOCK_X_POSITIONS[digitIndex]}px, ${BLOCK_Y}px)`
          ]
        }, DURATION1);
      }
    }
    function raiseClaw(digitIndex, grabbed) {
      const $claw = $digitClaws[digitIndex];
      const $grab = $claw.$("path");
      $grab.animate(
        { transform: [`translate(0px, ${CLAW_END_Y - CLAW_START_Y}px)`, "none"] },
        DURATION1
      );
      const $arm = $claw.$("rect");
      $arm.animate(
        { transform: [`scale(1.0, ${ARM_Y_SCALE})`, "none"] },
        DURATION1
      );
      if (grabbed) {
        $digitBlocks[digitIndex].show();
        $digitBlocks[digitIndex].animate({
          transform: [
            `translate(${BLOCK_X_POSITIONS[digitIndex]}px, ${BLOCK_Y}px)`,
            `translate(${BLOCK_X_POSITIONS[digitIndex]}px, ${BLOCK_Y_HIGH}px)`
          ]
        }, DURATION1);
      }
    }
    function moveBlockBetweenDigits(startDigit, endDigit) {
      function getClawStart(index) {
        return basex + BLOCK_X_POSITIONS[index];
      }
      function getClawEnd(index) {
        return basex + BLOCK_X_POSITIONS[index] + digits[index] * 10;
      }
      if (startDigit < endDigit) {
        const startX = startDigit < 0 ? BLOCK_X_START : Nbinary[startDigit] ? getClawEnd(startDigit) : getClawStart(startDigit);
        $blockN.animate(
          {
            transform: [
              `translate(${startX}px, ${BLOCK_Y}px)`,
              `translate(${getClawStart(endDigit)}px, ${BLOCK_Y}px)`
            ]
          },
          DURATION1
        );
      } else {
        const endX = endDigit < 0 ? BLOCK_X_START : Nbinary[endDigit] ? getClawEnd(endDigit) : getClawStart(endDigit);
        $blockN.animate(
          {
            transform: [
              `translate(${getClawStart(startDigit)}px, ${BLOCK_Y}px)`,
              `translate(${endX}px, ${BLOCK_Y}px)`
            ]
          },
          DURATION2,
          DURATION1
        );
      }
    }
    function splitBlock(digitIndex, N) {
      var _a2;
      $digitBlocks[digitIndex].show();
      const placeValue = digits[digitIndex];
      const newN = N - placeValue;
      (_a2 = $blockN.$("rect")) == null ? void 0 : _a2.setAttr("width", newN * 10);
      $blockN.animate({
        transform: [
          `translate(${basex + BLOCK_X_POSITIONS[digitIndex] + digits[digitIndex] * 10}px, ${BLOCK_Y}px)`,
          `translate(${basex + BLOCK_X_POSITIONS[digitIndex] + digits[digitIndex] * 10}px, ${BLOCK_Y}px)`
        ]
      }, DURATION1);
      if (newN == 0) {
        $blockN.hide();
        return;
      } else {
        const textBuffer = newN >= 10 ? 14 : 7;
        $blockN.$("tspan").setAttr("x", newN * 10 / 2 - textBuffer);
        $blockN.$("tspan").textStr = newN;
      }
    }
    function mergeBlocks(digitIndex, N) {
      const newN = digits[digitIndex] + N;
      setTimeout(() => {
        var _a2;
        $digitBlocks[digitIndex].hide();
        $blockN.show();
        (_a2 = $blockN.$("rect")) == null ? void 0 : _a2.setAttr("width", newN * 10);
        $blockN.animate(
          {
            transform: [
              `translate(${basex + BLOCK_X_POSITIONS[digitIndex]}px, ${BLOCK_Y}px)`,
              `translate(${basex + BLOCK_X_POSITIONS[digitIndex]}px, ${BLOCK_Y}px)`
            ]
          },
          DURATION1,
          DURATION2
        );
        const textBuffer = newN >= 10 ? 14 : 7;
        $blockN.$("tspan").setAttr("x", newN * 10 / 2 - textBuffer);
        $blockN.$("tspan").textStr = newN;
      }, DURATION1 + DURATION2);
    }
    $slideshow.on("next", (x) => {
      switch (x) {
        case 1:
          lowerClaw(0, false);
          moveBlockBetweenDigits(-1, 0);
          break;
        case 2:
          raiseClaw(0, Nbinary[0]);
          if (Nbinary[0]) splitBlock(0, Nvals[0]);
          setTimeout(() => $digitText[0].show(), DURATION1);
          break;
        case 3:
          lowerClaw(1, false);
          moveBlockBetweenDigits(0, 1);
          break;
        case 4:
          if (Nbinary[1]) splitBlock(1, Nvals[1]);
          raiseClaw(1, Nbinary[1]);
          setTimeout(() => $digitText[1].show(), DURATION1);
          break;
        case 5:
          lowerClaw(2, false);
          moveBlockBetweenDigits(1, 2);
          break;
        case 6:
          if (Nbinary[2]) splitBlock(2, Nvals[2]);
          raiseClaw(2, Nbinary[2]);
          setTimeout(() => $digitText[2].show(), DURATION1);
          break;
        case 7:
          lowerClaw(3, false);
          moveBlockBetweenDigits(2, 3);
          break;
        case 8:
          if (Nbinary[3]) splitBlock(3, Nvals[3]);
          raiseClaw(3, Nbinary[3]);
          setTimeout(() => $digitText[3].show(), DURATION1);
          break;
        case 9:
          lowerClaw(4, false);
          moveBlockBetweenDigits(3, 4);
          break;
        case 10:
          raiseClaw(4, Nbinary[4]);
          if (Nbinary[4]) splitBlock(4, Nvals[4]);
          setTimeout(() => $digitText[4].show(), DURATION1);
          break;
      }
    });
    $slideshow.on("back", (x) => {
      switch (x) {
        case 0:
          raiseClaw(0, false);
          moveBlockBetweenDigits(0, -1);
          break;
        case 1:
          lowerClaw(0, true);
          mergeBlocks(0, 9);
          $digitText[0].hide();
          break;
        case 2:
          raiseClaw(1, false);
          moveBlockBetweenDigits(1, 0);
          break;
        case 3:
          lowerClaw(1, true);
          mergeBlocks(1, 1);
          $digitText[1].hide();
          break;
        case 4:
          raiseClaw(2, false);
          moveBlockBetweenDigits(2, 1);
          break;
        case 5:
          lowerClaw(2, false);
          $digitText[2].hide();
          break;
        case 6:
          raiseClaw(3, false);
          moveBlockBetweenDigits(3, 2);
          break;
        case 7:
          lowerClaw(3, false);
          $digitText[3].hide();
          break;
        case 8:
          raiseClaw(4, false);
          moveBlockBetweenDigits(4, 3);
          break;
        case 9:
          lowerClaw(4, true);
          mergeBlocks(4, 0);
          $digitText[4].hide();
          break;
      }
    });
  }
  function finger5($section) {
    const $fingers = $section.$$(".bin-finger");
    $fingers.forEach(($f) => $f.hide());
    let i = 0;
    const delay2 = 300;
    $section.onScore("blank-0", () => $fingers.forEach(
      ($f) => $f.enter("slide", 500, i++ * delay2)
    ));
  }
  function finger32($section) {
    const $fingers = $section.$$(".bin-finger");
    $fingers.forEach(($f) => $f.hide());
    const $decCaptions = $section.$$(".dec");
    const $binCaptions = $section.$$(".bin");
    let showingBin = false;
    $binCaptions.forEach(($f) => $f.hide());
    let i = 0;
    const delay2 = 200;
    $section.onScore("blank-0", () => $fingers.forEach(
      ($f) => $f.enter("slide", 500, i++ * delay2)
    ));
    const $select = $section.$("x-select");
    $select.on("change", ($el) => {
      console.log($el.data.name);
      (showingBin ? $binCaptions : $decCaptions).forEach(($f) => $f.hide());
      (showingBin ? $decCaptions : $binCaptions).forEach(($f) => $f.show());
      showingBin = !showingBin;
    });
  }
  function binaryTable($section) {
    function fx(digit) {
      return (i) => {
        const s = "" + i;
        return s[digit] === "0";
      };
    }
    function fy(digit) {
      return (i) => {
        const s = "" + i;
        return s[digit] === "1";
      };
    }
    function colour(x) {
      var _a2, _b;
      (_a2 = $section.$(".number-grid")) == null ? void 0 : _a2.children.forEach((c) => {
        c.removeClass("purple-yellow");
        c.removeClass("green-yellow");
      });
      (_b = $section.$(".number-grid")) == null ? void 0 : _b.removeClass("green-yellow");
      numberGrid($section.$(".number-grid"), 0, "purple-yellow", fx(+x));
      numberGrid($section.$(".number-grid"), 0, "green-yellow", fy(+x));
    }
    $section.$("select").change(colour);
    colour("4");
  }
  function binarySimulation($step) {
    const buttons = $step.$$(".btn");
    buttons[0].on("click", () => {
      $step.score("advance");
    });
  }
  function resolution($step) {
    const $codeBox = $step.$("x-code-box");
    $codeBox.encode((char, $el) => {
      for (const x of MORSE_CODE[char.toLowerCase()].split("")) {
        $N("span", { class: x === "\u2022" ? "dash" : "dot" }, $el);
      }
    });
  }
  function satellite($step) {
    const $trajectory = $step == null ? void 0 : $step.$(".bitstream");
    const $svg = $step.$("svg");
    const $bitstream = $N("g", { class: "text" }, $svg);
    const NUM_BITS = 12;
    const FONT_SIZE = 30;
    const START = $trajectory.getPointAt(1);
    const END = $trajectory.getPointAt(0);
    const ANGLE = Math.atan2(END.y - START.y, END.x - START.x);
    const dataStream = [];
    for (let i = 0; i < NUM_BITS; i++) {
      const $g = $N("g", {}, $bitstream);
      $N("text", { text: Math.floor(Math.random() * 2), "font-size": FONT_SIZE, fill: "#FAFFFB" }, $g);
      const $errorFlash = $N("rect", { fill: "#CC0E66", x: -2, y: -26, width: 20, height: 30, rx: 6, ry: 6, "fill-opacity": 0.5 }, $g);
      $errorFlash.hide();
      dataStream.push($g);
      dataStream[i].hide();
    }
    let time = 0;
    const SPEED = 1e-3;
    const ERROR_CHANCE = 0.2;
    const FLASH_TIME = 150;
    let isMoving = false;
    let numErrors = 0;
    function moveRecurse() {
      time += SPEED;
      dataStream.forEach((p, i) => {
        const progress = i / dataStream.length + time;
        if (Math.floor(progress) > Math.floor(progress - SPEED)) {
          p.$("text").textStr = Math.floor(Math.random() * 2);
          p.$("rect").hide();
        }
        if (Math.floor(progress * 10 % 10) === 5 && Math.floor((progress - SPEED) * 10 % 10) === 4) {
          if (Math.random() < ERROR_CHANCE) {
            numErrors++;
            if (numErrors == 2) {
              $step.score("transmit");
            }
            const prevVal = p.$("text").text;
            p.$("rect").enter("fade", FLASH_TIME, 0);
            setTimeout(() => p.$("text").textStr = prevVal === "1" ? 0 : 1, FLASH_TIME);
            p.$("rect").exit("fade", FLASH_TIME, FLASH_TIME);
          }
        }
        const xy = $trajectory.getPointAt(progress * 1e3 % 1e3 / 1e3);
        p.setTransform(new Point(xy.x, xy.y), ANGLE);
      });
      if (isMoving) {
        setTimeout(() => {
          moveRecurse();
        }, 10);
      }
    }
    function moveBits() {
      isMoving = true;
      moveRecurse();
      dataStream == null ? void 0 : dataStream.forEach((p) => {
        p.show();
      });
    }
    function stopBits() {
      isMoving = false;
      dataStream.forEach((p) => {
        p.hide();
      });
    }
    const $satellites = $step.$(".satellites");
    slide($satellites, {
      down: () => {
        moveBits();
      },
      up: () => {
        stopBits();
      }
    });
  }
  function hammingEncode($step) {
    const $hamming = $step.$("x-hamming");
    $hamming.updateModel($step.model);
    const BLANK_MAP = {
      "blank-0 blank-1": 1,
      "blank-2 blank-3": 2,
      "blank-4 blank-5": 4,
      "blank-6 blank-7": 8
    };
    Object.keys(BLANK_MAP).forEach((k) => {
      $step.onScore(k, () => {
        $hamming.showParity(BLANK_MAP[k]);
      });
    });
    const slideNext = [
      // "Let's say..."
      () => $hamming.noop(),
      // "First we must shift..."
      () => $hamming.makeRoomForParities(),
      // "The parity bits will go into..."
      () => $hamming.noop(),
      // "We must figure out..."
      () => $hamming.noop(),
      // "Let's start with the first parity group..."
      () => $hamming.highlight(1),
      () => $hamming.noop(),
      () => $hamming.highlight(2),
      () => $hamming.noop(),
      () => $hamming.highlight(4),
      () => $hamming.noop(),
      () => $hamming.highlight(8),
      () => $hamming.noop(),
      () => $hamming.showAll()
    ];
    const slideBack = [
      () => $hamming.hideParityBits(),
      () => $hamming.noop(),
      () => $hamming.showAll(),
      () => $hamming.noop(),
      // $hamming.hideParity(1),
      () => $hamming.highlight(1),
      () => $hamming.noop(),
      // $hamming.hideParity(2),
      () => $hamming.highlight(2),
      () => $hamming.noop(),
      // $hamming.hideParity(4),
      () => $hamming.highlight(4),
      () => $hamming.noop(),
      // $hamming.hideParity(8),
      () => $hamming.highlight(8),
      () => $hamming.noop()
    ];
    const $slideshow = $step.$("x-slideshow");
    $slideshow.on("next", (x) => {
      if (x >= 0 && x < slideNext.length) {
        slideNext[x]();
      }
    });
    $slideshow.on("back", (x) => {
      if (x >= 0 && x < slideBack.length) {
        slideBack[x]();
      }
    });
  }
  function hammingDecode($step) {
    const $hamming = $step.$("x-hamming");
    $step.onScore("blank-1 blank-2", () => {
      $hamming.markSingleBitError(1);
    });
    $step.onScore("blank-5 blank-6", () => {
      $hamming.markSingleBitError(4);
    });
    $step.onScore("blank-9", () => {
      $hamming.unmarkSingleBitError(1);
      $hamming.unmarkSingleBitError(4);
      $hamming.markSingleBitError(5);
    });
    $step.onScore("blank-10", () => {
      $hamming.correctDataBit(5);
      $hamming.unmarkSingleBitError(5);
    });
    const slideNext = [
      // "What if..."
      () => $hamming.noop(),
      // "First let's check parity group 1..."
      () => {
        $hamming.highlight(1);
      },
      // "Now let's check parity group 2..."
      () => {
        $hamming.highlight(2);
      },
      // "Now let's check parity group 4..."
      () => {
        $hamming.highlight(4);
      },
      // "Now let's check..."
      () => $hamming.highlight(8),
      // "We identified there is something wrong..."
      () => {
        $hamming.showAll();
      },
      // "Now can remove..."
      () => {
        $hamming.hideParityBits();
      }
    ];
    const slideBack = [
      // "What if..."
      () => {
        $hamming.showAll();
      },
      // "First let's check parity group 1..."
      () => {
        $hamming.highlight(1);
      },
      // "Now let's check parity group 2..."
      () => {
        $hamming.highlight(2);
      },
      // "Now let's check parity group 4..."
      () => {
        $hamming.highlight(4);
      },
      // "Now let's check parity group 8..."
      () => {
        $hamming.highlight(8);
      },
      // "We identified..."
      () => {
        $hamming.makeRoomForParities();
      },
      // "Now we can remove..."
      () => {
        $hamming.noop();
      }
    ];
    const $slideshow = $step.$("x-slideshow");
    $slideshow.on("next", (x) => {
      if (x >= 0 && x < slideNext.length) {
        slideNext[x]();
      }
    });
    $slideshow.on("back", (x) => {
      if (x >= 0 && x < slideBack.length) {
        slideBack[x]();
      }
    });
  }
  function barcodeDrawing($step) {
    var _a2;
    const transforms = [
      "scale(4) translate(50%, 0)",
      `scale(4) translate(${50 - 50 * 1 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 2 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 3 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 4 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 5 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 6 / 7}%, 0)`,
      "scale(4) translate(0%, 0)",
      `scale(4) translate(${50 - 50 * 8 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 9 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 10 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 11 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 12 / 7}%, 0)`,
      `scale(4) translate(${50 - 50 * 13 / 7}%, 0)`,
      "scale(4) translate(-50%, 0)"
    ];
    const $svg = $step.$("svg");
    $step.$$(".zoom").forEach((button, i) => {
      button.on("click", () => $svg == null ? void 0 : $svg.css("transform", transforms[i]));
    });
    const $barcode = $step.$("x-barcode");
    (_a2 = $step.$(".generate")) == null ? void 0 : _a2.on("click", () => {
      $barcode.generateNewCode();
    });
  }
  return __toCommonJS(functions_exports);
})();